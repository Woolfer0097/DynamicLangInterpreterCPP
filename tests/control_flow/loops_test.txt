// Test: Loop Statements
// Tests while loops, for loops, and exit statements

test "Simple while loop" {
    var counter := 0
    var sum := 0
    while counter < 5 loop
        sum := sum + counter
        counter := counter + 1
    end
    assert sum == 10  // 0+1+2+3+4 = 10
    assert counter == 5
}

test "While loop with false condition initially" {
    var x := 0
    while false loop
        x := 99
    end
    assert x == 0  // loop body should not execute
}

test "While loop with complex condition" {
    var x := 10
    var count := 0
    while x > 0 and count < 3 loop
        x := x - 2
        count := count + 1
    end
    assert x == 4
    assert count == 3
}

test "Infinite loop with exit" {
    var sum := 0
    var i := 1
    loop
        sum := sum + i
        i := i + 1
        if i > 10 => exit
    end
    assert sum == 55  // 1+2+...+10 = 55
    assert i == 11
}

test "For loop with range" {
    var sum := 0
    for i in 1..5 loop
        sum := sum + i
    end
    assert sum == 15  // 1+2+3+4+5 = 15
}

test "For loop with range and variable" {
    var result := 1
    for i in 1..4 loop
        result := result * 2
    end
    assert result == 16  // 2^4 = 16
}

test "For loop iterating over array" {
    var arr := [10, 20, 30, 40]
    var sum := 0
    for value in arr loop
        sum := sum + value
    end
    assert sum == 100
}

test "For loop iterating over array with index variable" {
    var arr := [2, 4, 6, 8]
    var sum := 0
    for i in arr loop
        sum := sum + i
    end
    assert sum == 20
}

test "Nested loops" {
    var result := 0
    for i in 1..3 loop
        for j in 1..2 loop
            result := result + 1
        end
    end
    assert result == 6  // 3 * 2 = 6 iterations
}

test "Loop with break (exit) in nested structure" {
    var outer_count := 0
    var inner_count := 0
    for i in 1..5 loop
        outer_count := outer_count + 1
        for j in 1..5 loop
            inner_count := inner_count + 1
            if inner_count >= 3 => exit
        end
    end
    assert outer_count == 5
    assert inner_count == 3
}

test "Loop with variable scope" {
    var sum := 0
    for i in 1..3 loop
        var temp := i * 2
        sum := sum + temp
    end
    assert sum == 12  // (1*2) + (2*2) + (3*2) = 2+4+6 = 12
    // temp should be out of scope here
}

test "Multiple exit conditions" {
    var count := 0
    var sum := 0
    loop
        count := count + 1
        sum := sum + count
        if count >= 10 => exit
        if sum > 50 => exit
    end
    assert count == 10
    assert sum == 55  // sum reached 55 at count=10
}
