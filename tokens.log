KW_test	test	4:5
STRING	Simple while loop	4:25
{	{	4:27
KW_var	var	5:8
IDENT	counter	5:16
:=	:=	5:19
INT	0	5:21
KW_var	var	6:8
IDENT	sum	6:12
:=	:=	6:15
INT	0	6:17
KW_while	while	7:10
IDENT	counter	7:18
<	<	7:20
INT	5	7:22
KW_loop	loop	7:27
IDENT	sum	8:12
:=	:=	8:15
IDENT	sum	8:19
+	+	8:21
IDENT	counter	8:29
IDENT	counter	9:16
:=	:=	9:19
IDENT	counter	9:27
+	+	9:29
INT	1	9:31
KW_end	end	10:8
KW_assert	assert	11:11
IDENT	sum	11:15
==	==	11:18
INT	10	11:21
KW_assert	assert	12:11
IDENT	counter	12:19
==	==	12:22
INT	5	12:24
}	}	13:2
KW_test	test	15:5
STRING	While loop with false condition initially	15:49
{	{	15:51
KW_var	var	16:8
IDENT	x	16:10
:=	:=	16:13
INT	0	16:15
KW_while	while	17:10
KW_false	false	17:16
KW_loop	loop	17:21
IDENT	x	18:10
:=	:=	18:13
INT	99	18:16
KW_end	end	19:8
KW_assert	assert	20:11
IDENT	x	20:13
==	==	20:16
INT	0	20:18
}	}	21:2
KW_test	test	23:5
STRING	While loop with complex condition	23:41
{	{	23:43
KW_var	var	24:8
IDENT	x	24:10
:=	:=	24:13
INT	10	24:16
KW_var	var	25:8
IDENT	count	25:14
:=	:=	25:17
INT	0	25:19
KW_while	while	26:10
IDENT	x	26:12
>	>	26:14
INT	0	26:16
KW_and	and	26:20
IDENT	count	26:26
<	<	26:28
INT	3	26:30
KW_loop	loop	26:35
IDENT	x	27:10
:=	:=	27:13
IDENT	x	27:15
-	-	27:17
INT	2	27:19
IDENT	count	28:14
:=	:=	28:17
IDENT	count	28:23
+	+	28:25
INT	1	28:27
KW_end	end	29:8
KW_assert	assert	30:11
IDENT	x	30:13
==	==	30:16
INT	4	30:18
KW_assert	assert	31:11
IDENT	count	31:17
==	==	31:20
INT	3	31:22
}	}	32:2
KW_test	test	34:5
STRING	Infinite loop with exit	34:31
{	{	34:33
KW_var	var	35:8
IDENT	sum	35:12
:=	:=	35:15
INT	0	35:17
KW_var	var	36:8
IDENT	i	36:10
:=	:=	36:13
INT	1	36:15
KW_loop	loop	37:9
IDENT	sum	38:12
:=	:=	38:15
IDENT	sum	38:19
+	+	38:21
IDENT	i	38:23
IDENT	i	39:10
:=	:=	39:13
IDENT	i	39:15
+	+	39:17
INT	1	39:19
KW_if	if	40:11
IDENT	i	40:13
>	>	40:15
INT	10	40:18
=>	=>	40:21
KW_exit	exit	40:26
KW_end	end	41:8
KW_assert	assert	42:11
IDENT	sum	42:15
==	==	42:18
INT	55	42:21
KW_assert	assert	43:11
IDENT	i	43:13
==	==	43:16
INT	11	43:19
}	}	44:2
KW_test	test	46:5
STRING	For loop with range	46:27
{	{	46:29
KW_var	var	47:8
IDENT	sum	47:12
:=	:=	47:15
INT	0	47:17
KW_for	for	48:8
IDENT	i	48:10
KW_in	in	48:13
INT	1	48:15
.	.	48:16
.	.	48:17
INT	5	48:18
KW_loop	loop	48:23
IDENT	sum	49:12
:=	:=	49:15
IDENT	sum	49:19
+	+	49:21
IDENT	i	49:23
KW_end	end	50:8
KW_assert	assert	51:11
IDENT	sum	51:15
==	==	51:18
INT	15	51:21
}	}	52:2
KW_test	test	54:5
STRING	For loop with range and variable	54:40
{	{	54:42
KW_var	var	55:8
IDENT	result	55:15
:=	:=	55:18
INT	1	55:20
KW_for	for	56:8
IDENT	i	56:10
KW_in	in	56:13
INT	1	56:15
.	.	56:16
.	.	56:17
INT	4	56:18
KW_loop	loop	56:23
IDENT	result	57:15
:=	:=	57:18
IDENT	result	57:25
*	*	57:27
INT	2	57:29
KW_end	end	58:8
KW_assert	assert	59:11
IDENT	result	59:18
==	==	59:21
INT	16	59:24
}	}	60:2
KW_test	test	62:5
STRING	For loop iterating over array	62:37
{	{	62:39
KW_var	var	63:8
IDENT	arr	63:12
:=	:=	63:15
[	[	63:17
INT	10	63:19
,	,	63:20
INT	20	63:23
,	,	63:24
INT	30	63:27
,	,	63:28
INT	40	63:31
]	]	63:32
KW_var	var	64:8
IDENT	sum	64:12
:=	:=	64:15
INT	0	64:17
KW_for	for	65:8
IDENT	value	65:14
KW_in	in	65:17
IDENT	arr	65:21
KW_loop	loop	65:26
IDENT	sum	66:12
:=	:=	66:15
IDENT	sum	66:19
+	+	66:21
IDENT	value	66:27
KW_end	end	67:8
KW_assert	assert	68:11
IDENT	sum	68:15
==	==	68:18
INT	100	68:22
}	}	69:2
KW_test	test	71:5
STRING	For loop iterating over array with index variable	71:57
{	{	71:59
KW_var	var	72:8
IDENT	arr	72:12
:=	:=	72:15
[	[	72:17
INT	2	72:18
,	,	72:19
INT	4	72:21
,	,	72:22
INT	6	72:24
,	,	72:25
INT	8	72:27
]	]	72:28
KW_var	var	73:8
IDENT	sum	73:12
:=	:=	73:15
INT	0	73:17
KW_for	for	74:8
IDENT	i	74:10
KW_in	in	74:13
IDENT	arr	74:17
KW_loop	loop	74:22
IDENT	sum	75:12
:=	:=	75:15
IDENT	sum	75:19
+	+	75:21
IDENT	i	75:23
KW_end	end	76:8
KW_assert	assert	77:11
IDENT	sum	77:15
==	==	77:18
INT	20	77:21
}	}	78:2
KW_test	test	80:5
STRING	Nested loops	80:20
{	{	80:22
KW_var	var	81:8
IDENT	result	81:15
:=	:=	81:18
INT	0	81:20
KW_for	for	82:8
IDENT	i	82:10
KW_in	in	82:13
INT	1	82:15
.	.	82:16
.	.	82:17
INT	3	82:18
KW_loop	loop	82:23
KW_for	for	83:12
IDENT	j	83:14
KW_in	in	83:17
INT	1	83:19
.	.	83:20
.	.	83:21
INT	2	83:22
KW_loop	loop	83:27
IDENT	result	84:19
:=	:=	84:22
IDENT	result	84:29
+	+	84:31
INT	1	84:33
KW_end	end	85:12
KW_end	end	86:8
KW_assert	assert	87:11
IDENT	result	87:18
==	==	87:21
INT	6	87:23
}	}	88:2
KW_test	test	90:5
STRING	Loop with break (exit) in nested structure	90:50
{	{	90:52
KW_var	var	91:8
IDENT	outer_count	91:20
:=	:=	91:23
INT	0	91:25
KW_var	var	92:8
IDENT	inner_count	92:20
:=	:=	92:23
INT	0	92:25
KW_for	for	93:8
IDENT	i	93:10
KW_in	in	93:13
INT	1	93:15
.	.	93:16
.	.	93:17
INT	5	93:18
KW_loop	loop	93:23
IDENT	outer_count	94:20
:=	:=	94:23
IDENT	outer_count	94:35
+	+	94:37
INT	1	94:39
KW_for	for	95:12
IDENT	j	95:14
KW_in	in	95:17
INT	1	95:19
.	.	95:20
.	.	95:21
INT	5	95:22
KW_loop	loop	95:27
IDENT	inner_count	96:24
:=	:=	96:27
IDENT	inner_count	96:39
+	+	96:41
INT	1	96:43
KW_if	if	97:15
IDENT	inner_count	97:27
>=	>=	97:30
INT	3	97:32
=>	=>	97:35
KW_exit	exit	97:40
KW_end	end	98:12
KW_end	end	99:8
KW_assert	assert	100:11
IDENT	outer_count	100:23
==	==	100:26
INT	5	100:28
KW_assert	assert	101:11
IDENT	inner_count	101:23
==	==	101:26
INT	3	101:28
}	}	102:2
KW_test	test	104:5
STRING	Loop with variable scope	104:32
{	{	104:34
KW_var	var	105:8
IDENT	sum	105:12
:=	:=	105:15
INT	0	105:17
KW_for	for	106:8
IDENT	i	106:10
KW_in	in	106:13
INT	1	106:15
.	.	106:16
.	.	106:17
INT	3	106:18
KW_loop	loop	106:23
KW_var	var	107:12
IDENT	temp	107:17
:=	:=	107:20
IDENT	i	107:22
*	*	107:24
INT	2	107:26
IDENT	sum	108:12
:=	:=	108:15
IDENT	sum	108:19
+	+	108:21
IDENT	temp	108:26
KW_end	end	109:8
KW_assert	assert	110:11
IDENT	sum	110:15
==	==	110:18
INT	12	110:21
}	}	112:2
KW_test	test	114:5
STRING	Multiple exit conditions	114:32
{	{	114:34
KW_var	var	115:8
IDENT	count	115:14
:=	:=	115:17
INT	0	115:19
KW_var	var	116:8
IDENT	sum	116:12
:=	:=	116:15
INT	0	116:17
KW_loop	loop	117:9
IDENT	count	118:14
:=	:=	118:17
IDENT	count	118:23
+	+	118:25
INT	1	118:27
IDENT	sum	119:12
:=	:=	119:15
IDENT	sum	119:19
+	+	119:21
IDENT	count	119:27
KW_if	if	120:11
IDENT	count	120:17
>=	>=	120:20
INT	10	120:23
=>	=>	120:26
KW_exit	exit	120:31
KW_if	if	121:11
IDENT	sum	121:15
>	>	121:17
INT	50	121:20
=>	=>	121:23
KW_exit	exit	121:28
KW_end	end	122:8
KW_assert	assert	123:11
IDENT	count	123:17
==	==	123:20
INT	10	123:23
KW_assert	assert	124:11
IDENT	sum	124:15
==	==	124:18
INT	55	124:21
}	}	125:2
EOF		126:1
KW_test	test	4:5
STRING	Simple if-then statement	4:32
{	{	4:34
KW_var	var	5:8
IDENT	x	5:10
:=	:=	5:13
INT	0	5:15
KW_if	if	6:7
KW_true	true	6:12
KW_then	then	6:17
IDENT	x	7:10
:=	:=	7:13
INT	42	7:16
KW_end	end	8:8
KW_assert	assert	9:11
IDENT	x	9:13
==	==	9:16
INT	42	9:19
}	}	10:2
KW_test	test	12:5
STRING	If with else clause	12:27
{	{	12:29
KW_var	var	13:8
IDENT	x	13:10
:=	:=	13:13
INT	0	13:15
KW_var	var	14:8
IDENT	condition	14:18
:=	:=	14:21
KW_true	true	14:26
KW_if	if	15:7
IDENT	condition	15:17
KW_then	then	15:22
IDENT	x	16:10
:=	:=	16:13
INT	100	16:17
KW_else	else	17:9
IDENT	x	18:10
:=	:=	18:13
INT	200	18:17
KW_end	end	19:8
KW_assert	assert	20:11
IDENT	x	20:13
==	==	20:16
INT	100	20:20
IDENT	condition	22:14
:=	:=	22:17
KW_false	false	22:23
KW_if	if	23:7
IDENT	condition	23:17
KW_then	then	23:22
IDENT	x	24:10
:=	:=	24:13
INT	300	24:17
KW_else	else	25:9
IDENT	x	26:10
:=	:=	26:13
INT	400	26:17
KW_end	end	27:8
KW_assert	assert	28:11
IDENT	x	28:13
==	==	28:16
INT	400	28:20
}	}	29:2
KW_test	test	31:5
STRING	If with comparison condition	31:36
{	{	31:38
KW_var	var	32:8
IDENT	x	32:10
:=	:=	32:13
INT	0	32:15
KW_var	var	33:8
IDENT	y	33:10
:=	:=	33:13
INT	5	33:15
KW_if	if	34:7
IDENT	y	34:9
>	>	34:11
INT	3	34:13
KW_then	then	34:18
IDENT	x	35:10
:=	:=	35:13
INT	1	35:15
KW_end	end	36:8
KW_assert	assert	37:11
IDENT	x	37:13
==	==	37:16
INT	1	37:18
KW_if	if	39:7
IDENT	y	39:9
<	<	39:11
INT	3	39:13
KW_then	then	39:18
IDENT	x	40:10
:=	:=	40:13
INT	2	40:15
KW_end	end	41:8
KW_assert	assert	42:11
IDENT	x	42:13
==	==	42:16
INT	1	42:18
}	}	43:2
KW_test	test	45:5
STRING	If-short form (=>)	45:26
{	{	45:28
KW_var	var	46:8
IDENT	x	46:10
:=	:=	46:13
INT	0	46:15
KW_if	if	47:7
INT	5	47:9
>	>	47:11
INT	3	47:13
=>	=>	47:16
IDENT	x	47:18
:=	:=	47:21
INT	25	47:24
KW_assert	assert	48:11
IDENT	x	48:13
==	==	48:16
INT	25	48:19
KW_if	if	50:7
INT	3	50:9
>	>	50:11
INT	5	50:13
=>	=>	50:16
IDENT	x	50:18
:=	:=	50:21
INT	50	50:24
KW_assert	assert	51:11
IDENT	x	51:13
==	==	51:16
INT	25	51:19
}	}	52:2
KW_test	test	54:5
STRING	Variable scope in if blocks	54:35
{	{	54:37
KW_var	var	55:8
IDENT	outer	55:14
:=	:=	55:17
INT	100	55:21
KW_if	if	56:7
KW_true	true	56:12
KW_then	then	56:17
KW_var	var	57:12
IDENT	inner	57:18
:=	:=	57:21
INT	200	57:25
KW_assert	assert	58:15
IDENT	outer	58:21
==	==	58:24
INT	100	58:28
KW_assert	assert	59:15
IDENT	inner	59:21
==	==	59:24
INT	200	59:28
KW_end	end	60:8
KW_assert	assert	61:11
IDENT	outer	61:17
==	==	61:20
INT	100	61:24
}	}	63:2
KW_test	test	65:5
STRING	Multiple statements in if block	65:39
{	{	65:41
KW_var	var	66:8
IDENT	a	66:10
:=	:=	66:13
INT	0	66:15
,	,	66:16
IDENT	b	66:18
:=	:=	66:21
INT	0	66:23
KW_if	if	67:7
KW_true	true	67:12
KW_then	then	67:17
IDENT	a	68:10
:=	:=	68:13
INT	10	68:16
IDENT	b	69:10
:=	:=	69:13
INT	20	69:16
KW_var	var	70:12
IDENT	temp	70:17
:=	:=	70:20
IDENT	a	70:22
+	+	70:24
IDENT	b	70:26
KW_assert	assert	71:15
IDENT	temp	71:20
==	==	71:23
INT	30	71:26
KW_end	end	72:8
KW_assert	assert	73:11
IDENT	a	73:13
==	==	73:16
INT	10	73:19
KW_assert	assert	74:11
IDENT	b	74:13
==	==	74:16
INT	20	74:19
}	}	75:2
EOF		76:1
KW_test	test	4:5
STRING	Type checking for basic types	4:37
{	{	4:39
KW_var	var	5:8
IDENT	i	5:10
:=	:=	5:13
INT	42	5:16
KW_var	var	6:8
IDENT	r	6:10
:=	:=	6:13
REAL	3.14	6:18
KW_var	var	7:8
IDENT	s	7:10
:=	:=	7:13
STRING	hello	7:21
KW_var	var	8:8
IDENT	b	8:10
:=	:=	8:13
KW_true	true	8:18
KW_var	var	9:8
IDENT	n	9:10
:=	:=	9:13
KW_none	none	9:18
KW_assert	assert	11:11
(	(	11:13
IDENT	i	11:14
KW_is	is	11:17
KW_int	int	11:21
)	)	11:22
==	==	11:25
KW_true	true	11:30
KW_assert	assert	12:11
(	(	12:13
IDENT	r	12:14
KW_is	is	12:17
KW_real	real	12:22
)	)	12:23
==	==	12:26
KW_true	true	12:31
KW_assert	assert	13:11
(	(	13:13
IDENT	s	13:14
KW_is	is	13:17
KW_string	string	13:24
)	)	13:25
==	==	13:28
KW_true	true	13:33
KW_assert	assert	14:11
(	(	14:13
IDENT	b	14:14
KW_is	is	14:17
KW_bool	bool	14:22
)	)	14:23
==	==	14:26
KW_true	true	14:31
KW_assert	assert	15:11
(	(	15:13
IDENT	n	15:14
KW_is	is	15:17
KW_none	none	15:22
)	)	15:23
==	==	15:26
KW_true	true	15:31
KW_assert	assert	18:11
(	(	18:13
IDENT	i	18:14
KW_is	is	18:17
KW_real	real	18:22
)	)	18:23
==	==	18:26
KW_false	false	18:32
KW_assert	assert	19:11
(	(	19:13
IDENT	r	19:14
KW_is	is	19:17
KW_int	int	19:21
)	)	19:22
==	==	19:25
KW_false	false	19:31
KW_assert	assert	20:11
(	(	20:13
IDENT	s	20:14
KW_is	is	20:17
KW_bool	bool	20:22
)	)	20:23
==	==	20:26
KW_false	false	20:32
KW_assert	assert	21:11
(	(	21:13
IDENT	b	21:14
KW_is	is	21:17
KW_string	string	21:24
)	)	21:25
==	==	21:28
KW_false	false	21:34
KW_assert	assert	22:11
(	(	22:13
IDENT	n	22:14
KW_is	is	22:17
KW_int	int	22:21
)	)	22:22
==	==	22:25
KW_false	false	22:31
}	}	23:2
KW_test	test	25:5
STRING	Type checking for arrays	25:32
{	{	25:34
KW_var	var	26:8
IDENT	empty_arr	26:18
:=	:=	26:21
[	[	26:23
]	]	26:24
KW_var	var	27:8
IDENT	int_arr	27:16
:=	:=	27:19
[	[	27:21
INT	1	27:22
,	,	27:23
INT	2	27:25
,	,	27:26
INT	3	27:28
]	]	27:29
KW_var	var	28:8
IDENT	mixed_arr	28:18
:=	:=	28:21
[	[	28:23
INT	1	28:24
,	,	28:25
STRING	hello	28:33
,	,	28:34
KW_true	true	28:39
]	]	28:40
KW_assert	assert	30:11
(	(	30:13
IDENT	empty_arr	30:22
KW_is	is	30:25
[	[	30:27
]	]	30:28
)	)	30:29
==	==	30:32
KW_true	true	30:37
KW_assert	assert	31:11
(	(	31:13
IDENT	int_arr	31:20
KW_is	is	31:23
[	[	31:25
]	]	31:26
)	)	31:27
==	==	31:30
KW_true	true	31:35
KW_assert	assert	32:11
(	(	32:13
IDENT	mixed_arr	32:22
KW_is	is	32:25
[	[	32:27
]	]	32:28
)	)	32:29
==	==	32:32
KW_true	true	32:37
KW_assert	assert	35:11
(	(	35:13
IDENT	empty_arr	35:22
KW_is	is	35:25
KW_int	int	35:29
)	)	35:30
==	==	35:33
KW_false	false	35:39
KW_assert	assert	36:11
(	(	36:13
IDENT	int_arr	36:20
KW_is	is	36:23
KW_string	string	36:30
)	)	36:31
==	==	36:34
KW_false	false	36:40
}	}	37:2
KW_test	test	39:5
STRING	Type checking for tuples	39:32
{	{	39:34
KW_var	var	40:8
IDENT	simple_tuple	40:21
:=	:=	40:24
{	{	40:26
IDENT	a	40:27
:=	:=	40:30
INT	1	40:32
,	,	40:33
IDENT	b	40:35
:=	:=	40:38
INT	2	40:40
}	}	40:41
KW_var	var	41:8
IDENT	unnamed_tuple	41:22
:=	:=	41:25
{	{	41:27
INT	10	41:29
,	,	41:30
INT	20	41:33
,	,	41:34
INT	30	41:37
}	}	41:38
KW_assert	assert	43:11
(	(	43:13
IDENT	simple_tuple	43:25
KW_is	is	43:28
{	{	43:30
}	}	43:31
)	)	43:32
==	==	43:35
KW_true	true	43:40
KW_assert	assert	44:11
(	(	44:13
IDENT	unnamed_tuple	44:26
KW_is	is	44:29
{	{	44:31
}	}	44:32
)	)	44:33
==	==	44:36
KW_true	true	44:41
KW_assert	assert	47:11
(	(	47:13
IDENT	simple_tuple	47:25
KW_is	is	47:28
[	[	47:30
]	]	47:31
)	)	47:32
==	==	47:35
KW_false	false	47:41
KW_assert	assert	48:11
(	(	48:13
IDENT	unnamed_tuple	48:26
KW_is	is	48:29
KW_int	int	48:33
)	)	48:34
==	==	48:37
KW_false	false	48:43
}	}	49:2
KW_test	test	51:5
STRING	Type checking for functions	51:35
{	{	51:37
KW_var	var	52:8
IDENT	simple_func	52:20
:=	:=	52:23
KW_func	func	52:28
(	(	52:29
IDENT	x	52:30
)	)	52:31
=>	=>	52:34
IDENT	x	52:36
+	+	52:38
INT	1	52:40
KW_var	var	53:8
IDENT	complex_func	53:21
:=	:=	53:24
KW_func	func	53:29
(	(	53:30
IDENT	a	53:31
,	,	53:32
IDENT	b	53:34
)	)	53:35
KW_is	is	53:38
KW_return	return	53:45
IDENT	a	53:47
*	*	53:49
IDENT	b	53:51
KW_end	end	53:55
KW_assert	assert	55:11
(	(	55:13
IDENT	simple_func	55:24
KW_is	is	55:27
KW_func	func	55:32
)	)	55:33
==	==	55:36
KW_true	true	55:41
KW_assert	assert	56:11
(	(	56:13
IDENT	complex_func	56:25
KW_is	is	56:28
KW_func	func	56:33
)	)	56:34
==	==	56:37
KW_true	true	56:42
KW_assert	assert	59:11
(	(	59:13
IDENT	simple_func	59:24
KW_is	is	59:27
KW_int	int	59:31
)	)	59:32
==	==	59:35
KW_false	false	59:41
KW_assert	assert	60:11
(	(	60:13
IDENT	complex_func	60:25
KW_is	is	60:28
[	[	60:30
]	]	60:31
)	)	60:32
==	==	60:35
KW_false	false	60:41
}	}	61:2
KW_test	test	63:5
STRING	Type checking in expressions	63:36
{	{	63:38
KW_var	var	64:8
IDENT	x	64:10
:=	:=	64:13
INT	5	64:15
KW_var	var	65:8
IDENT	result	65:15
:=	:=	65:18
IDENT	x	65:20
KW_is	is	65:23
KW_int	int	65:27
KW_and	and	65:31
IDENT	x	65:33
>	>	65:35
INT	0	65:37
KW_assert	assert	66:11
IDENT	result	66:18
==	==	66:21
KW_true	true	66:26
KW_var	var	68:8
IDENT	y	68:10
:=	:=	68:13
STRING	test	68:20
IDENT	result	69:11
:=	:=	69:14
IDENT	y	69:16
KW_is	is	69:19
KW_string	string	69:26
KW_or	or	69:29
IDENT	y	69:31
KW_is	is	69:34
KW_int	int	69:38
KW_assert	assert	70:11
IDENT	result	70:18
==	==	70:21
KW_true	true	70:26
}	}	71:2
KW_test	test	73:5
STRING	Type checking with none values	73:38
{	{	73:40
KW_var	var	74:8
IDENT	uninitialized	74:22
KW_assert	assert	75:11
(	(	75:13
IDENT	uninitialized	75:26
KW_is	is	75:29
KW_none	none	75:34
)	)	75:35
==	==	75:38
KW_true	true	75:43
KW_var	var	78:8
IDENT	x	78:10
:=	:=	78:13
KW_none	none	78:18
KW_assert	assert	79:11
(	(	79:13
IDENT	x	79:14
KW_is	is	79:17
KW_none	none	79:22
)	)	79:23
==	==	79:26
KW_true	true	79:31
}	}	80:2
KW_test	test	82:5
STRING	Type checking after reassignment	82:40
{	{	82:42
KW_var	var	83:8
IDENT	value	83:14
:=	:=	83:17
INT	42	83:20
KW_assert	assert	84:11
(	(	84:13
IDENT	value	84:18
KW_is	is	84:21
KW_int	int	84:25
)	)	84:26
==	==	84:29
KW_true	true	84:34
IDENT	value	86:10
:=	:=	86:13
REAL	3.14	86:18
KW_assert	assert	87:11
(	(	87:13
IDENT	value	87:18
KW_is	is	87:21
KW_real	real	87:26
)	)	87:27
==	==	87:30
KW_true	true	87:35
KW_assert	assert	88:11
(	(	88:13
IDENT	value	88:18
KW_is	is	88:21
KW_int	int	88:25
)	)	88:26
==	==	88:29
KW_false	false	88:35
IDENT	value	90:10
:=	:=	90:13
STRING	changed	90:23
KW_assert	assert	91:11
(	(	91:13
IDENT	value	91:18
KW_is	is	91:21
KW_string	string	91:28
)	)	91:29
==	==	91:32
KW_true	true	91:37
KW_assert	assert	92:11
(	(	92:13
IDENT	value	92:18
KW_is	is	92:21
KW_real	real	92:26
)	)	92:27
==	==	92:30
KW_false	false	92:36
}	}	93:2
KW_test	test	95:5
STRING	Type checking in function parameters	95:44
{	{	95:46
KW_var	var	96:8
IDENT	check_type	96:19
:=	:=	96:22
KW_func	func	96:27
(	(	96:28
IDENT	val	96:31
)	)	96:32
=>	=>	96:35
KW_if	if	97:11
IDENT	val	97:15
KW_is	is	97:18
KW_int	int	97:22
KW_then	then	97:27
KW_return	return	98:19
STRING	integer	98:29
KW_else	else	99:13
KW_if	if	99:16
IDENT	val	99:20
KW_is	is	99:23
KW_real	real	99:28
KW_then	then	99:33
KW_return	return	100:19
STRING	real	100:26
KW_else	else	101:13
KW_if	if	101:16
IDENT	val	101:20
KW_is	is	101:23
KW_string	string	101:30
KW_then	then	101:35
KW_return	return	102:19
STRING	string	102:28
KW_else	else	103:13
KW_return	return	104:19
STRING	other	104:27
KW_end	end	105:12
KW_assert	assert	107:11
IDENT	check_type	107:22
(	(	107:23
INT	42	107:25
)	)	107:26
==	==	107:29
STRING	integer	107:39
KW_assert	assert	108:11
IDENT	check_type	108:22
(	(	108:23
REAL	3.14	108:27
)	)	108:28
==	==	108:31
STRING	real	108:38
KW_assert	assert	109:11
IDENT	check_type	109:22
(	(	109:23
STRING	hello	109:30
)	)	109:31
==	==	109:34
STRING	string	109:43
KW_assert	assert	110:11
IDENT	check_type	110:22
(	(	110:23
KW_true	true	110:27
)	)	110:28
==	==	110:31
STRING	other	110:39
}	}	111:2
KW_test	test	113:5
STRING	Type checking complex expressions	113:41
{	{	113:43
KW_var	var	114:8
IDENT	data	114:13
:=	:=	114:16
[	[	114:18
INT	1	114:19
,	,	114:20
REAL	2.5	114:24
,	,	114:25
STRING	test	114:32
,	,	114:33
KW_true	true	114:38
]	]	114:39
KW_var	var	115:8
IDENT	result	115:15
:=	:=	115:18
IDENT	data	115:23
[	[	115:24
INT	1	115:25
]	]	115:26
KW_is	is	115:29
KW_int	int	115:33
KW_and	and	115:37
IDENT	data	115:42
[	[	115:43
INT	2	115:44
]	]	115:45
KW_is	is	115:48
KW_real	real	115:53
KW_and	and	115:57
IDENT	data	115:62
[	[	115:63
INT	3	115:64
]	]	115:65
KW_is	is	115:68
KW_string	string	115:75
KW_assert	assert	116:11
IDENT	result	116:18
==	==	116:21
KW_true	true	116:26
}	}	117:2
KW_test	test	119:5
STRING	Type checking nested structures	119:39
{	{	119:41
KW_var	var	120:8
IDENT	nested	120:15
:=	:=	120:18
{	{	120:20
IDENT	numbers	121:16
:=	:=	121:19
[	[	121:21
INT	1	121:22
,	,	121:23
INT	2	121:25
,	,	121:26
INT	3	121:28
]	]	121:29
,	,	121:30
IDENT	info	122:13
:=	:=	122:16
{	{	122:18
IDENT	name	122:22
:=	:=	122:25
STRING	test	122:32
,	,	122:33
IDENT	active	122:40
:=	:=	122:43
KW_true	true	122:48
}	}	122:49
}	}	123:6
KW_assert	assert	125:11
(	(	125:13
IDENT	nested	125:19
KW_is	is	125:22
{	{	125:24
}	}	125:25
)	)	125:26
==	==	125:29
KW_true	true	125:34
KW_assert	assert	126:11
(	(	126:13
IDENT	nested	126:19
.	.	126:20
IDENT	numbers	126:27
KW_is	is	126:30
[	[	126:32
]	]	126:33
)	)	126:34
==	==	126:37
KW_true	true	126:42
KW_assert	assert	127:11
(	(	127:13
IDENT	nested	127:19
.	.	127:20
IDENT	info	127:24
KW_is	is	127:27
{	{	127:29
}	}	127:30
)	)	127:31
==	==	127:34
KW_true	true	127:39
KW_assert	assert	128:11
(	(	128:13
IDENT	nested	128:19
.	.	128:20
IDENT	numbers	128:27
[	[	128:28
INT	1	128:29
]	]	128:30
KW_is	is	128:33
KW_int	int	128:37
)	)	128:38
==	==	128:41
KW_true	true	128:46
KW_assert	assert	129:11
(	(	129:13
IDENT	nested	129:19
.	.	129:20
IDENT	info	129:24
.	.	129:25
IDENT	name	129:29
KW_is	is	129:32
KW_string	string	129:39
)	)	129:40
==	==	129:43
KW_true	true	129:48
KW_assert	assert	130:11
(	(	130:13
IDENT	nested	130:19
.	.	130:20
IDENT	info	130:24
.	.	130:25
IDENT	active	130:31
KW_is	is	130:34
KW_bool	bool	130:39
)	)	130:40
==	==	130:43
KW_true	true	130:48
}	}	131:2
EOF		132:1
KW_test	test	4:5
STRING	Integer to real conversion in arithmetic	4:48
{	{	4:50
KW_var	var	5:8
IDENT	i	5:10
:=	:=	5:13
INT	5	5:15
KW_var	var	6:8
IDENT	r	6:10
:=	:=	6:13
REAL	2.5	6:17
KW_var	var	7:8
IDENT	result1	7:16
:=	:=	7:19
IDENT	i	7:21
+	+	7:23
IDENT	r	7:25
KW_var	var	8:8
IDENT	result2	8:16
:=	:=	8:19
IDENT	r	8:21
+	+	8:23
IDENT	i	8:25
KW_assert	assert	10:11
IDENT	result1	10:19
==	==	10:22
REAL	7.5	10:26
KW_assert	assert	11:11
IDENT	result2	11:19
==	==	11:22
REAL	7.5	11:26
KW_assert	assert	12:11
(	(	12:13
IDENT	result1	12:20
KW_is	is	12:23
KW_real	real	12:28
)	)	12:29
==	==	12:32
KW_true	true	12:37
KW_assert	assert	13:11
(	(	13:13
IDENT	result2	13:20
KW_is	is	13:23
KW_real	real	13:28
)	)	13:29
==	==	13:32
KW_true	true	13:37
}	}	14:2
KW_test	test	16:5
STRING	Integer division results	16:32
{	{	16:34
KW_var	var	17:8
IDENT	result1	17:16
:=	:=	17:19
INT	10	17:22
/	/	17:24
INT	3	17:26
KW_var	var	18:8
IDENT	result2	18:16
:=	:=	18:19
REAL	10.0	18:24
/	/	18:26
INT	3	18:28
KW_var	var	19:8
IDENT	result3	19:16
:=	:=	19:19
INT	10	19:22
/	/	19:24
REAL	3.0	19:28
KW_assert	assert	21:11
IDENT	result1	21:19
==	==	21:22
INT	3	21:24
KW_assert	assert	22:11
IDENT	result2	22:19
==	==	22:22
REAL	3.3333333333333335	22:41
KW_assert	assert	23:11
IDENT	result3	23:19
==	==	23:22
REAL	3.3333333333333335	23:41
KW_assert	assert	25:11
(	(	25:13
IDENT	result1	25:20
KW_is	is	25:23
KW_int	int	25:27
)	)	25:28
==	==	25:31
KW_true	true	25:36
KW_assert	assert	26:11
(	(	26:13
IDENT	result2	26:20
KW_is	is	26:23
KW_real	real	26:28
)	)	26:29
==	==	26:32
KW_true	true	26:37
KW_assert	assert	27:11
(	(	27:13
IDENT	result3	27:20
KW_is	is	27:23
KW_real	real	27:28
)	)	27:29
==	==	27:32
KW_true	true	27:37
}	}	28:2
KW_test	test	30:5
STRING	String concatenation with different types	30:49
{	{	30:51
KW_var	var	31:8
IDENT	s	31:10
:=	:=	31:13
STRING	value: 	31:23
KW_var	var	32:8
IDENT	i	32:10
:=	:=	32:13
INT	42	32:16
KW_var	var	33:8
IDENT	r	33:10
:=	:=	33:13
REAL	3.14	33:18
KW_var	var	34:8
IDENT	b	34:10
:=	:=	34:13
KW_true	true	34:18
KW_var	var	36:8
IDENT	result1	36:16
:=	:=	36:19
IDENT	s	36:21
+	+	36:23
IDENT	i	36:25
KW_var	var	37:8
IDENT	result2	37:16
:=	:=	37:19
IDENT	s	37:21
+	+	37:23
IDENT	r	37:25
KW_var	var	38:8
IDENT	result3	38:16
:=	:=	38:19
IDENT	s	38:21
+	+	38:23
IDENT	b	38:25
KW_assert	assert	40:11
IDENT	result1	40:19
==	==	40:22
STRING	value: 42	40:34
KW_assert	assert	41:11
IDENT	result2	41:19
==	==	41:22
STRING	value: 3.14	41:36
KW_assert	assert	42:11
IDENT	result3	42:19
==	==	42:22
STRING	value: true	42:36
KW_assert	assert	44:11
(	(	44:13
IDENT	result1	44:20
KW_is	is	44:23
KW_string	string	44:30
)	)	44:31
==	==	44:34
KW_true	true	44:39
KW_assert	assert	45:11
(	(	45:13
IDENT	result2	45:20
KW_is	is	45:23
KW_string	string	45:30
)	)	45:31
==	==	45:34
KW_true	true	45:39
KW_assert	assert	46:11
(	(	46:13
IDENT	result3	46:20
KW_is	is	46:23
KW_string	string	46:30
)	)	46:31
==	==	46:34
KW_true	true	46:39
}	}	47:2
KW_test	test	49:5
STRING	Array concatenation preserves types	49:43
{	{	49:45
KW_var	var	50:8
IDENT	arr1	50:13
:=	:=	50:16
[	[	50:18
INT	1	50:19
,	,	50:20
INT	2	50:22
,	,	50:23
INT	3	50:25
]	]	50:26
KW_var	var	51:8
IDENT	arr2	51:13
:=	:=	51:16
[	[	51:18
REAL	4.0	51:21
,	,	51:22
REAL	5.0	51:26
]	]	51:27
KW_var	var	52:8
IDENT	result	52:15
:=	:=	52:18
IDENT	arr1	52:23
+	+	52:25
IDENT	arr2	52:30
KW_assert	assert	54:11
IDENT	result	54:18
[	[	54:19
INT	1	54:20
]	]	54:21
==	==	54:24
INT	1	54:26
KW_assert	assert	55:11
IDENT	result	55:18
[	[	55:19
INT	2	55:20
]	]	55:21
==	==	55:24
INT	2	55:26
KW_assert	assert	56:11
IDENT	result	56:18
[	[	56:19
INT	3	56:20
]	]	56:21
==	==	56:24
INT	3	56:26
KW_assert	assert	57:11
IDENT	result	57:18
[	[	57:19
INT	4	57:20
]	]	57:21
==	==	57:24
REAL	4.0	57:28
KW_assert	assert	58:11
IDENT	result	58:18
[	[	58:19
INT	5	58:20
]	]	58:21
==	==	58:24
REAL	5.0	58:28
KW_assert	assert	60:11
(	(	60:13
IDENT	result	60:19
[	[	60:20
INT	1	60:21
]	]	60:22
KW_is	is	60:25
KW_int	int	60:29
)	)	60:30
==	==	60:33
KW_true	true	60:38
KW_assert	assert	61:11
(	(	61:13
IDENT	result	61:19
[	[	61:20
INT	4	61:21
]	]	61:22
KW_is	is	61:25
KW_real	real	61:30
)	)	61:31
==	==	61:34
KW_true	true	61:39
}	}	62:2
KW_test	test	64:5
STRING	Tuple concatenation preserves types	64:43
{	{	64:45
KW_var	var	65:8
IDENT	t1	65:11
:=	:=	65:14
{	{	65:16
IDENT	a	65:17
:=	:=	65:20
INT	1	65:22
,	,	65:23
IDENT	b	65:25
:=	:=	65:28
INT	2	65:30
}	}	65:31
KW_var	var	66:8
IDENT	t2	66:11
:=	:=	66:14
{	{	66:16
IDENT	c	66:17
:=	:=	66:20
REAL	3.14	66:25
,	,	66:26
IDENT	d	66:28
:=	:=	66:31
STRING	test	66:38
}	}	66:39
KW_var	var	67:8
IDENT	result	67:15
:=	:=	67:18
IDENT	t1	67:21
+	+	67:23
IDENT	t2	67:26
KW_assert	assert	69:11
IDENT	result	69:18
.	.	69:19
IDENT	a	69:20
==	==	69:23
INT	1	69:25
KW_assert	assert	70:11
IDENT	result	70:18
.	.	70:19
IDENT	b	70:20
==	==	70:23
INT	2	70:25
KW_assert	assert	71:11
IDENT	result	71:18
.	.	71:19
IDENT	c	71:20
==	==	71:23
REAL	3.14	71:28
KW_assert	assert	72:11
IDENT	result	72:18
.	.	72:19
IDENT	d	72:20
==	==	72:23
STRING	test	72:30
KW_assert	assert	74:11
(	(	74:13
IDENT	result	74:19
.	.	74:20
IDENT	a	74:21
KW_is	is	74:24
KW_int	int	74:28
)	)	74:29
==	==	74:32
KW_true	true	74:37
KW_assert	assert	75:11
(	(	75:13
IDENT	result	75:19
.	.	75:20
IDENT	c	75:21
KW_is	is	75:24
KW_real	real	75:29
)	)	75:30
==	==	75:33
KW_true	true	75:38
KW_assert	assert	76:11
(	(	76:13
IDENT	result	76:19
.	.	76:20
IDENT	d	76:21
KW_is	is	76:24
KW_string	string	76:31
)	)	76:32
==	==	76:35
KW_true	true	76:40
}	}	77:2
KW_test	test	79:5
STRING	Comparison operations with mixed types	79:46
{	{	79:48
KW_assert	assert	81:11
(	(	81:13
INT	5	81:14
<	<	81:16
REAL	5.5	81:20
)	)	81:21
==	==	81:24
KW_true	true	81:29
KW_assert	assert	82:11
(	(	82:13
REAL	5.5	82:16
>	>	82:18
INT	5	82:20
)	)	82:21
==	==	82:24
KW_true	true	82:29
KW_assert	assert	83:11
(	(	83:13
INT	5	83:14
=	=	83:16
REAL	5.0	83:20
)	)	83:21
==	==	83:24
KW_true	true	83:29
KW_var	var	87:8
IDENT	result	87:15
:=	:=	87:18
INT	5	87:20
<	<	87:22
REAL	5.5	87:26
KW_and	and	87:30
REAL	5.5	87:34
>	>	87:36
INT	5	87:38
KW_assert	assert	88:11
IDENT	result	88:18
==	==	88:21
KW_true	true	88:26
}	}	89:2
KW_test	test	91:5
STRING	Function calls with type conversion	91:43
{	{	91:45
KW_var	var	92:8
IDENT	identity	92:17
:=	:=	92:20
KW_func	func	92:25
(	(	92:26
IDENT	x	92:27
)	)	92:28
=>	=>	92:31
IDENT	x	92:33
KW_var	var	94:8
IDENT	result1	94:16
:=	:=	94:19
IDENT	identity	94:28
(	(	94:29
INT	42	94:31
)	)	94:32
KW_var	var	95:8
IDENT	result2	95:16
:=	:=	95:19
IDENT	identity	95:28
(	(	95:29
REAL	3.14	95:33
)	)	95:34
KW_var	var	96:8
IDENT	result3	96:16
:=	:=	96:19
IDENT	identity	96:28
(	(	96:29
STRING	test	96:35
)	)	96:36
KW_assert	assert	98:11
IDENT	result1	98:19
==	==	98:22
INT	42	98:25
KW_assert	assert	99:11
IDENT	result2	99:19
==	==	99:22
REAL	3.14	99:27
KW_assert	assert	100:11
IDENT	result3	100:19
==	==	100:22
STRING	test	100:29
KW_assert	assert	102:11
(	(	102:13
IDENT	result1	102:20
KW_is	is	102:23
KW_int	int	102:27
)	)	102:28
==	==	102:31
KW_true	true	102:36
KW_assert	assert	103:11
(	(	103:13
IDENT	result2	103:20
KW_is	is	103:23
KW_real	real	103:28
)	)	103:29
==	==	103:32
KW_true	true	103:37
KW_assert	assert	104:11
(	(	104:13
IDENT	result3	104:20
KW_is	is	104:23
KW_string	string	104:30
)	)	104:31
==	==	104:34
KW_true	true	104:39
}	}	105:2
KW_test	test	107:5
STRING	Arithmetic operations preserve precision	107:48
{	{	107:50
KW_var	var	108:8
IDENT	result1	108:16
:=	:=	108:19
INT	5	108:21
+	+	108:23
INT	0	108:25
KW_var	var	109:8
IDENT	result2	109:16
:=	:=	109:19
INT	5	109:21
+	+	109:23
REAL	0.0	109:27
KW_var	var	110:8
IDENT	result3	110:16
:=	:=	110:19
REAL	5.0	110:23
+	+	110:25
INT	0	110:27
KW_var	var	111:8
IDENT	result4	111:16
:=	:=	111:19
REAL	5.0	111:23
+	+	111:25
REAL	0.0	111:29
KW_assert	assert	113:11
IDENT	result1	113:19
==	==	113:22
INT	5	113:24
KW_assert	assert	114:11
IDENT	result2	114:19
==	==	114:22
REAL	5.0	114:26
KW_assert	assert	115:11
IDENT	result3	115:19
==	==	115:22
REAL	5.0	115:26
KW_assert	assert	116:11
IDENT	result4	116:19
==	==	116:22
REAL	5.0	116:26
KW_assert	assert	118:11
(	(	118:13
IDENT	result1	118:20
KW_is	is	118:23
KW_int	int	118:27
)	)	118:28
==	==	118:31
KW_true	true	118:36
KW_assert	assert	119:11
(	(	119:13
IDENT	result2	119:20
KW_is	is	119:23
KW_real	real	119:28
)	)	119:29
==	==	119:32
KW_true	true	119:37
KW_assert	assert	120:11
(	(	120:13
IDENT	result3	120:20
KW_is	is	120:23
KW_real	real	120:28
)	)	120:29
==	==	120:32
KW_true	true	120:37
KW_assert	assert	121:11
(	(	121:13
IDENT	result4	121:20
KW_is	is	121:23
KW_real	real	121:28
)	)	121:29
==	==	121:32
KW_true	true	121:37
}	}	122:2
KW_test	test	124:5
STRING	Complex expressions with conversions	124:44
{	{	124:46
KW_var	var	125:8
IDENT	x	125:10
:=	:=	125:13
INT	5	125:15
KW_var	var	126:8
IDENT	y	126:10
:=	:=	126:13
REAL	2.0	126:17
KW_var	var	127:8
IDENT	result	127:15
:=	:=	127:18
(	(	127:20
IDENT	x	127:21
+	+	127:23
IDENT	y	127:25
)	)	127:26
*	*	127:28
INT	2	127:30
/	/	127:32
INT	3	127:34
KW_assert	assert	130:11
(	(	130:13
IDENT	result	130:19
KW_is	is	130:22
KW_real	real	130:27
)	)	130:28
==	==	130:31
KW_true	true	130:36
}	}	131:2
KW_test	test	133:5
STRING	Type conversion in assignments	133:38
{	{	133:40
KW_var	var	134:8
IDENT	value	134:14
IDENT	value	135:10
:=	:=	135:13
INT	42	135:16
KW_assert	assert	136:11
(	(	136:13
IDENT	value	136:18
KW_is	is	136:21
KW_int	int	136:25
)	)	136:26
==	==	136:29
KW_true	true	136:34
IDENT	value	138:10
:=	:=	138:13
REAL	3.14	138:18
KW_assert	assert	139:11
(	(	139:13
IDENT	value	139:18
KW_is	is	139:21
KW_real	real	139:26
)	)	139:27
==	==	139:30
KW_true	true	139:35
IDENT	value	141:10
:=	:=	141:13
STRING	test	141:20
KW_assert	assert	142:11
(	(	142:13
IDENT	value	142:18
KW_is	is	142:21
KW_string	string	142:28
)	)	142:29
==	==	142:32
KW_true	true	142:37
}	}	143:2
KW_test	test	145:5
STRING	Conversion in function return values	145:44
{	{	145:46
KW_var	var	146:8
IDENT	make_real	146:18
:=	:=	146:21
KW_func	func	146:26
(	(	146:27
IDENT	x	146:28
)	)	146:29
=>	=>	146:32
IDENT	x	146:34
+	+	146:36
REAL	0.0	146:40
KW_var	var	147:8
IDENT	make_int	147:17
:=	:=	147:20
KW_func	func	147:25
(	(	147:26
IDENT	x	147:27
)	)	147:28
=>	=>	147:31
IDENT	x	147:33
/	/	147:35
INT	1	147:37
KW_var	var	149:8
IDENT	result1	149:16
:=	:=	149:19
IDENT	make_real	149:29
(	(	149:30
INT	5	149:31
)	)	149:32
KW_var	var	150:8
IDENT	result2	150:16
:=	:=	150:19
IDENT	make_int	150:28
(	(	150:29
INT	10	150:31
)	)	150:32
KW_assert	assert	152:11
IDENT	result1	152:19
==	==	152:22
REAL	5.0	152:26
KW_assert	assert	153:11
IDENT	result2	153:19
==	==	153:22
INT	10	153:25
KW_assert	assert	155:11
(	(	155:13
IDENT	result1	155:20
KW_is	is	155:23
KW_real	real	155:28
)	)	155:29
==	==	155:32
KW_true	true	155:37
KW_assert	assert	156:11
(	(	156:13
IDENT	result2	156:20
KW_is	is	156:23
KW_int	int	156:27
)	)	156:28
==	==	156:31
KW_true	true	156:36
}	}	157:2
EOF		158:1
KW_test	test	4:5
STRING	Integer comparisons	4:27
{	{	4:29
KW_assert	assert	5:11
INT	5	5:13
<	<	5:15
INT	10	5:18
==	==	5:21
KW_true	true	5:26
KW_assert	assert	6:11
INT	10	6:14
>	>	6:16
INT	5	6:18
==	==	6:21
KW_true	true	6:26
KW_assert	assert	7:11
INT	5	7:13
<=	<=	7:16
INT	5	7:18
==	==	7:21
KW_true	true	7:26
KW_assert	assert	8:11
INT	5	8:13
>=	>=	8:16
INT	5	8:18
==	==	8:21
KW_true	true	8:26
KW_assert	assert	9:11
INT	5	9:13
=	=	9:15
INT	5	9:17
==	==	9:20
KW_true	true	9:25
KW_assert	assert	10:11
INT	5	10:13
/=	/=	10:16
INT	6	10:18
==	==	10:21
KW_true	true	10:26
}	}	11:2
KW_test	test	13:5
STRING	Real comparisons	13:24
{	{	13:26
KW_assert	assert	14:11
REAL	3.14	14:16
<	<	14:18
REAL	6.28	14:23
==	==	14:26
KW_true	true	14:31
KW_assert	assert	15:11
REAL	6.28	15:16
>	>	15:18
REAL	3.14	15:23
==	==	15:26
KW_true	true	15:31
KW_assert	assert	16:11
REAL	3.14	16:16
<=	<=	16:19
REAL	3.14	16:24
==	==	16:27
KW_true	true	16:32
KW_assert	assert	17:11
REAL	3.14	17:16
>=	>=	17:19
REAL	3.14	17:24
==	==	17:27
KW_true	true	17:32
KW_assert	assert	18:11
REAL	3.14	18:16
=	=	18:18
REAL	3.14	18:23
==	==	18:26
KW_true	true	18:31
KW_assert	assert	19:11
REAL	3.14	19:16
/=	/=	19:19
REAL	6.28	19:24
==	==	19:27
KW_true	true	19:32
}	}	20:2
KW_test	test	22:5
STRING	Mixed integer and real comparisons	22:42
{	{	22:44
KW_assert	assert	23:11
INT	5	23:13
<	<	23:15
REAL	5.5	23:19
==	==	23:22
KW_true	true	23:27
KW_assert	assert	24:11
REAL	5.5	24:15
>	>	24:17
INT	5	24:19
==	==	24:22
KW_true	true	24:27
KW_assert	assert	25:11
INT	5	25:13
<=	<=	25:16
REAL	5.0	25:20
==	==	25:23
KW_true	true	25:28
KW_assert	assert	26:11
REAL	5.0	26:15
>=	>=	26:18
INT	5	26:20
==	==	26:23
KW_true	true	26:28
KW_assert	assert	27:11
INT	5	27:13
=	=	27:15
REAL	5.0	27:19
==	==	27:22
KW_true	true	27:27
KW_assert	assert	28:11
INT	5	28:13
/=	/=	28:16
REAL	5.5	28:20
==	==	28:23
KW_true	true	28:28
}	}	29:2
KW_test	test	31:5
STRING	Boolean comparisons	31:27
{	{	31:29
KW_assert	assert	32:11
KW_true	true	32:16
=	=	32:18
KW_true	true	32:23
==	==	32:26
KW_true	true	32:31
KW_assert	assert	33:11
KW_false	false	33:17
=	=	33:19
KW_false	false	33:25
==	==	33:28
KW_true	true	33:33
KW_assert	assert	34:11
KW_true	true	34:16
/=	/=	34:19
KW_false	false	34:25
==	==	34:28
KW_true	true	34:33
KW_assert	assert	35:11
KW_false	false	35:17
/=	/=	35:20
KW_true	true	35:25
==	==	35:28
KW_true	true	35:33
}	}	36:2
KW_test	test	38:5
STRING	String comparisons	38:26
{	{	38:28
KW_assert	assert	39:11
STRING	apple	39:19
<	<	39:21
STRING	banana	39:30
==	==	39:33
KW_true	true	39:38
KW_assert	assert	40:11
STRING	banana	40:20
>	>	40:22
STRING	apple	40:30
==	==	40:33
KW_true	true	40:38
KW_assert	assert	41:11
STRING	hello	41:19
=	=	41:21
STRING	hello	41:29
==	==	41:32
KW_true	true	41:37
KW_assert	assert	42:11
STRING	hello	42:19
/=	/=	42:22
STRING	world	42:30
==	==	42:33
KW_true	true	42:38
}	}	43:2
KW_test	test	45:5
STRING	Comparison in expressions	45:33
{	{	45:35
KW_var	var	46:8
IDENT	x	46:10
:=	:=	46:13
INT	10	46:16
,	,	46:17
IDENT	y	46:19
:=	:=	46:22
INT	20	46:25
KW_var	var	47:8
IDENT	result	47:15
:=	:=	47:18
IDENT	x	47:20
<	<	47:22
IDENT	y	47:24
KW_and	and	47:28
IDENT	y	47:30
>	>	47:32
IDENT	x	47:34
KW_assert	assert	48:11
IDENT	result	48:18
==	==	48:21
KW_true	true	48:26
KW_assert	assert	49:11
IDENT	result	49:18
KW_is	is	49:21
KW_bool	bool	49:26
}	}	50:2
KW_test	test	52:5
STRING	Complex comparison expressions	52:38
{	{	52:40
KW_var	var	53:8
IDENT	a	53:10
:=	:=	53:13
INT	5	53:15
,	,	53:16
IDENT	b	53:18
:=	:=	53:21
INT	10	53:24
,	,	53:25
IDENT	c	53:27
:=	:=	53:30
INT	15	53:33
KW_var	var	54:8
IDENT	result1	54:16
:=	:=	54:19
IDENT	a	54:21
<	<	54:23
IDENT	b	54:25
KW_and	and	54:29
IDENT	b	54:31
<	<	54:33
IDENT	c	54:35
KW_var	var	55:8
IDENT	result2	55:16
:=	:=	55:19
IDENT	a	55:21
<=	<=	55:24
IDENT	b	55:26
KW_or	or	55:29
IDENT	b	55:31
>	>	55:33
IDENT	c	55:35
KW_var	var	56:8
IDENT	result3	56:16
:=	:=	56:19
KW_not	not	56:23
(	(	56:25
IDENT	a	56:26
=	=	56:28
IDENT	b	56:30
)	)	56:31
KW_assert	assert	58:11
IDENT	result1	58:19
==	==	58:22
KW_true	true	58:27
KW_assert	assert	59:11
IDENT	result2	59:19
==	==	59:22
KW_true	true	59:27
KW_assert	assert	60:11
IDENT	result3	60:19
==	==	60:22
KW_true	true	60:27
}	}	61:2
KW_test	test	63:5
STRING	Comparison with zero and negative numbers	63:49
{	{	63:51
KW_assert	assert	64:11
INT	0	64:13
<	<	64:15
INT	1	64:17
==	==	64:20
KW_true	true	64:25
KW_assert	assert	65:11
-	-	65:13
INT	1	65:14
<	<	65:16
INT	0	65:18
==	==	65:21
KW_true	true	65:26
KW_assert	assert	66:11
-	-	66:13
INT	5	66:14
>	>	66:16
-	-	66:18
INT	10	66:20
==	==	66:23
KW_true	true	66:28
KW_assert	assert	67:11
REAL	0.0	67:15
=	=	67:17
INT	0	67:19
==	==	67:22
KW_true	true	67:27
KW_assert	assert	68:11
-	-	68:13
REAL	3.14	68:17
<	<	68:19
REAL	0.0	68:23
==	==	68:26
KW_true	true	68:31
}	}	69:2
EOF		70:1
KW_test	test	4:5
STRING	Integer addition	4:24
{	{	4:26
KW_var	var	5:8
IDENT	result	5:15
:=	:=	5:18
INT	5	5:20
+	+	5:22
INT	3	5:24
KW_assert	assert	6:11
IDENT	result	6:18
==	==	6:21
INT	8	6:23
KW_assert	assert	7:11
IDENT	result	7:18
KW_is	is	7:21
KW_int	int	7:25
}	}	8:2
KW_test	test	10:5
STRING	Integer subtraction	10:27
{	{	10:29
KW_var	var	11:8
IDENT	result	11:15
:=	:=	11:18
INT	10	11:21
-	-	11:23
INT	4	11:25
KW_assert	assert	12:11
IDENT	result	12:18
==	==	12:21
INT	6	12:23
KW_assert	assert	13:11
IDENT	result	13:18
KW_is	is	13:21
KW_int	int	13:25
}	}	14:2
KW_test	test	16:5
STRING	Integer multiplication	16:30
{	{	16:32
KW_var	var	17:8
IDENT	result	17:15
:=	:=	17:18
INT	6	17:20
*	*	17:22
INT	7	17:24
KW_assert	assert	18:11
IDENT	result	18:18
==	==	18:21
INT	42	18:24
KW_assert	assert	19:11
IDENT	result	19:18
KW_is	is	19:21
KW_int	int	19:25
}	}	20:2
KW_test	test	22:5
STRING	Integer division	22:24
{	{	22:26
KW_var	var	23:8
IDENT	result	23:15
:=	:=	23:18
INT	15	23:21
/	/	23:23
INT	3	23:25
KW_assert	assert	24:11
IDENT	result	24:18
==	==	24:21
INT	5	24:23
KW_assert	assert	25:11
IDENT	result	25:18
KW_is	is	25:21
KW_int	int	25:25
}	}	26:2
KW_test	test	28:5
STRING	Integer division with rounding down	28:43
{	{	28:45
KW_var	var	29:8
IDENT	result	29:15
:=	:=	29:18
INT	17	29:21
/	/	29:23
INT	4	29:25
KW_assert	assert	30:11
IDENT	result	30:18
==	==	30:21
INT	4	30:23
KW_assert	assert	31:11
IDENT	result	31:18
KW_is	is	31:21
KW_int	int	31:25
}	}	32:2
KW_test	test	34:5
STRING	Mixed integer and real arithmetic	34:41
{	{	34:43
KW_var	var	35:8
IDENT	result1	35:16
:=	:=	35:19
INT	5	35:21
+	+	35:23
REAL	2.5	35:27
KW_var	var	36:8
IDENT	result2	36:16
:=	:=	36:19
REAL	10.0	36:24
-	-	36:26
INT	3	36:28
KW_var	var	37:8
IDENT	result3	37:16
:=	:=	37:19
INT	4	37:21
*	*	37:23
REAL	2.5	37:27
KW_var	var	38:8
IDENT	result4	38:16
:=	:=	38:19
REAL	15.0	38:24
/	/	38:26
INT	2	38:28
KW_assert	assert	40:11
IDENT	result1	40:19
==	==	40:22
REAL	7.5	40:26
KW_assert	assert	41:11
IDENT	result2	41:19
==	==	41:22
REAL	7.0	41:26
KW_assert	assert	42:11
IDENT	result3	42:19
==	==	42:22
REAL	10.0	42:27
KW_assert	assert	43:11
IDENT	result4	43:19
==	==	43:22
REAL	7.5	43:26
KW_assert	assert	45:11
IDENT	result1	45:19
KW_is	is	45:22
KW_real	real	45:27
KW_assert	assert	46:11
IDENT	result2	46:19
KW_is	is	46:22
KW_real	real	46:27
KW_assert	assert	47:11
IDENT	result3	47:19
KW_is	is	47:22
KW_real	real	47:27
KW_assert	assert	48:11
IDENT	result4	48:19
KW_is	is	48:22
KW_real	real	48:27
}	}	49:2
KW_test	test	51:5
STRING	Real arithmetic	51:23
{	{	51:25
KW_var	var	52:8
IDENT	result1	52:16
:=	:=	52:19
REAL	3.14	52:24
+	+	52:26
REAL	2.86	52:31
KW_var	var	53:8
IDENT	result2	53:16
:=	:=	53:19
REAL	5.5	53:23
-	-	53:25
REAL	2.2	53:29
KW_var	var	54:8
IDENT	result3	54:16
:=	:=	54:19
REAL	3.0	54:23
*	*	54:25
REAL	4.0	54:29
KW_var	var	55:8
IDENT	result4	55:16
:=	:=	55:19
REAL	10.0	55:24
/	/	55:26
REAL	2.5	55:30
KW_assert	assert	57:11
IDENT	result1	57:19
==	==	57:22
REAL	6.0	57:26
KW_assert	assert	58:11
IDENT	result2	58:19
==	==	58:22
REAL	3.3	58:26
KW_assert	assert	59:11
IDENT	result3	59:19
==	==	59:22
REAL	12.0	59:27
KW_assert	assert	60:11
IDENT	result4	60:19
==	==	60:22
REAL	4.0	60:26
KW_assert	assert	62:11
IDENT	result1	62:19
KW_is	is	62:22
KW_real	real	62:27
KW_assert	assert	63:11
IDENT	result2	63:19
KW_is	is	63:22
KW_real	real	63:27
KW_assert	assert	64:11
IDENT	result3	64:19
KW_is	is	64:22
KW_real	real	64:27
KW_assert	assert	65:11
IDENT	result4	65:19
KW_is	is	65:22
KW_real	real	65:27
}	}	66:2
KW_test	test	68:5
STRING	Unary plus and minus	68:28
{	{	68:30
KW_var	var	69:8
IDENT	x	69:10
:=	:=	69:13
INT	5	69:15
KW_var	var	70:8
IDENT	result1	70:16
:=	:=	70:19
+	+	70:21
IDENT	x	70:22
KW_var	var	71:8
IDENT	result2	71:16
:=	:=	71:19
-	-	71:21
IDENT	x	71:22
KW_var	var	72:8
IDENT	y	72:10
:=	:=	72:13
REAL	3.14	72:18
KW_var	var	73:8
IDENT	result3	73:16
:=	:=	73:19
+	+	73:21
IDENT	y	73:22
KW_var	var	74:8
IDENT	result4	74:16
:=	:=	74:19
-	-	74:21
IDENT	y	74:22
KW_assert	assert	76:11
IDENT	result1	76:19
==	==	76:22
INT	5	76:24
KW_assert	assert	77:11
IDENT	result2	77:19
==	==	77:22
-	-	77:24
INT	5	77:25
KW_assert	assert	78:11
IDENT	result3	78:19
==	==	78:22
REAL	3.14	78:27
KW_assert	assert	79:11
IDENT	result4	79:19
==	==	79:22
-	-	79:24
REAL	3.14	79:28
KW_assert	assert	81:11
IDENT	result1	81:19
KW_is	is	81:22
KW_int	int	81:26
KW_assert	assert	82:11
IDENT	result2	82:19
KW_is	is	82:22
KW_int	int	82:26
KW_assert	assert	83:11
IDENT	result3	83:19
KW_is	is	83:22
KW_real	real	83:27
KW_assert	assert	84:11
IDENT	result4	84:19
KW_is	is	84:22
KW_real	real	84:27
}	}	85:2
KW_test	test	87:5
STRING	Complex arithmetic expressions	87:38
{	{	87:40
KW_var	var	88:8
IDENT	result	88:15
:=	:=	88:18
(	(	88:20
INT	5	88:21
+	+	88:23
INT	3	88:25
)	)	88:26
*	*	88:28
INT	2	88:30
-	-	88:32
INT	8	88:34
/	/	88:36
INT	2	88:38
KW_assert	assert	89:11
IDENT	result	89:18
==	==	89:21
INT	12	89:24
KW_assert	assert	90:11
IDENT	result	90:18
KW_is	is	90:21
KW_int	int	90:25
}	}	91:2
KW_test	test	93:5
STRING	String concatenation	93:28
{	{	93:30
KW_var	var	94:8
IDENT	result1	94:16
:=	:=	94:19
STRING	hello	94:27
+	+	94:29
STRING	 	94:33
+	+	94:35
STRING	world	94:43
KW_var	var	95:8
IDENT	result2	95:16
:=	:=	95:19
STRING	test	95:26
+	+	95:28
STRING	123	95:34
KW_var	var	96:8
IDENT	result3	96:16
:=	:=	96:19
STRING		96:22
+	+	96:24
STRING	empty	96:32
KW_assert	assert	98:11
IDENT	result1	98:19
==	==	98:22
STRING	hello world	98:36
KW_assert	assert	99:11
IDENT	result2	99:19
==	==	99:22
STRING	test123	99:32
KW_assert	assert	100:11
IDENT	result3	100:19
==	==	100:22
STRING	empty	100:30
KW_assert	assert	102:11
IDENT	result1	102:19
KW_is	is	102:22
KW_string	string	102:29
KW_assert	assert	103:11
IDENT	result2	103:19
KW_is	is	103:22
KW_string	string	103:29
KW_assert	assert	104:11
IDENT	result3	104:19
KW_is	is	104:22
KW_string	string	104:29
}	}	105:2
EOF		106:1
KW_test	test	4:5
STRING	Logical AND operation	4:29
{	{	4:31
KW_assert	assert	5:11
(	(	5:13
KW_true	true	5:17
KW_and	and	5:21
KW_true	true	5:26
)	)	5:27
==	==	5:30
KW_true	true	5:35
KW_assert	assert	6:11
(	(	6:13
KW_true	true	6:17
KW_and	and	6:21
KW_false	false	6:27
)	)	6:28
==	==	6:31
KW_false	false	6:37
KW_assert	assert	7:11
(	(	7:13
KW_false	false	7:18
KW_and	and	7:22
KW_true	true	7:27
)	)	7:28
==	==	7:31
KW_false	false	7:37
KW_assert	assert	8:11
(	(	8:13
KW_false	false	8:18
KW_and	and	8:22
KW_false	false	8:28
)	)	8:29
==	==	8:32
KW_false	false	8:38
}	}	9:2
KW_test	test	11:5
STRING	Logical OR operation	11:28
{	{	11:30
KW_assert	assert	12:11
(	(	12:13
KW_true	true	12:17
KW_or	or	12:20
KW_true	true	12:25
)	)	12:26
==	==	12:29
KW_true	true	12:34
KW_assert	assert	13:11
(	(	13:13
KW_true	true	13:17
KW_or	or	13:20
KW_false	false	13:26
)	)	13:27
==	==	13:30
KW_true	true	13:35
KW_assert	assert	14:11
(	(	14:13
KW_false	false	14:18
KW_or	or	14:21
KW_true	true	14:26
)	)	14:27
==	==	14:30
KW_true	true	14:35
KW_assert	assert	15:11
(	(	15:13
KW_false	false	15:18
KW_or	or	15:21
KW_false	false	15:27
)	)	15:28
==	==	15:31
KW_false	false	15:37
}	}	16:2
KW_test	test	18:5
STRING	Logical XOR operation	18:29
{	{	18:31
KW_assert	assert	19:11
(	(	19:13
KW_true	true	19:17
KW_xor	xor	19:21
KW_true	true	19:26
)	)	19:27
==	==	19:30
KW_false	false	19:36
KW_assert	assert	20:11
(	(	20:13
KW_true	true	20:17
KW_xor	xor	20:21
KW_false	false	20:27
)	)	20:28
==	==	20:31
KW_true	true	20:36
KW_assert	assert	21:11
(	(	21:13
KW_false	false	21:18
KW_xor	xor	21:22
KW_true	true	21:27
)	)	21:28
==	==	21:31
KW_true	true	21:36
KW_assert	assert	22:11
(	(	22:13
KW_false	false	22:18
KW_xor	xor	22:22
KW_false	false	22:28
)	)	22:29
==	==	22:32
KW_false	false	22:38
}	}	23:2
KW_test	test	25:5
STRING	Logical NOT operation	25:29
{	{	25:31
KW_assert	assert	26:11
(	(	26:13
KW_not	not	26:16
KW_true	true	26:21
)	)	26:22
==	==	26:25
KW_false	false	26:31
KW_assert	assert	27:11
(	(	27:13
KW_not	not	27:16
KW_false	false	27:22
)	)	27:23
==	==	27:26
KW_true	true	27:31
}	}	28:2
KW_test	test	30:5
STRING	Complex logical expressions	30:35
{	{	30:37
KW_var	var	31:8
IDENT	a	31:10
:=	:=	31:13
KW_true	true	31:18
,	,	31:19
IDENT	b	31:21
:=	:=	31:24
KW_false	false	31:30
,	,	31:31
IDENT	c	31:33
:=	:=	31:36
KW_true	true	31:41
KW_var	var	32:8
IDENT	result1	32:16
:=	:=	32:19
IDENT	a	32:21
KW_and	and	32:25
IDENT	b	32:27
KW_or	or	32:30
IDENT	c	32:32
KW_var	var	33:8
IDENT	result2	33:16
:=	:=	33:19
IDENT	a	33:21
KW_or	or	33:24
IDENT	b	33:26
KW_and	and	33:30
IDENT	c	33:32
KW_var	var	34:8
IDENT	result3	34:16
:=	:=	34:19
KW_not	not	34:23
(	(	34:25
IDENT	a	34:26
KW_and	and	34:30
IDENT	b	34:32
)	)	34:33
KW_var	var	35:8
IDENT	result4	35:16
:=	:=	35:19
IDENT	a	35:21
KW_xor	xor	35:25
(	(	35:27
IDENT	b	35:28
KW_or	or	35:31
IDENT	c	35:33
)	)	35:34
KW_assert	assert	37:11
IDENT	result1	37:19
==	==	37:22
KW_true	true	37:27
KW_assert	assert	38:11
IDENT	result2	38:19
==	==	38:22
KW_true	true	38:27
KW_assert	assert	39:11
IDENT	result3	39:19
==	==	39:22
KW_true	true	39:27
KW_assert	assert	40:11
IDENT	result4	40:19
==	==	40:22
KW_false	false	40:28
}	}	41:2
KW_test	test	43:5
STRING	Logical operations with comparison results	43:50
{	{	43:52
KW_var	var	44:8
IDENT	x	44:10
:=	:=	44:13
INT	5	44:15
,	,	44:16
IDENT	y	44:18
:=	:=	44:21
INT	10	44:24
,	,	44:25
IDENT	z	44:27
:=	:=	44:30
INT	15	44:33
KW_var	var	45:8
IDENT	result1	45:16
:=	:=	45:19
IDENT	x	45:21
<	<	45:23
IDENT	y	45:25
KW_and	and	45:29
IDENT	y	45:31
<	<	45:33
IDENT	z	45:35
KW_var	var	46:8
IDENT	result2	46:16
:=	:=	46:19
IDENT	x	46:21
>	>	46:23
IDENT	y	46:25
KW_or	or	46:28
IDENT	z	46:30
>	>	46:32
IDENT	y	46:34
KW_var	var	47:8
IDENT	result3	47:16
:=	:=	47:19
KW_not	not	47:23
(	(	47:25
IDENT	x	47:26
=	=	47:28
IDENT	y	47:30
)	)	47:31
KW_assert	assert	49:11
IDENT	result1	49:19
==	==	49:22
KW_true	true	49:27
KW_assert	assert	50:11
IDENT	result2	50:19
==	==	50:22
KW_true	true	50:27
KW_assert	assert	51:11
IDENT	result3	51:19
==	==	51:22
KW_true	true	51:27
}	}	52:2
KW_test	test	54:5
STRING	Short-circuit evaluation	54:32
{	{	54:34
KW_var	var	55:8
IDENT	called	55:15
:=	:=	55:18
KW_false	false	55:24
KW_var	var	56:8
IDENT	result1	56:16
:=	:=	56:19
KW_false	false	56:25
KW_and	and	56:29
(	(	56:31
IDENT	called	56:37
:=	:=	56:40
KW_true	true	56:45
)	)	56:46
KW_assert	assert	57:11
IDENT	called	57:18
==	==	57:21
KW_false	false	57:27
IDENT	called	59:11
:=	:=	59:14
KW_false	false	59:20
KW_var	var	60:8
IDENT	result2	60:16
:=	:=	60:19
KW_true	true	60:24
KW_or	or	60:27
(	(	60:29
IDENT	called	60:35
:=	:=	60:38
KW_true	true	60:43
)	)	60:44
KW_assert	assert	61:11
IDENT	called	61:18
==	==	61:21
KW_false	false	61:27
}	}	62:2
KW_test	test	64:5
STRING	Logical operations precedence	64:37
{	{	64:39
KW_var	var	66:8
IDENT	result1	66:16
:=	:=	66:19
KW_not	not	66:23
KW_false	false	66:29
KW_and	and	66:33
KW_true	true	66:38
KW_var	var	67:8
IDENT	result2	67:16
:=	:=	67:19
KW_true	true	67:24
KW_or	or	67:27
KW_false	false	67:33
KW_and	and	67:37
KW_false	false	67:43
KW_var	var	68:8
IDENT	result3	68:16
:=	:=	68:19
KW_true	true	68:24
KW_xor	xor	68:28
KW_true	true	68:33
KW_and	and	68:37
KW_false	false	68:43
KW_assert	assert	70:11
IDENT	result1	70:19
==	==	70:22
KW_true	true	70:27
KW_assert	assert	71:11
IDENT	result2	71:19
==	==	71:22
KW_true	true	71:27
KW_assert	assert	72:11
IDENT	result3	72:19
==	==	72:22
KW_true	true	72:27
}	}	73:2
EOF		74:1
KW_test	test	4:5
STRING	Arrow function syntax (=>)	4:34
{	{	4:36
KW_var	var	5:8
IDENT	square	5:15
:=	:=	5:18
KW_func	func	5:23
(	(	5:24
IDENT	x	5:25
)	)	5:26
=>	=>	5:29
IDENT	x	5:31
*	*	5:33
IDENT	x	5:35
KW_var	var	6:8
IDENT	result	6:15
:=	:=	6:18
IDENT	square	6:25
(	(	6:26
INT	6	6:27
)	)	6:28
KW_assert	assert	7:11
IDENT	result	7:18
==	==	7:21
INT	36	7:24
}	}	8:2
KW_test	test	10:5
STRING	Arrow function with multiple statements	10:47
{	{	10:49
KW_var	var	11:8
IDENT	process	11:16
:=	:=	11:19
KW_func	func	11:24
(	(	11:25
IDENT	x	11:26
)	)	11:27
=>	=>	11:30
KW_var	var	12:12
IDENT	doubled	12:20
:=	:=	12:23
IDENT	x	12:25
*	*	12:27
INT	2	12:29
KW_return	return	13:15
IDENT	doubled	13:23
+	+	13:25
INT	1	13:27
KW_var	var	15:8
IDENT	result	15:15
:=	:=	15:18
IDENT	process	15:26
(	(	15:27
INT	5	15:28
)	)	15:29
KW_assert	assert	16:11
IDENT	result	16:18
==	==	16:21
INT	11	16:24
}	}	17:2
KW_test	test	19:5
STRING	Function literal in assignment	19:38
{	{	19:40
KW_var	var	20:8
IDENT	f	20:10
IDENT	f	21:6
:=	:=	21:9
KW_func	func	21:14
(	(	21:15
IDENT	x	21:16
)	)	21:17
=>	=>	21:20
IDENT	x	21:22
+	+	21:24
INT	10	21:27
KW_var	var	22:8
IDENT	result	22:15
:=	:=	22:18
IDENT	f	22:20
(	(	22:21
INT	5	22:22
)	)	22:23
KW_assert	assert	23:11
IDENT	result	23:18
==	==	23:21
INT	15	23:24
}	}	24:2
KW_test	test	26:5
STRING	Function literal as array element	26:41
{	{	26:43
KW_var	var	27:8
IDENT	operations	27:19
:=	:=	27:22
[	[	27:24
KW_func	func	28:13
(	(	28:14
IDENT	x	28:15
)	)	28:16
=>	=>	28:19
IDENT	x	28:21
+	+	28:23
INT	1	28:25
,	,	28:26
KW_func	func	29:13
(	(	29:14
IDENT	x	29:15
)	)	29:16
=>	=>	29:19
IDENT	x	29:21
-	-	29:23
INT	1	29:25
,	,	29:26
KW_func	func	30:13
(	(	30:14
IDENT	x	30:15
)	)	30:16
=>	=>	30:19
IDENT	x	30:21
*	*	30:23
INT	2	30:25
]	]	31:6
KW_assert	assert	33:11
IDENT	operations	33:22
[	[	33:23
INT	1	33:24
]	]	33:25
(	(	33:26
INT	10	33:28
)	)	33:29
==	==	33:32
INT	11	33:35
KW_assert	assert	34:11
IDENT	operations	34:22
[	[	34:23
INT	2	34:24
]	]	34:25
(	(	34:26
INT	10	34:28
)	)	34:29
==	==	34:32
INT	9	34:34
KW_assert	assert	35:11
IDENT	operations	35:22
[	[	35:23
INT	3	35:24
]	]	35:25
(	(	35:26
INT	10	35:28
)	)	35:29
==	==	35:32
INT	20	35:35
}	}	36:2
KW_test	test	38:5
STRING	Function literal in tuple	38:33
{	{	38:35
KW_var	var	39:8
IDENT	math_ops	39:17
:=	:=	39:20
{	{	39:22
IDENT	increment	40:18
:=	:=	40:21
KW_func	func	40:26
(	(	40:27
IDENT	x	40:28
)	)	40:29
=>	=>	40:32
IDENT	x	40:34
+	+	40:36
INT	1	40:38
,	,	40:39
IDENT	decrement	41:18
:=	:=	41:21
KW_func	func	41:26
(	(	41:27
IDENT	x	41:28
)	)	41:29
=>	=>	41:32
IDENT	x	41:34
-	-	41:36
INT	1	41:38
,	,	41:39
IDENT	double	42:15
:=	:=	42:18
KW_func	func	42:23
(	(	42:24
IDENT	x	42:25
)	)	42:26
=>	=>	42:29
IDENT	x	42:31
*	*	42:33
INT	2	42:35
}	}	43:6
KW_assert	assert	45:11
IDENT	math_ops	45:20
.	.	45:21
IDENT	increment	45:30
(	(	45:31
INT	5	45:32
)	)	45:33
==	==	45:36
INT	6	45:38
KW_assert	assert	46:11
IDENT	math_ops	46:20
.	.	46:21
IDENT	decrement	46:30
(	(	46:31
INT	5	46:32
)	)	46:33
==	==	46:36
INT	4	46:38
KW_assert	assert	47:11
IDENT	math_ops	47:20
.	.	47:21
IDENT	double	47:27
(	(	47:28
INT	5	47:29
)	)	47:30
==	==	47:33
INT	10	47:36
}	}	48:2
KW_test	test	50:5
STRING	Function literal with no parameters	50:43
{	{	50:45
KW_var	var	51:8
IDENT	get_message	51:20
:=	:=	51:23
KW_func	func	51:28
(	(	51:29
)	)	51:30
=>	=>	51:33
STRING	Hello from function!	51:56
KW_var	var	52:8
IDENT	message	52:16
:=	:=	52:19
IDENT	get_message	52:31
(	(	52:32
)	)	52:33
KW_assert	assert	53:11
IDENT	message	53:19
==	==	53:22
STRING	Hello from function!	53:45
}	}	54:2
KW_test	test	56:5
STRING	Complex arrow function	56:30
{	{	56:32
KW_var	var	57:8
IDENT	calculate	57:18
:=	:=	57:21
KW_func	func	57:26
(	(	57:27
IDENT	a	57:28
,	,	57:29
IDENT	b	57:31
,	,	57:32
IDENT	c	57:34
)	)	57:35
=>	=>	57:38
KW_if	if	58:11
IDENT	a	58:13
>	>	58:15
IDENT	b	58:17
KW_then	then	58:22
KW_return	return	59:19
IDENT	a	59:21
+	+	59:23
IDENT	c	59:25
KW_else	else	60:13
KW_return	return	61:19
IDENT	b	61:21
+	+	61:23
IDENT	c	61:25
KW_end	end	62:12
KW_var	var	64:8
IDENT	result1	64:16
:=	:=	64:19
IDENT	calculate	64:29
(	(	64:30
INT	10	64:32
,	,	64:33
INT	5	64:35
,	,	64:36
INT	3	64:38
)	)	64:39
KW_var	var	65:8
IDENT	result2	65:16
:=	:=	65:19
IDENT	calculate	65:29
(	(	65:30
INT	3	65:31
,	,	65:32
INT	8	65:34
,	,	65:35
INT	2	65:37
)	)	65:38
KW_assert	assert	67:11
IDENT	result1	67:19
==	==	67:22
INT	13	67:25
KW_assert	assert	68:11
IDENT	result2	68:19
==	==	68:22
INT	10	68:25
}	}	69:2
KW_test	test	71:5
STRING	Function literal with array operations	71:46
{	{	71:48
KW_var	var	72:8
IDENT	sum_array	72:18
:=	:=	72:21
KW_func	func	72:26
(	(	72:27
IDENT	arr	72:30
)	)	72:31
=>	=>	72:34
KW_var	var	73:12
IDENT	total	73:18
:=	:=	73:21
INT	0	73:23
KW_for	for	74:12
IDENT	value	74:18
KW_in	in	74:21
IDENT	arr	74:25
KW_loop	loop	74:30
IDENT	total	75:18
:=	:=	75:21
IDENT	total	75:27
+	+	75:29
IDENT	value	75:35
KW_end	end	76:12
KW_return	return	77:15
IDENT	total	77:21
KW_var	var	79:8
IDENT	numbers	79:16
:=	:=	79:19
[	[	79:21
INT	1	79:22
,	,	79:23
INT	2	79:25
,	,	79:26
INT	3	79:28
,	,	79:29
INT	4	79:31
,	,	79:32
INT	5	79:34
]	]	79:35
KW_var	var	80:8
IDENT	result	80:15
:=	:=	80:18
IDENT	sum_array	80:28
(	(	80:29
IDENT	numbers	80:36
)	)	80:37
KW_assert	assert	81:11
IDENT	result	81:18
==	==	81:21
INT	15	81:24
}	}	82:2
KW_test	test	84:5
STRING	Higher-order function with arrow syntax	84:47
{	{	84:49
KW_var	var	85:8
IDENT	apply_twice	85:20
:=	:=	85:23
KW_func	func	85:28
(	(	85:29
IDENT	f	85:30
,	,	85:31
IDENT	x	85:33
)	)	85:34
=>	=>	85:37
KW_return	return	86:15
IDENT	f	86:17
(	(	86:18
IDENT	f	86:19
(	(	86:20
IDENT	x	86:21
)	)	86:22
)	)	86:23
KW_var	var	88:8
IDENT	add_five	88:17
:=	:=	88:20
KW_func	func	88:25
(	(	88:26
IDENT	x	88:27
)	)	88:28
=>	=>	88:31
IDENT	x	88:33
+	+	88:35
INT	5	88:37
KW_var	var	89:8
IDENT	result	89:15
:=	:=	89:18
IDENT	apply_twice	89:30
(	(	89:31
IDENT	add_five	89:39
,	,	89:40
INT	10	89:43
)	)	89:44
KW_assert	assert	90:11
IDENT	result	90:18
==	==	90:21
INT	20	90:24
}	}	91:2
KW_test	test	93:5
STRING	Function literal returning function	93:43
{	{	93:45
KW_var	var	94:8
IDENT	make_multiplier	94:24
:=	:=	94:27
KW_func	func	94:32
(	(	94:33
IDENT	factor	94:39
)	)	94:40
=>	=>	94:43
KW_return	return	95:15
KW_func	func	95:20
(	(	95:21
IDENT	x	95:22
)	)	95:23
=>	=>	95:26
IDENT	x	95:28
*	*	95:30
IDENT	factor	95:37
KW_var	var	97:8
IDENT	double	97:15
:=	:=	97:18
IDENT	make_multiplier	97:34
(	(	97:35
INT	2	97:36
)	)	97:37
KW_var	var	98:8
IDENT	triple	98:15
:=	:=	98:18
IDENT	make_multiplier	98:34
(	(	98:35
INT	3	98:36
)	)	98:37
KW_assert	assert	100:11
IDENT	double	100:18
(	(	100:19
INT	5	100:20
)	)	100:21
==	==	100:24
INT	10	100:27
KW_assert	assert	101:11
IDENT	triple	101:18
(	(	101:19
INT	5	101:20
)	)	101:21
==	==	101:24
INT	15	101:27
}	}	102:2
KW_test	test	104:5
STRING	Recursive arrow function	104:32
{	{	104:34
KW_var	var	105:8
IDENT	fib	105:12
:=	:=	105:15
KW_func	func	105:20
(	(	105:21
IDENT	n	105:22
)	)	105:23
=>	=>	105:26
KW_if	if	106:11
IDENT	n	106:13
<=	<=	106:16
INT	1	106:18
KW_then	then	106:23
KW_return	return	107:19
IDENT	n	107:21
KW_else	else	108:13
KW_return	return	109:19
IDENT	fib	109:23
(	(	109:24
IDENT	n	109:25
-	-	109:27
INT	1	109:29
)	)	109:30
+	+	109:32
IDENT	fib	109:36
(	(	109:37
IDENT	n	109:38
-	-	109:40
INT	2	109:42
)	)	109:43
KW_end	end	110:12
KW_assert	assert	112:11
IDENT	fib	112:15
(	(	112:16
INT	6	112:17
)	)	112:18
==	==	112:21
INT	8	112:23
KW_assert	assert	113:11
IDENT	fib	113:15
(	(	113:16
INT	4	113:17
)	)	113:18
==	==	113:21
INT	3	113:23
}	}	114:2
EOF		115:1
KW_test	test	4:5
STRING	Simple function without parameters	4:42
{	{	4:44
KW_var	var	5:8
IDENT	greet	5:14
:=	:=	5:17
KW_func	func	5:22
(	(	5:23
)	)	5:24
KW_is	is	5:27
KW_return	return	6:15
STRING	Hello, World!	6:31
KW_end	end	7:8
KW_var	var	9:8
IDENT	result	9:15
:=	:=	9:18
IDENT	greet	9:24
(	(	9:25
)	)	9:26
KW_assert	assert	10:11
IDENT	result	10:18
==	==	10:21
STRING	Hello, World!	10:37
}	}	11:2
KW_test	test	13:5
STRING	Function with single parameter	13:38
{	{	13:40
KW_var	var	14:8
IDENT	square	14:15
:=	:=	14:18
KW_func	func	14:23
(	(	14:24
IDENT	x	14:25
)	)	14:26
KW_is	is	14:29
KW_return	return	15:15
IDENT	x	15:17
*	*	15:19
IDENT	x	15:21
KW_end	end	16:8
KW_var	var	18:8
IDENT	result1	18:16
:=	:=	18:19
IDENT	square	18:26
(	(	18:27
INT	5	18:28
)	)	18:29
KW_var	var	19:8
IDENT	result2	19:16
:=	:=	19:19
IDENT	square	19:26
(	(	19:27
REAL	3.5	19:30
)	)	19:31
KW_assert	assert	20:11
IDENT	result1	20:19
==	==	20:22
INT	25	20:25
KW_assert	assert	21:11
IDENT	result2	21:19
==	==	21:22
REAL	12.25	21:28
}	}	22:2
KW_test	test	24:5
STRING	Function with multiple parameters	24:41
{	{	24:43
KW_var	var	25:8
IDENT	add	25:12
:=	:=	25:15
KW_func	func	25:20
(	(	25:21
IDENT	a	25:22
,	,	25:23
IDENT	b	25:25
)	)	25:26
KW_is	is	25:29
KW_return	return	26:15
IDENT	a	26:17
+	+	26:19
IDENT	b	26:21
KW_end	end	27:8
KW_var	var	29:8
IDENT	result1	29:16
:=	:=	29:19
IDENT	add	29:23
(	(	29:24
INT	5	29:25
,	,	29:26
INT	3	29:28
)	)	29:29
KW_var	var	30:8
IDENT	result2	30:16
:=	:=	30:19
IDENT	add	30:23
(	(	30:24
REAL	2.5	30:27
,	,	30:28
REAL	1.5	30:32
)	)	30:33
KW_var	var	31:8
IDENT	result3	31:16
:=	:=	31:19
IDENT	add	31:23
(	(	31:24
STRING	hello	31:31
,	,	31:32
STRING	 world	31:41
)	)	31:42
KW_assert	assert	32:11
IDENT	result1	32:19
==	==	32:22
INT	8	32:24
KW_assert	assert	33:11
IDENT	result2	33:19
==	==	33:22
REAL	4.0	33:26
KW_assert	assert	34:11
IDENT	result3	34:19
==	==	34:22
STRING	hello world	34:36
}	}	35:2
KW_test	test	37:5
STRING	Function with return statement in middle	37:48
{	{	37:50
KW_var	var	38:8
IDENT	check_positive	38:23
:=	:=	38:26
KW_func	func	38:31
(	(	38:32
IDENT	x	38:33
)	)	38:34
KW_is	is	38:37
KW_if	if	39:11
IDENT	x	39:13
>	>	39:15
INT	0	39:17
KW_then	then	39:22
KW_return	return	40:19
KW_true	true	40:24
KW_else	else	41:13
KW_return	return	42:19
KW_false	false	42:25
KW_end	end	43:12
KW_end	end	44:8
KW_assert	assert	46:11
IDENT	check_positive	46:26
(	(	46:27
INT	5	46:28
)	)	46:29
==	==	46:32
KW_true	true	46:37
KW_assert	assert	47:11
IDENT	check_positive	47:26
(	(	47:27
-	-	47:28
INT	3	47:29
)	)	47:30
==	==	47:33
KW_false	false	47:39
KW_assert	assert	48:11
IDENT	check_positive	48:26
(	(	48:27
INT	0	48:28
)	)	48:29
==	==	48:32
KW_false	false	48:38
}	}	49:2
KW_test	test	51:5
STRING	Function without explicit return	51:40
{	{	51:42
KW_var	var	52:8
IDENT	print_message	52:22
:=	:=	52:25
KW_func	func	52:30
(	(	52:31
IDENT	msg	52:34
)	)	52:35
KW_is	is	52:38
KW_print	print	53:14
IDENT	msg	53:18
KW_end	end	54:8
IDENT	print_message	56:18
(	(	56:19
STRING	test	56:25
)	)	56:26
}	}	58:2
KW_test	test	60:5
STRING	Nested function calls	60:29
{	{	60:31
KW_var	var	61:8
IDENT	double	61:15
:=	:=	61:18
KW_func	func	61:23
(	(	61:24
IDENT	x	61:25
)	)	61:26
KW_is	is	61:29
KW_return	return	61:36
IDENT	x	61:38
*	*	61:40
INT	2	61:42
KW_end	end	61:46
KW_var	var	62:8
IDENT	add_one	62:16
:=	:=	62:19
KW_func	func	62:24
(	(	62:25
IDENT	x	62:26
)	)	62:27
KW_is	is	62:30
KW_return	return	62:37
IDENT	x	62:39
+	+	62:41
INT	1	62:43
KW_end	end	62:47
KW_var	var	64:8
IDENT	result	64:15
:=	:=	64:18
IDENT	double	64:25
(	(	64:26
IDENT	add_one	64:33
(	(	64:34
INT	5	64:35
)	)	64:36
)	)	64:37
KW_assert	assert	65:11
IDENT	result	65:18
==	==	65:21
INT	12	65:24
}	}	66:2
KW_test	test	68:5
STRING	Recursive function	68:26
{	{	68:28
KW_var	var	69:8
IDENT	factorial	69:18
:=	:=	69:21
KW_func	func	69:26
(	(	69:27
IDENT	n	69:28
)	)	69:29
KW_is	is	69:32
KW_if	if	70:11
IDENT	n	70:13
<=	<=	70:16
INT	1	70:18
KW_then	then	70:23
KW_return	return	71:19
INT	1	71:21
KW_else	else	72:13
KW_return	return	73:19
IDENT	n	73:21
*	*	73:23
IDENT	factorial	73:33
(	(	73:34
IDENT	n	73:35
-	-	73:37
INT	1	73:39
)	)	73:40
KW_end	end	74:12
KW_end	end	75:8
KW_assert	assert	77:11
IDENT	factorial	77:21
(	(	77:22
INT	5	77:23
)	)	77:24
==	==	77:27
INT	120	77:31
KW_assert	assert	78:11
IDENT	factorial	78:21
(	(	78:22
INT	3	78:23
)	)	78:24
==	==	78:27
INT	6	78:29
KW_assert	assert	79:11
IDENT	factorial	79:21
(	(	79:22
INT	1	79:23
)	)	79:24
==	==	79:27
INT	1	79:29
}	}	80:2
KW_test	test	82:5
STRING	Function stored in array	82:32
{	{	82:34
KW_var	var	83:8
IDENT	functions	83:18
:=	:=	83:21
[	[	83:23
KW_func	func	84:13
(	(	84:14
IDENT	x	84:15
)	)	84:16
KW_is	is	84:19
KW_return	return	84:26
IDENT	x	84:28
+	+	84:30
INT	1	84:32
KW_end	end	84:36
,	,	84:37
KW_func	func	85:13
(	(	85:14
IDENT	x	85:15
)	)	85:16
KW_is	is	85:19
KW_return	return	85:26
IDENT	x	85:28
*	*	85:30
INT	2	85:32
KW_end	end	85:36
,	,	85:37
KW_func	func	86:13
(	(	86:14
IDENT	x	86:15
)	)	86:16
KW_is	is	86:19
KW_return	return	86:26
IDENT	x	86:28
*	*	86:30
IDENT	x	86:32
KW_end	end	86:36
]	]	87:6
KW_var	var	89:8
IDENT	result1	89:16
:=	:=	89:19
IDENT	functions	89:29
[	[	89:30
INT	1	89:31
]	]	89:32
(	(	89:33
INT	5	89:34
)	)	89:35
KW_var	var	90:8
IDENT	result2	90:16
:=	:=	90:19
IDENT	functions	90:29
[	[	90:30
INT	2	90:31
]	]	90:32
(	(	90:33
INT	5	90:34
)	)	90:35
KW_var	var	91:8
IDENT	result3	91:16
:=	:=	91:19
IDENT	functions	91:29
[	[	91:30
INT	3	91:31
]	]	91:32
(	(	91:33
INT	5	91:34
)	)	91:35
KW_assert	assert	93:11
IDENT	result1	93:19
==	==	93:22
INT	6	93:24
KW_assert	assert	94:11
IDENT	result2	94:19
==	==	94:22
INT	10	94:25
KW_assert	assert	95:11
IDENT	result3	95:19
==	==	95:22
INT	25	95:25
}	}	96:2
KW_test	test	98:5
STRING	Function stored in tuple	98:32
{	{	98:34
KW_var	var	99:8
IDENT	calculator	99:19
:=	:=	99:22
{	{	99:24
IDENT	add	100:12
:=	:=	100:15
KW_func	func	100:20
(	(	100:21
IDENT	a	100:22
,	,	100:23
IDENT	b	100:25
)	)	100:26
KW_is	is	100:29
KW_return	return	100:36
IDENT	a	100:38
+	+	100:40
IDENT	b	100:42
KW_end	end	100:46
,	,	100:47
IDENT	multiply	101:17
:=	:=	101:20
KW_func	func	101:25
(	(	101:26
IDENT	a	101:27
,	,	101:28
IDENT	b	101:30
)	)	101:31
KW_is	is	101:34
KW_return	return	101:41
IDENT	a	101:43
*	*	101:45
IDENT	b	101:47
KW_end	end	101:51
}	}	102:6
KW_var	var	104:8
IDENT	sum	104:12
:=	:=	104:15
IDENT	calculator	104:26
.	.	104:27
IDENT	add	104:30
(	(	104:31
INT	10	104:33
,	,	104:34
INT	5	104:36
)	)	104:37
KW_var	var	105:8
IDENT	product	105:16
:=	:=	105:19
IDENT	calculator	105:30
.	.	105:31
IDENT	multiply	105:39
(	(	105:40
INT	10	105:42
,	,	105:43
INT	5	105:45
)	)	105:46
KW_assert	assert	107:11
IDENT	sum	107:15
==	==	107:18
INT	15	107:21
KW_assert	assert	108:11
IDENT	product	108:19
==	==	108:22
INT	50	108:25
}	}	109:2
KW_test	test	111:5
STRING	Function as parameter	111:29
{	{	111:31
KW_var	var	112:8
IDENT	apply_operation	112:24
:=	:=	112:27
KW_func	func	112:32
(	(	112:33
IDENT	f	112:34
,	,	112:35
IDENT	x	112:37
,	,	112:38
IDENT	y	112:40
)	)	112:41
KW_is	is	112:44
KW_return	return	113:15
IDENT	f	113:17
(	(	113:18
IDENT	x	113:19
,	,	113:20
IDENT	y	113:22
)	)	113:23
KW_end	end	114:8
KW_var	var	116:8
IDENT	add	116:12
:=	:=	116:15
KW_func	func	116:20
(	(	116:21
IDENT	a	116:22
,	,	116:23
IDENT	b	116:25
)	)	116:26
KW_is	is	116:29
KW_return	return	116:36
IDENT	a	116:38
+	+	116:40
IDENT	b	116:42
KW_end	end	116:46
KW_var	var	117:8
IDENT	multiply	117:17
:=	:=	117:20
KW_func	func	117:25
(	(	117:26
IDENT	a	117:27
,	,	117:28
IDENT	b	117:30
)	)	117:31
KW_is	is	117:34
KW_return	return	117:41
IDENT	a	117:43
*	*	117:45
IDENT	b	117:47
KW_end	end	117:51
KW_var	var	119:8
IDENT	result1	119:16
:=	:=	119:19
IDENT	apply_operation	119:35
(	(	119:36
IDENT	add	119:39
,	,	119:40
INT	5	119:42
,	,	119:43
INT	3	119:45
)	)	119:46
KW_var	var	120:8
IDENT	result2	120:16
:=	:=	120:19
IDENT	apply_operation	120:35
(	(	120:36
IDENT	multiply	120:44
,	,	120:45
INT	5	120:47
,	,	120:48
INT	3	120:50
)	)	120:51
KW_assert	assert	122:11
IDENT	result1	122:19
==	==	122:22
INT	8	122:24
KW_assert	assert	123:11
IDENT	result2	123:19
==	==	123:22
INT	15	123:25
}	}	124:2
KW_test	test	126:5
STRING	Anonymous function in expression	126:40
{	{	126:42
KW_var	var	127:8
IDENT	result	127:15
:=	:=	127:18
(	(	127:20
KW_func	func	127:24
(	(	127:25
IDENT	x	127:26
)	)	127:27
KW_is	is	127:30
KW_return	return	127:37
IDENT	x	127:39
*	*	127:41
INT	2	127:43
KW_end	end	127:47
)	)	127:48
(	(	127:49
INT	10	127:51
)	)	127:52
KW_assert	assert	128:11
IDENT	result	128:18
==	==	128:21
INT	20	128:24
}	}	129:2
KW_test	test	131:5
STRING	Function with local variables	131:37
{	{	131:39
KW_var	var	132:8
IDENT	complex_calc	132:21
:=	:=	132:24
KW_func	func	132:29
(	(	132:30
IDENT	a	132:31
,	,	132:32
IDENT	b	132:34
,	,	132:35
IDENT	c	132:37
)	)	132:38
KW_is	is	132:41
KW_var	var	133:12
IDENT	temp1	133:18
:=	:=	133:21
IDENT	a	133:23
+	+	133:25
IDENT	b	133:27
KW_var	var	134:12
IDENT	temp2	134:18
:=	:=	134:21
IDENT	temp1	134:27
*	*	134:29
IDENT	c	134:31
KW_return	return	135:15
IDENT	temp2	135:21
-	-	135:23
IDENT	a	135:25
KW_end	end	136:8
KW_var	var	138:8
IDENT	result	138:15
:=	:=	138:18
IDENT	complex_calc	138:31
(	(	138:32
INT	2	138:33
,	,	138:34
INT	3	138:36
,	,	138:37
INT	4	138:39
)	)	138:40
KW_assert	assert	139:11
IDENT	result	139:18
==	==	139:21
INT	19	139:24
KW_assert	assert	141:11
IDENT	result	141:18
==	==	141:21
INT	18	141:24
}	}	142:2
EOF		143:1
KW_test	test	4:5
STRING	Simple tuple creation	4:29
{	{	4:31
KW_var	var	5:8
IDENT	person	5:15
:=	:=	5:18
{	{	5:20
IDENT	name	5:24
:=	:=	5:27
STRING	John	5:34
,	,	5:35
IDENT	age	5:39
:=	:=	5:42
INT	25	5:45
}	}	5:46
KW_assert	assert	6:11
IDENT	person	6:18
.	.	6:19
IDENT	name	6:23
==	==	6:26
STRING	John	6:33
KW_assert	assert	7:11
IDENT	person	7:18
.	.	7:19
IDENT	age	7:22
==	==	7:25
INT	25	7:28
}	}	8:2
KW_test	test	10:5
STRING	Tuple with mixed types	10:30
{	{	10:32
KW_var	var	11:8
IDENT	data	11:13
:=	:=	11:16
{	{	11:18
IDENT	id	11:20
:=	:=	11:23
INT	1	11:25
,	,	11:26
IDENT	value	11:32
:=	:=	11:35
REAL	3.14	11:40
,	,	11:41
IDENT	active	11:48
:=	:=	11:51
KW_true	true	11:56
,	,	11:57
IDENT	desc	11:62
:=	:=	11:65
STRING	test	11:72
}	}	11:73
KW_assert	assert	12:11
IDENT	data	12:16
.	.	12:17
IDENT	id	12:19
==	==	12:22
INT	1	12:24
KW_assert	assert	13:11
IDENT	data	13:16
.	.	13:17
IDENT	value	13:22
==	==	13:25
REAL	3.14	13:30
KW_assert	assert	14:11
IDENT	data	14:16
.	.	14:17
IDENT	active	14:23
==	==	14:26
KW_true	true	14:31
KW_assert	assert	15:11
IDENT	data	15:16
.	.	15:17
IDENT	desc	15:21
==	==	15:24
STRING	test	15:31
}	}	16:2
KW_test	test	18:5
STRING	Tuple with unnamed elements	18:35
{	{	18:37
KW_var	var	19:8
IDENT	point	19:14
:=	:=	19:17
{	{	19:19
INT	10	19:21
,	,	19:22
INT	20	19:25
,	,	19:26
INT	30	19:29
}	}	19:30
KW_assert	assert	20:11
IDENT	point	20:17
.	.	20:18
INT	1	20:19
==	==	20:22
INT	10	20:25
KW_assert	assert	21:11
IDENT	point	21:17
.	.	21:18
INT	2	21:19
==	==	21:22
INT	20	21:25
KW_assert	assert	22:11
IDENT	point	22:17
.	.	22:18
INT	3	22:19
==	==	22:22
INT	30	22:25
}	}	23:2
KW_test	test	25:5
STRING	Mixed named and unnamed tuple elements	25:46
{	{	25:48
KW_var	var	26:8
IDENT	mixed	26:14
:=	:=	26:17
{	{	26:19
IDENT	x	26:20
:=	:=	26:23
INT	100	26:27
,	,	26:28
INT	200	26:32
,	,	26:33
IDENT	z	26:35
:=	:=	26:38
INT	300	26:42
,	,	26:43
INT	400	26:47
}	}	26:48
KW_assert	assert	27:11
IDENT	mixed	27:17
.	.	27:18
IDENT	x	27:19
==	==	27:22
INT	100	27:26
KW_assert	assert	28:11
IDENT	mixed	28:17
.	.	28:18
INT	1	28:19
==	==	28:22
INT	100	28:26
KW_assert	assert	29:11
IDENT	mixed	29:17
.	.	29:18
INT	2	29:19
==	==	29:22
INT	200	29:26
KW_assert	assert	30:11
IDENT	mixed	30:17
.	.	30:18
IDENT	z	30:19
==	==	30:22
INT	300	30:26
KW_assert	assert	31:11
IDENT	mixed	31:17
.	.	31:18
INT	3	31:19
==	==	31:22
INT	300	31:26
KW_assert	assert	32:11
IDENT	mixed	32:17
.	.	32:18
INT	4	32:19
==	==	32:22
INT	400	32:26
}	}	33:2
KW_test	test	35:5
STRING	Tuple element modification	35:34
{	{	35:36
KW_var	var	36:8
IDENT	person	36:15
:=	:=	36:18
{	{	36:20
IDENT	name	36:24
:=	:=	36:27
STRING	John	36:34
,	,	36:35
IDENT	age	36:39
:=	:=	36:42
INT	25	36:45
}	}	36:46
IDENT	person	37:11
.	.	37:12
IDENT	name	37:16
:=	:=	37:19
STRING	Jane	37:26
IDENT	person	38:11
.	.	38:12
IDENT	age	38:15
:=	:=	38:18
INT	30	38:21
KW_assert	assert	39:11
IDENT	person	39:18
.	.	39:19
IDENT	name	39:23
==	==	39:26
STRING	Jane	39:33
KW_assert	assert	40:11
IDENT	person	40:18
.	.	40:19
IDENT	age	40:22
==	==	40:25
INT	30	40:28
}	}	41:2
KW_test	test	43:5
STRING	Tuple concatenation	43:27
{	{	43:29
KW_var	var	44:8
IDENT	t1	44:11
:=	:=	44:14
{	{	44:16
IDENT	a	44:17
:=	:=	44:20
INT	1	44:22
,	,	44:23
IDENT	b	44:25
:=	:=	44:28
INT	2	44:30
}	}	44:31
KW_var	var	45:8
IDENT	t2	45:11
:=	:=	45:14
{	{	45:16
IDENT	c	45:17
:=	:=	45:20
INT	3	45:22
,	,	45:23
IDENT	d	45:25
:=	:=	45:28
INT	4	45:30
}	}	45:31
KW_var	var	46:8
IDENT	result	46:15
:=	:=	46:18
IDENT	t1	46:21
+	+	46:23
IDENT	t2	46:26
KW_assert	assert	47:11
IDENT	result	47:18
.	.	47:19
IDENT	a	47:20
==	==	47:23
INT	1	47:25
KW_assert	assert	48:11
IDENT	result	48:18
.	.	48:19
IDENT	b	48:20
==	==	48:23
INT	2	48:25
KW_assert	assert	49:11
IDENT	result	49:18
.	.	49:19
IDENT	c	49:20
==	==	49:23
INT	3	49:25
KW_assert	assert	50:11
IDENT	result	50:18
.	.	50:19
IDENT	d	50:20
==	==	50:23
INT	4	50:25
}	}	51:2
KW_test	test	53:5
STRING	Tuple concatenation with unnamed elements	53:49
{	{	53:51
KW_var	var	54:8
IDENT	t1	54:11
:=	:=	54:14
{	{	54:16
INT	10	54:18
,	,	54:19
INT	20	54:22
}	}	54:23
KW_var	var	55:8
IDENT	t2	55:11
:=	:=	55:14
{	{	55:16
INT	30	55:18
,	,	55:19
INT	40	55:22
}	}	55:23
KW_var	var	56:8
IDENT	result	56:15
:=	:=	56:18
IDENT	t1	56:21
+	+	56:23
IDENT	t2	56:26
KW_assert	assert	57:11
IDENT	result	57:18
.	.	57:19
INT	1	57:20
==	==	57:23
INT	10	57:26
KW_assert	assert	58:11
IDENT	result	58:18
.	.	58:19
INT	2	58:20
==	==	58:23
INT	20	58:26
KW_assert	assert	59:11
IDENT	result	59:18
.	.	59:19
INT	3	59:20
==	==	59:23
INT	30	59:26
KW_assert	assert	60:11
IDENT	result	60:18
.	.	60:19
INT	4	60:20
==	==	60:23
INT	40	60:26
}	}	61:2
KW_test	test	63:5
STRING	Tuple concatenation with mixed types	63:44
{	{	63:46
KW_var	var	64:8
IDENT	t1	64:11
:=	:=	64:14
{	{	64:16
IDENT	name	64:20
:=	:=	64:23
STRING	John	64:30
,	,	64:31
IDENT	score	64:37
:=	:=	64:40
INT	85	64:43
}	}	64:44
KW_var	var	65:8
IDENT	t2	65:11
:=	:=	65:14
{	{	65:16
REAL	85.5	65:20
,	,	65:21
IDENT	completed	65:31
:=	:=	65:34
KW_true	true	65:39
}	}	65:40
KW_var	var	66:8
IDENT	result	66:15
:=	:=	66:18
IDENT	t1	66:21
+	+	66:23
IDENT	t2	66:26
KW_assert	assert	67:11
IDENT	result	67:18
.	.	67:19
IDENT	name	67:23
==	==	67:26
STRING	John	67:33
KW_assert	assert	68:11
IDENT	result	68:18
.	.	68:19
IDENT	score	68:24
==	==	68:27
INT	85	68:30
KW_assert	assert	69:11
IDENT	result	69:18
.	.	69:19
INT	1	69:20
==	==	69:23
REAL	85.5	69:28
KW_assert	assert	70:11
IDENT	result	70:18
.	.	70:19
IDENT	completed	70:28
==	==	70:31
KW_true	true	70:36
}	}	71:2
KW_test	test	73:5
STRING	Nested tuple access	73:27
{	{	73:29
KW_var	var	74:8
IDENT	company	74:16
:=	:=	74:19
{	{	74:21
IDENT	name	75:13
:=	:=	75:16
STRING	TechCorp	75:27
,	,	75:28
IDENT	employees	76:18
:=	:=	76:21
{	{	76:23
IDENT	count	77:18
:=	:=	77:21
INT	50	77:24
,	,	77:25
IDENT	departments	78:24
:=	:=	78:27
{	{	78:29
STRING	Engineering	78:42
,	,	78:43
STRING	Sales	78:51
,	,	78:52
STRING	HR	78:57
}	}	78:58
}	}	79:10
}	}	80:6
KW_assert	assert	81:11
IDENT	company	81:19
.	.	81:20
IDENT	name	81:24
==	==	81:27
STRING	TechCorp	81:38
KW_assert	assert	82:11
IDENT	company	82:19
.	.	82:20
IDENT	employees	82:29
.	.	82:30
IDENT	count	82:35
==	==	82:38
INT	50	82:41
KW_assert	assert	83:11
IDENT	company	83:19
.	.	83:20
IDENT	employees	83:29
.	.	83:30
IDENT	departments	83:41
.	.	83:42
INT	1	83:43
==	==	83:46
STRING	Engineering	83:60
KW_assert	assert	84:11
IDENT	company	84:19
.	.	84:20
IDENT	employees	84:29
.	.	84:30
IDENT	departments	84:41
.	.	84:42
INT	2	84:43
==	==	84:46
STRING	Sales	84:54
KW_assert	assert	85:11
IDENT	company	85:19
.	.	85:20
IDENT	employees	85:29
.	.	85:30
IDENT	departments	85:41
.	.	85:42
INT	3	85:43
==	==	85:46
STRING	HR	85:51
}	}	86:2
KW_test	test	88:5
STRING	Tuple in array	88:22
{	{	88:24
KW_var	var	89:8
IDENT	people	89:15
:=	:=	89:18
[	[	89:20
{	{	90:10
IDENT	name	90:14
:=	:=	90:17
STRING	Alice	90:25
,	,	90:26
IDENT	age	90:30
:=	:=	90:33
INT	25	90:36
}	}	90:37
,	,	90:38
{	{	91:10
IDENT	name	91:14
:=	:=	91:17
STRING	Bob	91:23
,	,	91:24
IDENT	age	91:28
:=	:=	91:31
INT	30	91:34
}	}	91:35
,	,	91:36
{	{	92:10
IDENT	name	92:14
:=	:=	92:17
STRING	Charlie	92:27
,	,	92:28
IDENT	age	92:32
:=	:=	92:35
INT	35	92:38
}	}	92:39
]	]	93:6
KW_assert	assert	94:11
IDENT	people	94:18
[	[	94:19
INT	1	94:20
]	]	94:21
.	.	94:22
IDENT	name	94:26
==	==	94:29
STRING	Alice	94:37
KW_assert	assert	95:11
IDENT	people	95:18
[	[	95:19
INT	1	95:20
]	]	95:21
.	.	95:22
IDENT	age	95:25
==	==	95:28
INT	25	95:31
KW_assert	assert	96:11
IDENT	people	96:18
[	[	96:19
INT	2	96:20
]	]	96:21
.	.	96:22
IDENT	name	96:26
==	==	96:29
STRING	Bob	96:35
KW_assert	assert	97:11
IDENT	people	97:18
[	[	97:19
INT	2	97:20
]	]	97:21
.	.	97:22
IDENT	age	97:25
==	==	97:28
INT	30	97:31
KW_assert	assert	98:11
IDENT	people	98:18
[	[	98:19
INT	3	98:20
]	]	98:21
.	.	98:22
IDENT	name	98:26
==	==	98:29
STRING	Charlie	98:39
KW_assert	assert	99:11
IDENT	people	99:18
[	[	99:19
INT	3	99:20
]	]	99:21
.	.	99:22
IDENT	age	99:25
==	==	99:28
INT	35	99:31
}	}	100:2
KW_test	test	102:5
STRING	Array in tuple	102:22
{	{	102:24
KW_var	var	103:8
IDENT	data	103:13
:=	:=	103:16
{	{	103:18
IDENT	name	104:13
:=	:=	104:16
STRING	Report	104:25
,	,	104:26
IDENT	values	105:15
:=	:=	105:18
[	[	105:20
INT	10	105:22
,	,	105:23
INT	20	105:26
,	,	105:27
INT	30	105:30
,	,	105:31
INT	40	105:34
,	,	105:35
INT	50	105:38
]	]	105:39
}	}	106:6
KW_assert	assert	107:11
IDENT	data	107:16
.	.	107:17
IDENT	name	107:21
==	==	107:24
STRING	Report	107:33
KW_assert	assert	108:11
IDENT	data	108:16
.	.	108:17
IDENT	values	108:23
[	[	108:24
INT	1	108:25
]	]	108:26
==	==	108:29
INT	10	108:32
KW_assert	assert	109:11
IDENT	data	109:16
.	.	109:17
IDENT	values	109:23
[	[	109:24
INT	3	109:25
]	]	109:26
==	==	109:29
INT	30	109:32
KW_assert	assert	110:11
IDENT	data	110:16
.	.	110:17
IDENT	values	110:23
[	[	110:24
INT	5	110:25
]	]	110:26
==	==	110:29
INT	50	110:32
}	}	111:2
KW_test	test	113:5
STRING	Tuple field reassignment with different types	113:53
{	{	113:55
KW_var	var	114:8
IDENT	item	114:13
:=	:=	114:16
{	{	114:18
IDENT	value	114:23
:=	:=	114:26
INT	100	114:30
}	}	114:31
IDENT	item	115:9
.	.	115:10
IDENT	value	115:15
:=	:=	115:18
REAL	200.5	115:24
KW_assert	assert	116:11
IDENT	item	116:16
.	.	116:17
IDENT	value	116:22
==	==	116:25
REAL	200.5	116:31
KW_assert	assert	117:11
IDENT	item	117:16
.	.	117:17
IDENT	value	117:22
KW_is	is	117:25
KW_real	real	117:30
IDENT	item	119:9
.	.	119:10
IDENT	value	119:15
:=	:=	119:18
STRING	changed	119:28
KW_assert	assert	120:11
IDENT	item	120:16
.	.	120:17
IDENT	value	120:22
==	==	120:25
STRING	changed	120:35
KW_assert	assert	121:11
IDENT	item	121:16
.	.	121:17
IDENT	value	121:22
KW_is	is	121:25
KW_string	string	121:32
}	}	122:2
KW_test	test	124:5
STRING	Complex tuple operations	124:32
{	{	124:34
KW_var	var	125:8
IDENT	result	125:15
:=	:=	125:18
{	{	125:20
IDENT	sum	126:12
:=	:=	126:15
INT	0	126:17
,	,	126:18
IDENT	count	127:14
:=	:=	127:17
INT	0	127:19
,	,	127:20
IDENT	data	128:13
:=	:=	128:16
[	[	128:18
]	]	128:19
}	}	129:6
KW_for	for	131:8
IDENT	i	131:10
KW_in	in	131:13
INT	1	131:15
.	.	131:16
.	.	131:17
INT	5	131:18
KW_loop	loop	131:23
IDENT	result	132:15
.	.	132:16
IDENT	data	132:20
:=	:=	132:23
IDENT	result	132:30
.	.	132:31
IDENT	data	132:35
+	+	132:37
[	[	132:39
IDENT	i	132:40
*	*	132:42
INT	10	132:45
]	]	132:46
IDENT	result	133:15
.	.	133:16
IDENT	sum	133:19
:=	:=	133:22
IDENT	result	133:29
.	.	133:30
IDENT	sum	133:33
+	+	133:35
(	(	133:37
IDENT	i	133:38
*	*	133:40
INT	10	133:43
)	)	133:44
IDENT	result	134:15
.	.	134:16
IDENT	count	134:21
:=	:=	134:24
IDENT	result	134:31
.	.	134:32
IDENT	count	134:37
+	+	134:39
INT	1	134:41
KW_end	end	135:8
KW_assert	assert	137:11
IDENT	result	137:18
.	.	137:19
IDENT	count	137:24
==	==	137:27
INT	5	137:29
KW_assert	assert	138:11
IDENT	result	138:18
.	.	138:19
IDENT	sum	138:22
==	==	138:25
INT	150	138:29
KW_assert	assert	139:11
IDENT	result	139:18
.	.	139:19
IDENT	data	139:23
[	[	139:24
INT	1	139:25
]	]	139:26
==	==	139:29
INT	10	139:32
KW_assert	assert	140:11
IDENT	result	140:18
.	.	140:19
IDENT	data	140:23
[	[	140:24
INT	5	140:25
]	]	140:26
==	==	140:29
INT	50	140:32
}	}	141:2
EOF		142:1
KW_test	test	4:5
STRING	Empty array creation	4:28
{	{	4:30
KW_var	var	5:8
IDENT	arr	5:12
:=	:=	5:15
[	[	5:17
]	]	5:18
KW_assert	assert	6:11
IDENT	arr	6:15
KW_is	is	6:18
[	[	6:20
]	]	6:21
}	}	8:2
KW_test	test	10:5
STRING	Array with single element	10:33
{	{	10:35
KW_var	var	11:8
IDENT	arr	11:12
:=	:=	11:15
[	[	11:17
INT	42	11:19
]	]	11:20
KW_assert	assert	12:11
IDENT	arr	12:15
[	[	12:16
INT	1	12:17
]	]	12:18
==	==	12:21
INT	42	12:24
KW_assert	assert	13:11
IDENT	arr	13:15
[	[	13:16
INT	1	13:17
]	]	13:18
KW_is	is	13:21
KW_int	int	13:25
}	}	14:2
KW_test	test	16:5
STRING	Array with multiple elements	16:36
{	{	16:38
KW_var	var	17:8
IDENT	arr	17:12
:=	:=	17:15
[	[	17:17
INT	1	17:18
,	,	17:19
INT	2	17:21
,	,	17:22
INT	3	17:24
,	,	17:25
INT	4	17:27
,	,	17:28
INT	5	17:30
]	]	17:31
KW_assert	assert	18:11
IDENT	arr	18:15
[	[	18:16
INT	1	18:17
]	]	18:18
==	==	18:21
INT	1	18:23
KW_assert	assert	19:11
IDENT	arr	19:15
[	[	19:16
INT	2	19:17
]	]	19:18
==	==	19:21
INT	2	19:23
KW_assert	assert	20:11
IDENT	arr	20:15
[	[	20:16
INT	3	20:17
]	]	20:18
==	==	20:21
INT	3	20:23
KW_assert	assert	21:11
IDENT	arr	21:15
[	[	21:16
INT	4	21:17
]	]	21:18
==	==	21:21
INT	4	21:23
KW_assert	assert	22:11
IDENT	arr	22:15
[	[	22:16
INT	5	22:17
]	]	22:18
==	==	22:21
INT	5	22:23
}	}	23:2
KW_test	test	25:5
STRING	Array with mixed types	25:30
{	{	25:32
KW_var	var	26:8
IDENT	arr	26:12
:=	:=	26:15
[	[	26:17
INT	1	26:18
,	,	26:19
REAL	2.5	26:23
,	,	26:24
STRING	hello	26:32
,	,	26:33
KW_true	true	26:38
,	,	26:39
KW_none	none	26:44
]	]	26:45
KW_assert	assert	27:11
IDENT	arr	27:15
[	[	27:16
INT	1	27:17
]	]	27:18
==	==	27:21
INT	1	27:23
KW_assert	assert	28:11
IDENT	arr	28:15
[	[	28:16
INT	2	28:17
]	]	28:18
==	==	28:21
REAL	2.5	28:25
KW_assert	assert	29:11
IDENT	arr	29:15
[	[	29:16
INT	3	29:17
]	]	29:18
==	==	29:21
STRING	hello	29:29
KW_assert	assert	30:11
IDENT	arr	30:15
[	[	30:16
INT	4	30:17
]	]	30:18
==	==	30:21
KW_true	true	30:26
KW_assert	assert	31:11
IDENT	arr	31:15
[	[	31:16
INT	5	31:17
]	]	31:18
KW_is	is	31:21
KW_none	none	31:26
}	}	32:2
KW_test	test	34:5
STRING	Array element assignment	34:32
{	{	34:34
KW_var	var	35:8
IDENT	arr	35:12
:=	:=	35:15
[	[	35:17
INT	0	35:18
,	,	35:19
INT	0	35:21
,	,	35:22
INT	0	35:24
]	]	35:25
IDENT	arr	36:8
[	[	36:9
INT	1	36:10
]	]	36:11
:=	:=	36:14
INT	10	36:17
IDENT	arr	37:8
[	[	37:9
INT	2	37:10
]	]	37:11
:=	:=	37:14
INT	20	37:17
IDENT	arr	38:8
[	[	38:9
INT	3	38:10
]	]	38:11
:=	:=	38:14
INT	30	38:17
KW_assert	assert	39:11
IDENT	arr	39:15
[	[	39:16
INT	1	39:17
]	]	39:18
==	==	39:21
INT	10	39:24
KW_assert	assert	40:11
IDENT	arr	40:15
[	[	40:16
INT	2	40:17
]	]	40:18
==	==	40:21
INT	20	40:24
KW_assert	assert	41:11
IDENT	arr	41:15
[	[	41:16
INT	3	41:17
]	]	41:18
==	==	41:21
INT	30	41:24
}	}	42:2
KW_test	test	44:5
STRING	Array with non-consecutive indices	44:42
{	{	44:44
KW_var	var	45:8
IDENT	arr	45:12
:=	:=	45:15
[	[	45:17
]	]	45:18
IDENT	arr	46:8
[	[	46:9
INT	10	46:11
]	]	46:12
:=	:=	46:15
INT	100	46:19
IDENT	arr	47:8
[	[	47:9
INT	50	47:11
]	]	47:12
:=	:=	47:15
INT	500	47:19
IDENT	arr	48:8
[	[	48:9
INT	1000	48:13
]	]	48:14
:=	:=	48:17
INT	10000	48:23
KW_assert	assert	49:11
IDENT	arr	49:15
[	[	49:16
INT	10	49:18
]	]	49:19
==	==	49:22
INT	100	49:26
KW_assert	assert	50:11
IDENT	arr	50:15
[	[	50:16
INT	50	50:18
]	]	50:19
==	==	50:22
INT	500	50:26
KW_assert	assert	51:11
IDENT	arr	51:15
[	[	51:16
INT	1000	51:20
]	]	51:21
==	==	51:24
INT	10000	51:30
}	}	52:2
KW_test	test	54:5
STRING	Array element reassignment	54:34
{	{	54:36
KW_var	var	55:8
IDENT	arr	55:12
:=	:=	55:15
[	[	55:17
INT	1	55:18
,	,	55:19
INT	2	55:21
,	,	55:22
INT	3	55:24
]	]	55:25
IDENT	arr	56:8
[	[	56:9
INT	2	56:10
]	]	56:11
:=	:=	56:14
STRING	changed	56:24
KW_assert	assert	57:11
IDENT	arr	57:15
[	[	57:16
INT	2	57:17
]	]	57:18
==	==	57:21
STRING	changed	57:31
KW_assert	assert	58:11
IDENT	arr	58:15
[	[	58:16
INT	2	58:17
]	]	58:18
KW_is	is	58:21
KW_string	string	58:28
IDENT	arr	59:8
[	[	59:9
INT	2	59:10
]	]	59:11
:=	:=	59:14
REAL	42.5	59:19
KW_assert	assert	60:11
IDENT	arr	60:15
[	[	60:16
INT	2	60:17
]	]	60:18
==	==	60:21
REAL	42.5	60:26
KW_assert	assert	61:11
IDENT	arr	61:15
[	[	61:16
INT	2	61:17
]	]	61:18
KW_is	is	61:21
KW_real	real	61:26
}	}	62:2
KW_test	test	64:5
STRING	Array concatenation	64:27
{	{	64:29
KW_var	var	65:8
IDENT	arr1	65:13
:=	:=	65:16
[	[	65:18
INT	1	65:19
,	,	65:20
INT	2	65:22
,	,	65:23
INT	3	65:25
]	]	65:26
KW_var	var	66:8
IDENT	arr2	66:13
:=	:=	66:16
[	[	66:18
INT	4	66:19
,	,	66:20
INT	5	66:22
,	,	66:23
INT	6	66:25
]	]	66:26
KW_var	var	67:8
IDENT	result	67:15
:=	:=	67:18
IDENT	arr1	67:23
+	+	67:25
IDENT	arr2	67:30
KW_assert	assert	68:11
IDENT	result	68:18
[	[	68:19
INT	1	68:20
]	]	68:21
==	==	68:24
INT	1	68:26
KW_assert	assert	69:11
IDENT	result	69:18
[	[	69:19
INT	2	69:20
]	]	69:21
==	==	69:24
INT	2	69:26
KW_assert	assert	70:11
IDENT	result	70:18
[	[	70:19
INT	3	70:20
]	]	70:21
==	==	70:24
INT	3	70:26
KW_assert	assert	71:11
IDENT	result	71:18
[	[	71:19
INT	4	71:20
]	]	71:21
==	==	71:24
INT	4	71:26
KW_assert	assert	72:11
IDENT	result	72:18
[	[	72:19
INT	5	72:20
]	]	72:21
==	==	72:24
INT	5	72:26
KW_assert	assert	73:11
IDENT	result	73:18
[	[	73:19
INT	6	73:20
]	]	73:21
==	==	73:24
INT	6	73:26
}	}	74:2
KW_test	test	76:5
STRING	Array concatenation with mixed types	76:44
{	{	76:46
KW_var	var	77:8
IDENT	arr1	77:13
:=	:=	77:16
[	[	77:18
INT	1	77:19
,	,	77:20
STRING	hello	77:28
]	]	77:29
KW_var	var	78:8
IDENT	arr2	78:13
:=	:=	78:16
[	[	78:18
KW_true	true	78:22
,	,	78:23
REAL	3.14	78:28
]	]	78:29
KW_var	var	79:8
IDENT	result	79:15
:=	:=	79:18
IDENT	arr1	79:23
+	+	79:25
IDENT	arr2	79:30
KW_assert	assert	80:11
IDENT	result	80:18
[	[	80:19
INT	1	80:20
]	]	80:21
==	==	80:24
INT	1	80:26
KW_assert	assert	81:11
IDENT	result	81:18
[	[	81:19
INT	2	81:20
]	]	81:21
==	==	81:24
STRING	hello	81:32
KW_assert	assert	82:11
IDENT	result	82:18
[	[	82:19
INT	3	82:20
]	]	82:21
==	==	82:24
KW_true	true	82:29
KW_assert	assert	83:11
IDENT	result	83:18
[	[	83:19
INT	4	83:20
]	]	83:21
==	==	83:24
REAL	3.14	83:29
}	}	84:2
KW_test	test	86:5
STRING	Array concatenation with empty arrays	86:45
{	{	86:47
KW_var	var	87:8
IDENT	arr1	87:13
:=	:=	87:16
[	[	87:18
INT	1	87:19
,	,	87:20
INT	2	87:22
]	]	87:23
KW_var	var	88:8
IDENT	empty	88:14
:=	:=	88:17
[	[	88:19
]	]	88:20
KW_var	var	89:8
IDENT	result1	89:16
:=	:=	89:19
IDENT	arr1	89:24
+	+	89:26
IDENT	empty	89:32
KW_var	var	90:8
IDENT	result2	90:16
:=	:=	90:19
IDENT	empty	90:25
+	+	90:27
IDENT	arr1	90:32
KW_assert	assert	91:11
IDENT	result1	91:19
[	[	91:20
INT	1	91:21
]	]	91:22
==	==	91:25
INT	1	91:27
KW_assert	assert	92:11
IDENT	result1	92:19
[	[	92:20
INT	2	92:21
]	]	92:22
==	==	92:25
INT	2	92:27
KW_assert	assert	93:11
IDENT	result2	93:19
[	[	93:20
INT	1	93:21
]	]	93:22
==	==	93:25
INT	1	93:27
KW_assert	assert	94:11
IDENT	result2	94:19
[	[	94:20
INT	2	94:21
]	]	94:22
==	==	94:25
INT	2	94:27
}	}	95:2
KW_test	test	97:5
STRING	Array in expressions	97:28
{	{	97:30
KW_var	var	98:8
IDENT	arr	98:12
:=	:=	98:15
[	[	98:17
INT	10	98:19
,	,	98:20
INT	20	98:23
,	,	98:24
INT	30	98:27
]	]	98:28
KW_var	var	99:8
IDENT	result	99:15
:=	:=	99:18
IDENT	arr	99:22
[	[	99:23
INT	1	99:24
]	]	99:25
+	+	99:27
IDENT	arr	99:31
[	[	99:32
INT	2	99:33
]	]	99:34
+	+	99:36
IDENT	arr	99:40
[	[	99:41
INT	3	99:42
]	]	99:43
KW_assert	assert	100:11
IDENT	result	100:18
==	==	100:21
INT	60	100:24
}	}	101:2
KW_test	test	103:5
STRING	Nested array access	103:27
{	{	103:29
KW_var	var	104:8
IDENT	matrix	104:15
:=	:=	104:18
[	[	104:20
[	[	104:21
INT	1	104:22
,	,	104:23
INT	2	104:25
]	]	104:26
,	,	104:27
[	[	104:29
INT	3	104:30
,	,	104:31
INT	4	104:33
]	]	104:34
,	,	104:35
[	[	104:37
INT	5	104:38
,	,	104:39
INT	6	104:41
]	]	104:42
]	]	104:43
KW_assert	assert	105:11
IDENT	matrix	105:18
[	[	105:19
INT	1	105:20
]	]	105:21
[	[	105:22
INT	1	105:23
]	]	105:24
==	==	105:27
INT	1	105:29
KW_assert	assert	106:11
IDENT	matrix	106:18
[	[	106:19
INT	1	106:20
]	]	106:21
[	[	106:22
INT	2	106:23
]	]	106:24
==	==	106:27
INT	2	106:29
KW_assert	assert	107:11
IDENT	matrix	107:18
[	[	107:19
INT	2	107:20
]	]	107:21
[	[	107:22
INT	1	107:23
]	]	107:24
==	==	107:27
INT	3	107:29
KW_assert	assert	108:11
IDENT	matrix	108:18
[	[	108:19
INT	2	108:20
]	]	108:21
[	[	108:22
INT	2	108:23
]	]	108:24
==	==	108:27
INT	4	108:29
KW_assert	assert	109:11
IDENT	matrix	109:18
[	[	109:19
INT	3	109:20
]	]	109:21
[	[	109:22
INT	1	109:23
]	]	109:24
==	==	109:27
INT	5	109:29
KW_assert	assert	110:11
IDENT	matrix	110:18
[	[	110:19
INT	3	110:20
]	]	110:21
[	[	110:22
INT	2	110:23
]	]	110:24
==	==	110:27
INT	6	110:29
}	}	111:2
KW_test	test	113:5
STRING	Array modification in loop	113:34
{	{	113:36
KW_var	var	114:8
IDENT	arr	114:12
:=	:=	114:15
[	[	114:17
INT	0	114:18
,	,	114:19
INT	0	114:21
,	,	114:22
INT	0	114:24
,	,	114:25
INT	0	114:27
,	,	114:28
INT	0	114:30
]	]	114:31
KW_for	for	115:8
IDENT	i	115:10
KW_in	in	115:13
INT	1	115:15
.	.	115:16
.	.	115:17
INT	5	115:18
KW_loop	loop	115:23
IDENT	arr	116:12
[	[	116:13
IDENT	i	116:14
]	]	116:15
:=	:=	116:18
IDENT	i	116:20
*	*	116:22
INT	10	116:25
KW_end	end	117:8
KW_assert	assert	118:11
IDENT	arr	118:15
[	[	118:16
INT	1	118:17
]	]	118:18
==	==	118:21
INT	10	118:24
KW_assert	assert	119:11
IDENT	arr	119:15
[	[	119:16
INT	2	119:17
]	]	119:18
==	==	119:21
INT	20	119:24
KW_assert	assert	120:11
IDENT	arr	120:15
[	[	120:16
INT	3	120:17
]	]	120:18
==	==	120:21
INT	30	120:24
KW_assert	assert	121:11
IDENT	arr	121:15
[	[	121:16
INT	4	121:17
]	]	121:18
==	==	121:21
INT	40	121:24
KW_assert	assert	122:11
IDENT	arr	122:15
[	[	122:16
INT	5	122:17
]	]	122:18
==	==	122:21
INT	50	122:24
}	}	123:2
EOF		124:1
KW_test	test	4:5
STRING	Print single value	4:26
{	{	4:28
KW_var	var	5:8
IDENT	x	5:10
:=	:=	5:13
INT	42	5:16
KW_print	print	6:10
IDENT	x	6:12
}	}	8:2
KW_test	test	10:5
STRING	Print multiple values	10:29
{	{	10:31
KW_var	var	11:8
IDENT	a	11:10
:=	:=	11:13
INT	1	11:15
,	,	11:16
IDENT	b	11:18
:=	:=	11:21
REAL	2.5	11:25
,	,	11:26
IDENT	c	11:28
:=	:=	11:31
STRING	test	11:38
KW_print	print	12:10
IDENT	a	12:12
,	,	12:13
IDENT	b	12:15
,	,	12:16
IDENT	c	12:18
}	}	14:2
KW_test	test	16:5
STRING	Print boolean values	16:28
{	{	16:30
KW_var	var	17:8
IDENT	t	17:10
:=	:=	17:13
KW_true	true	17:18
,	,	17:19
IDENT	f	17:21
:=	:=	17:24
KW_false	false	17:30
KW_print	print	18:10
IDENT	t	18:12
,	,	18:13
IDENT	f	18:15
}	}	20:2
KW_test	test	22:5
STRING	Print none value	22:24
{	{	22:26
KW_var	var	23:8
IDENT	n	23:10
:=	:=	23:13
KW_none	none	23:18
KW_print	print	24:10
IDENT	n	24:12
}	}	26:2
KW_test	test	28:5
STRING	Print expressions	28:25
{	{	28:27
KW_var	var	29:8
IDENT	x	29:10
:=	:=	29:13
INT	10	29:16
,	,	29:17
IDENT	y	29:19
:=	:=	29:22
INT	20	29:25
KW_print	print	30:10
IDENT	x	30:12
+	+	30:14
IDENT	y	30:16
,	,	30:17
IDENT	x	30:19
*	*	30:21
INT	2	30:23
}	}	32:2
KW_test	test	34:5
STRING	Print in loop	34:21
{	{	34:23
KW_for	for	35:8
IDENT	i	35:10
KW_in	in	35:13
INT	1	35:15
.	.	35:16
.	.	35:17
INT	3	35:18
KW_loop	loop	35:23
KW_print	print	36:14
STRING	Iteration:	36:27
,	,	36:28
IDENT	i	36:30
KW_end	end	37:8
}	}	42:2
EOF		43:1
KW_test	test	4:5
STRING	Integer literals	4:24
{	{	4:26
KW_var	var	5:8
IDENT	i1	5:11
:=	:=	5:14
INT	0	5:16
KW_var	var	6:8
IDENT	i2	6:11
:=	:=	6:14
INT	42	6:17
KW_var	var	7:8
IDENT	i3	7:11
:=	:=	7:14
-	-	7:16
INT	123	7:19
KW_assert	assert	8:11
IDENT	i1	8:14
==	==	8:17
INT	0	8:19
KW_assert	assert	9:11
IDENT	i2	9:14
==	==	9:17
INT	42	9:20
KW_assert	assert	10:11
IDENT	i3	10:14
==	==	10:17
-	-	10:19
INT	123	10:22
KW_assert	assert	11:11
IDENT	i1	11:14
KW_is	is	11:17
KW_int	int	11:21
KW_assert	assert	12:11
IDENT	i2	12:14
KW_is	is	12:17
KW_int	int	12:21
KW_assert	assert	13:11
IDENT	i3	13:14
KW_is	is	13:17
KW_int	int	13:21
}	}	14:2
KW_test	test	16:5
STRING	Real literals	16:21
{	{	16:23
KW_var	var	17:8
IDENT	r1	17:11
:=	:=	17:14
REAL	3.14	17:19
KW_var	var	18:8
IDENT	r2	18:11
:=	:=	18:14
-	-	18:16
REAL	2.5	18:19
KW_var	var	19:8
IDENT	r3	19:11
:=	:=	19:14
REAL	0.0	19:18
KW_var	var	20:8
IDENT	r4	20:11
:=	:=	20:14
REAL	100.0	20:20
KW_assert	assert	21:11
IDENT	r1	21:14
==	==	21:17
REAL	3.14	21:22
KW_assert	assert	22:11
IDENT	r2	22:14
==	==	22:17
-	-	22:19
REAL	2.5	22:22
KW_assert	assert	23:11
IDENT	r3	23:14
==	==	23:17
REAL	0.0	23:21
KW_assert	assert	24:11
IDENT	r4	24:14
==	==	24:17
REAL	100.0	24:23
KW_assert	assert	25:11
IDENT	r1	25:14
KW_is	is	25:17
KW_real	real	25:22
KW_assert	assert	26:11
IDENT	r2	26:14
KW_is	is	26:17
KW_real	real	26:22
KW_assert	assert	27:11
IDENT	r3	27:14
KW_is	is	27:17
KW_real	real	27:22
KW_assert	assert	28:11
IDENT	r4	28:14
KW_is	is	28:17
KW_real	real	28:22
}	}	29:2
KW_test	test	31:5
STRING	Boolean literals	31:24
{	{	31:26
KW_var	var	32:8
IDENT	b1	32:11
:=	:=	32:14
KW_true	true	32:19
KW_var	var	33:8
IDENT	b2	33:11
:=	:=	33:14
KW_false	false	33:20
KW_assert	assert	34:11
IDENT	b1	34:14
==	==	34:17
KW_true	true	34:22
KW_assert	assert	35:11
IDENT	b2	35:14
==	==	35:17
KW_false	false	35:23
KW_assert	assert	36:11
IDENT	b1	36:14
KW_is	is	36:17
KW_bool	bool	36:22
KW_assert	assert	37:11
IDENT	b2	37:14
KW_is	is	37:17
KW_bool	bool	37:22
}	}	38:2
KW_test	test	40:5
STRING	String literals	40:23
{	{	40:25
KW_var	var	41:8
IDENT	s1	41:11
:=	:=	41:14
STRING	hello	41:22
KW_var	var	42:8
IDENT	s2	42:11
:=	:=	42:14
STRING	hello world	42:28
KW_var	var	43:8
IDENT	s3	43:11
:=	:=	43:14
STRING		43:17
KW_var	var	44:8
IDENT	s4	44:11
:=	:=	44:14
STRING	123	44:20
KW_assert	assert	45:11
IDENT	s1	45:14
==	==	45:17
STRING	hello	45:25
KW_assert	assert	46:11
IDENT	s2	46:14
==	==	46:17
STRING	hello world	46:31
KW_assert	assert	47:11
IDENT	s3	47:14
==	==	47:17
STRING		47:20
KW_assert	assert	48:11
IDENT	s4	48:14
==	==	48:17
STRING	123	48:23
KW_assert	assert	49:11
IDENT	s1	49:14
KW_is	is	49:17
KW_string	string	49:24
KW_assert	assert	50:11
IDENT	s2	50:14
KW_is	is	50:17
KW_string	string	50:24
KW_assert	assert	51:11
IDENT	s3	51:14
KW_is	is	51:17
KW_string	string	51:24
KW_assert	assert	52:11
IDENT	s4	52:14
KW_is	is	52:17
KW_string	string	52:24
}	}	53:2
EOF		54:1
