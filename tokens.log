KW_test	test	4:1
STRING	Integer literals	4:6
{	{	4:25
KW_var	var	5:5
IDENT	i1	5:9
:=	:=	5:12
INT	0	5:15
KW_var	var	6:5
IDENT	i2	6:9
:=	:=	6:12
INT	42	6:15
KW_var	var	7:5
IDENT	i3	7:9
:=	:=	7:12
-	-	7:15
INT	123	7:16
KW_assert	assert	8:5
IDENT	i1	8:12
==	==	8:15
INT	0	8:18
KW_assert	assert	9:5
IDENT	i2	9:12
==	==	9:15
INT	42	9:18
KW_assert	assert	10:5
IDENT	i3	10:12
==	==	10:15
-	-	10:18
INT	123	10:19
KW_assert	assert	11:5
IDENT	i1	11:12
KW_is	is	11:15
KW_int	int	11:18
KW_assert	assert	12:5
IDENT	i2	12:12
KW_is	is	12:15
KW_int	int	12:18
KW_assert	assert	13:5
IDENT	i3	13:12
KW_is	is	13:15
KW_int	int	13:18
}	}	14:1
KW_test	test	16:1
STRING	Real literals	16:6
{	{	16:22
KW_var	var	17:5
IDENT	r1	17:9
:=	:=	17:12
REAL	3.14	17:15
KW_var	var	18:5
IDENT	r2	18:9
:=	:=	18:12
-	-	18:15
REAL	2.5	18:16
KW_var	var	19:5
IDENT	r3	19:9
:=	:=	19:12
REAL	0.0	19:15
KW_var	var	20:5
IDENT	r4	20:9
:=	:=	20:12
REAL	100.0	20:15
KW_assert	assert	21:5
IDENT	r1	21:12
==	==	21:15
REAL	3.14	21:18
KW_assert	assert	22:5
IDENT	r2	22:12
==	==	22:15
-	-	22:18
REAL	2.5	22:19
KW_assert	assert	23:5
IDENT	r3	23:12
==	==	23:15
REAL	0.0	23:18
KW_assert	assert	24:5
IDENT	r4	24:12
==	==	24:15
REAL	100.0	24:18
KW_assert	assert	25:5
IDENT	r1	25:12
KW_is	is	25:15
KW_real	real	25:18
KW_assert	assert	26:5
IDENT	r2	26:12
KW_is	is	26:15
KW_real	real	26:18
KW_assert	assert	27:5
IDENT	r3	27:12
KW_is	is	27:15
KW_real	real	27:18
KW_assert	assert	28:5
IDENT	r4	28:12
KW_is	is	28:15
KW_real	real	28:18
}	}	29:1
KW_test	test	31:1
STRING	Boolean literals	31:6
{	{	31:25
KW_var	var	32:5
IDENT	b1	32:9
:=	:=	32:12
KW_true	true	32:15
KW_var	var	33:5
IDENT	b2	33:9
:=	:=	33:12
KW_false	false	33:15
KW_assert	assert	34:5
IDENT	b1	34:12
==	==	34:15
KW_true	true	34:18
KW_assert	assert	35:5
IDENT	b2	35:12
==	==	35:15
KW_false	false	35:18
KW_assert	assert	36:5
IDENT	b1	36:12
KW_is	is	36:15
KW_bool	bool	36:18
KW_assert	assert	37:5
IDENT	b2	37:12
KW_is	is	37:15
KW_bool	bool	37:18
}	}	38:1
KW_test	test	40:1
STRING	String literals	40:6
{	{	40:24
KW_var	var	41:5
IDENT	s1	41:9
:=	:=	41:12
STRING	hello	41:15
KW_var	var	42:5
IDENT	s2	42:9
:=	:=	42:12
STRING	hello world	42:15
KW_var	var	43:5
IDENT	s3	43:9
:=	:=	43:12
STRING		43:15
KW_var	var	44:5
IDENT	s4	44:9
:=	:=	44:12
STRING	123	44:15
KW_assert	assert	45:5
IDENT	s1	45:12
==	==	45:15
STRING	hello	45:18
KW_assert	assert	46:5
IDENT	s2	46:12
==	==	46:15
STRING	hello world	46:18
KW_assert	assert	47:5
IDENT	s3	47:12
==	==	47:15
STRING		47:18
KW_assert	assert	48:5
IDENT	s4	48:12
==	==	48:15
STRING	123	48:18
KW_assert	assert	49:5
IDENT	s1	49:12
KW_is	is	49:15
KW_string	string	49:18
KW_assert	assert	50:5
IDENT	s2	50:12
KW_is	is	50:15
KW_string	string	50:18
KW_assert	assert	51:5
IDENT	s3	51:12
KW_is	is	51:15
KW_string	string	51:18
KW_assert	assert	52:5
IDENT	s4	52:12
KW_is	is	52:15
KW_string	string	52:18
}	}	53:1
EOF		54:1
KW_test	test	4:1
STRING	Print single value	4:6
{	{	4:27
KW_var	var	5:5
IDENT	x	5:9
:=	:=	5:11
INT	42	5:14
KW_print	print	6:5
IDENT	x	6:11
}	}	8:1
KW_test	test	10:1
STRING	Print multiple values	10:6
{	{	10:30
KW_var	var	11:5
IDENT	a	11:9
:=	:=	11:11
INT	1	11:14
,	,	11:15
IDENT	b	11:17
:=	:=	11:19
REAL	2.5	11:22
,	,	11:25
IDENT	c	11:27
:=	:=	11:29
STRING	test	11:32
KW_print	print	12:5
IDENT	a	12:11
,	,	12:12
IDENT	b	12:14
,	,	12:15
IDENT	c	12:17
}	}	14:1
KW_test	test	16:1
STRING	Print boolean values	16:6
{	{	16:29
KW_var	var	17:5
IDENT	t	17:9
:=	:=	17:11
KW_true	true	17:14
,	,	17:18
IDENT	f	17:20
:=	:=	17:22
KW_false	false	17:25
KW_print	print	18:5
IDENT	t	18:11
,	,	18:12
IDENT	f	18:14
}	}	20:1
KW_test	test	22:1
STRING	Print none value	22:6
{	{	22:25
KW_var	var	23:5
IDENT	n	23:9
:=	:=	23:11
KW_none	none	23:14
KW_print	print	24:5
IDENT	n	24:11
}	}	26:1
KW_test	test	28:1
STRING	Print expressions	28:6
{	{	28:26
KW_var	var	29:5
IDENT	x	29:9
:=	:=	29:11
INT	10	29:14
,	,	29:16
IDENT	y	29:18
:=	:=	29:20
INT	20	29:23
KW_print	print	30:5
IDENT	x	30:11
+	+	30:13
IDENT	y	30:15
,	,	30:16
IDENT	x	30:18
*	*	30:20
INT	2	30:22
}	}	32:1
KW_test	test	34:1
STRING	Print in loop	34:6
{	{	34:22
KW_for	for	35:5
IDENT	i	35:9
KW_in	in	35:11
INT	1	35:14
.	.	35:15
.	.	35:16
INT	3	35:17
KW_loop	loop	35:19
KW_print	print	36:9
STRING	Iteration:	36:15
,	,	36:27
IDENT	i	36:29
KW_end	end	37:5
}	}	42:1
EOF		43:1
KW_test	test	4:1
STRING	Simple if-then statement	4:6
{	{	4:33
KW_var	var	5:5
IDENT	x	5:9
:=	:=	5:11
INT	0	5:14
KW_if	if	6:5
KW_true	true	6:8
KW_then	then	6:13
IDENT	x	7:9
:=	:=	7:11
INT	42	7:14
KW_end	end	8:5
KW_assert	assert	9:5
IDENT	x	9:12
==	==	9:14
INT	42	9:17
}	}	10:1
KW_test	test	12:1
STRING	If with else clause	12:6
{	{	12:28
KW_var	var	13:5
IDENT	x	13:9
:=	:=	13:11
INT	0	13:14
KW_var	var	14:5
IDENT	condition	14:9
:=	:=	14:19
KW_true	true	14:22
KW_if	if	15:5
IDENT	condition	15:8
KW_then	then	15:18
IDENT	x	16:9
:=	:=	16:11
INT	100	16:14
KW_else	else	17:5
IDENT	x	18:9
:=	:=	18:11
INT	200	18:14
KW_end	end	19:5
KW_assert	assert	20:5
IDENT	x	20:12
==	==	20:14
INT	100	20:17
IDENT	condition	22:5
:=	:=	22:15
KW_false	false	22:18
KW_if	if	23:5
IDENT	condition	23:8
KW_then	then	23:18
IDENT	x	24:9
:=	:=	24:11
INT	300	24:14
KW_else	else	25:5
IDENT	x	26:9
:=	:=	26:11
INT	400	26:14
KW_end	end	27:5
KW_assert	assert	28:5
IDENT	x	28:12
==	==	28:14
INT	400	28:17
}	}	29:1
KW_test	test	31:1
STRING	If with comparison condition	31:6
{	{	31:37
KW_var	var	32:5
IDENT	x	32:9
:=	:=	32:11
INT	0	32:14
KW_var	var	33:5
IDENT	y	33:9
:=	:=	33:11
INT	5	33:14
KW_if	if	34:5
IDENT	y	34:8
>	>	34:10
INT	3	34:12
KW_then	then	34:14
IDENT	x	35:9
:=	:=	35:11
INT	1	35:14
KW_end	end	36:5
KW_assert	assert	37:5
IDENT	x	37:12
==	==	37:14
INT	1	37:17
KW_if	if	39:5
IDENT	y	39:8
<	<	39:10
INT	3	39:12
KW_then	then	39:14
IDENT	x	40:9
:=	:=	40:11
INT	2	40:14
KW_end	end	41:5
KW_assert	assert	42:5
IDENT	x	42:12
==	==	42:14
INT	1	42:17
}	}	43:1
KW_test	test	45:1
STRING	If-short form (=>)	45:6
{	{	45:27
KW_var	var	46:5
IDENT	x	46:9
:=	:=	46:11
INT	0	46:14
KW_if	if	47:5
INT	5	47:8
>	>	47:10
INT	3	47:12
=>	=>	47:14
IDENT	x	47:17
:=	:=	47:19
INT	25	47:22
KW_assert	assert	48:5
IDENT	x	48:12
==	==	48:14
INT	25	48:17
KW_if	if	50:5
INT	3	50:8
>	>	50:10
INT	5	50:12
=>	=>	50:14
IDENT	x	50:17
:=	:=	50:19
INT	50	50:22
KW_assert	assert	51:5
IDENT	x	51:12
==	==	51:14
INT	25	51:17
}	}	52:1
KW_test	test	54:1
STRING	Variable scope in if blocks	54:6
{	{	54:36
KW_var	var	55:5
IDENT	outer	55:9
:=	:=	55:15
INT	100	55:18
KW_if	if	56:5
KW_true	true	56:8
KW_then	then	56:13
KW_var	var	57:9
IDENT	inner	57:13
:=	:=	57:19
INT	200	57:22
KW_assert	assert	58:9
IDENT	outer	58:16
==	==	58:22
INT	100	58:25
KW_assert	assert	59:9
IDENT	inner	59:16
==	==	59:22
INT	200	59:25
KW_end	end	60:5
KW_assert	assert	61:5
IDENT	outer	61:12
==	==	61:18
INT	100	61:21
}	}	63:1
KW_test	test	65:1
STRING	Multiple statements in if block	65:6
{	{	65:40
KW_var	var	66:5
IDENT	a	66:9
:=	:=	66:11
INT	0	66:14
,	,	66:15
IDENT	b	66:17
:=	:=	66:19
INT	0	66:22
KW_if	if	67:5
KW_true	true	67:8
KW_then	then	67:13
IDENT	a	68:9
:=	:=	68:11
INT	10	68:14
IDENT	b	69:9
:=	:=	69:11
INT	20	69:14
KW_var	var	70:9
IDENT	temp	70:13
:=	:=	70:18
IDENT	a	70:21
+	+	70:23
IDENT	b	70:25
KW_assert	assert	71:9
IDENT	temp	71:16
==	==	71:21
INT	30	71:24
KW_end	end	72:5
KW_assert	assert	73:5
IDENT	a	73:12
==	==	73:14
INT	10	73:17
KW_assert	assert	74:5
IDENT	b	74:12
==	==	74:14
INT	20	74:17
}	}	75:1
EOF		76:1
KW_test	test	4:1
STRING	Simple while loop	4:6
{	{	4:26
KW_var	var	5:5
IDENT	counter	5:9
:=	:=	5:17
INT	0	5:20
KW_var	var	6:5
IDENT	sum	6:9
:=	:=	6:13
INT	0	6:16
KW_while	while	7:5
IDENT	counter	7:11
<	<	7:19
INT	5	7:21
KW_loop	loop	7:23
IDENT	sum	8:9
:=	:=	8:13
IDENT	sum	8:16
+	+	8:20
IDENT	counter	8:22
IDENT	counter	9:9
:=	:=	9:17
IDENT	counter	9:20
+	+	9:28
INT	1	9:30
KW_end	end	10:5
KW_assert	assert	11:5
IDENT	sum	11:12
==	==	11:16
INT	10	11:19
KW_assert	assert	12:5
IDENT	counter	12:12
==	==	12:20
INT	5	12:23
}	}	13:1
KW_test	test	15:1
STRING	While loop with false condition initially	15:6
{	{	15:50
KW_var	var	16:5
IDENT	x	16:9
:=	:=	16:11
INT	0	16:14
KW_while	while	17:5
KW_false	false	17:11
KW_loop	loop	17:17
IDENT	x	18:9
:=	:=	18:11
INT	99	18:14
KW_end	end	19:5
KW_assert	assert	20:5
IDENT	x	20:12
==	==	20:14
INT	0	20:17
}	}	21:1
KW_test	test	23:1
STRING	While loop with complex condition	23:6
{	{	23:42
KW_var	var	24:5
IDENT	x	24:9
:=	:=	24:11
INT	10	24:14
KW_var	var	25:5
IDENT	count	25:9
:=	:=	25:15
INT	0	25:18
KW_while	while	26:5
IDENT	x	26:11
>	>	26:13
INT	0	26:15
KW_and	and	26:17
IDENT	count	26:21
<	<	26:27
INT	3	26:29
KW_loop	loop	26:31
IDENT	x	27:9
:=	:=	27:11
IDENT	x	27:14
-	-	27:16
INT	2	27:18
IDENT	count	28:9
:=	:=	28:15
IDENT	count	28:18
+	+	28:24
INT	1	28:26
KW_end	end	29:5
KW_assert	assert	30:5
IDENT	x	30:12
==	==	30:14
INT	4	30:17
KW_assert	assert	31:5
IDENT	count	31:12
==	==	31:18
INT	3	31:21
}	}	32:1
KW_test	test	34:1
STRING	Infinite loop with exit	34:6
{	{	34:32
KW_var	var	35:5
IDENT	sum	35:9
:=	:=	35:13
INT	0	35:16
KW_var	var	36:5
IDENT	i	36:9
:=	:=	36:11
INT	1	36:14
KW_loop	loop	37:5
IDENT	sum	38:9
:=	:=	38:13
IDENT	sum	38:16
+	+	38:20
IDENT	i	38:22
IDENT	i	39:9
:=	:=	39:11
IDENT	i	39:14
+	+	39:16
INT	1	39:18
KW_if	if	40:9
IDENT	i	40:12
>	>	40:14
INT	10	40:16
=>	=>	40:19
KW_exit	exit	40:22
KW_end	end	41:5
KW_assert	assert	42:5
IDENT	sum	42:12
==	==	42:16
INT	55	42:19
KW_assert	assert	43:5
IDENT	i	43:12
==	==	43:14
INT	11	43:17
}	}	44:1
KW_test	test	46:1
STRING	For loop with range	46:6
{	{	46:28
KW_var	var	47:5
IDENT	sum	47:9
:=	:=	47:13
INT	0	47:16
KW_for	for	48:5
IDENT	i	48:9
KW_in	in	48:11
INT	1	48:14
.	.	48:15
.	.	48:16
INT	5	48:17
KW_loop	loop	48:19
IDENT	sum	49:9
:=	:=	49:13
IDENT	sum	49:16
+	+	49:20
IDENT	i	49:22
KW_end	end	50:5
KW_assert	assert	51:5
IDENT	sum	51:12
==	==	51:16
INT	15	51:19
}	}	52:1
KW_test	test	54:1
STRING	For loop with range and variable	54:6
{	{	54:41
KW_var	var	55:5
IDENT	result	55:9
:=	:=	55:16
INT	1	55:19
KW_for	for	56:5
IDENT	i	56:9
KW_in	in	56:11
INT	1	56:14
.	.	56:15
.	.	56:16
INT	4	56:17
KW_loop	loop	56:19
IDENT	result	57:9
:=	:=	57:16
IDENT	result	57:19
*	*	57:26
INT	2	57:28
KW_end	end	58:5
KW_assert	assert	59:5
IDENT	result	59:12
==	==	59:19
INT	16	59:22
}	}	60:1
KW_test	test	62:1
STRING	For loop iterating over array	62:6
{	{	62:38
KW_var	var	63:5
IDENT	arr	63:9
:=	:=	63:13
[	[	63:16
INT	10	63:17
,	,	63:19
INT	20	63:21
,	,	63:23
INT	30	63:25
,	,	63:27
INT	40	63:29
]	]	63:31
KW_var	var	64:5
IDENT	sum	64:9
:=	:=	64:13
INT	0	64:16
KW_for	for	65:5
IDENT	value	65:9
KW_in	in	65:15
IDENT	arr	65:18
KW_loop	loop	65:22
IDENT	sum	66:9
:=	:=	66:13
IDENT	sum	66:16
+	+	66:20
IDENT	value	66:22
KW_end	end	67:5
KW_assert	assert	68:5
IDENT	sum	68:12
==	==	68:16
INT	100	68:19
}	}	69:1
KW_test	test	71:1
STRING	For loop iterating over array with index variable	71:6
{	{	71:58
KW_var	var	72:5
IDENT	arr	72:9
:=	:=	72:13
[	[	72:16
INT	2	72:17
,	,	72:18
INT	4	72:20
,	,	72:21
INT	6	72:23
,	,	72:24
INT	8	72:26
]	]	72:27
KW_var	var	73:5
IDENT	sum	73:9
:=	:=	73:13
INT	0	73:16
KW_for	for	74:5
IDENT	i	74:9
KW_in	in	74:11
IDENT	arr	74:14
KW_loop	loop	74:18
IDENT	sum	75:9
:=	:=	75:13
IDENT	sum	75:16
+	+	75:20
IDENT	i	75:22
KW_end	end	76:5
KW_assert	assert	77:5
IDENT	sum	77:12
==	==	77:16
INT	20	77:19
}	}	78:1
KW_test	test	80:1
STRING	Nested loops	80:6
{	{	80:21
KW_var	var	81:5
IDENT	result	81:9
:=	:=	81:16
INT	0	81:19
KW_for	for	82:5
IDENT	i	82:9
KW_in	in	82:11
INT	1	82:14
.	.	82:15
.	.	82:16
INT	3	82:17
KW_loop	loop	82:19
KW_for	for	83:9
IDENT	j	83:13
KW_in	in	83:15
INT	1	83:18
.	.	83:19
.	.	83:20
INT	2	83:21
KW_loop	loop	83:23
IDENT	result	84:13
:=	:=	84:20
IDENT	result	84:23
+	+	84:30
INT	1	84:32
KW_end	end	85:9
KW_end	end	86:5
KW_assert	assert	87:5
IDENT	result	87:12
==	==	87:19
INT	6	87:22
}	}	88:1
KW_test	test	90:1
STRING	Loop with break (exit) in nested structure	90:6
{	{	90:51
KW_var	var	91:5
IDENT	outer_count	91:9
:=	:=	91:21
INT	0	91:24
KW_var	var	92:5
IDENT	inner_count	92:9
:=	:=	92:21
INT	0	92:24
KW_for	for	93:5
IDENT	i	93:9
KW_in	in	93:11
INT	1	93:14
.	.	93:15
.	.	93:16
INT	5	93:17
KW_loop	loop	93:19
IDENT	outer_count	94:9
:=	:=	94:21
IDENT	outer_count	94:24
+	+	94:36
INT	1	94:38
KW_for	for	95:9
IDENT	j	95:13
KW_in	in	95:15
INT	1	95:18
.	.	95:19
.	.	95:20
INT	5	95:21
KW_loop	loop	95:23
IDENT	inner_count	96:13
:=	:=	96:25
IDENT	inner_count	96:28
+	+	96:40
INT	1	96:42
KW_if	if	97:13
IDENT	inner_count	97:16
>=	>=	97:28
INT	3	97:31
=>	=>	97:33
KW_exit	exit	97:36
KW_end	end	98:9
KW_end	end	99:5
KW_assert	assert	100:5
IDENT	outer_count	100:12
==	==	100:24
INT	5	100:27
KW_assert	assert	101:5
IDENT	inner_count	101:12
==	==	101:24
INT	3	101:27
}	}	102:1
KW_test	test	104:1
STRING	Loop with variable scope	104:6
{	{	104:33
KW_var	var	105:5
IDENT	sum	105:9
:=	:=	105:13
INT	0	105:16
KW_for	for	106:5
IDENT	i	106:9
KW_in	in	106:11
INT	1	106:14
.	.	106:15
.	.	106:16
INT	3	106:17
KW_loop	loop	106:19
KW_var	var	107:9
IDENT	temp	107:13
:=	:=	107:18
IDENT	i	107:21
*	*	107:23
INT	2	107:25
IDENT	sum	108:9
:=	:=	108:13
IDENT	sum	108:16
+	+	108:20
IDENT	temp	108:22
KW_end	end	109:5
KW_assert	assert	110:5
IDENT	sum	110:12
==	==	110:16
INT	12	110:19
}	}	112:1
KW_test	test	114:1
STRING	Multiple exit conditions	114:6
{	{	114:33
KW_var	var	115:5
IDENT	count	115:9
:=	:=	115:15
INT	0	115:18
KW_var	var	116:5
IDENT	sum	116:9
:=	:=	116:13
INT	0	116:16
KW_loop	loop	117:5
IDENT	count	118:9
:=	:=	118:15
IDENT	count	118:18
+	+	118:24
INT	1	118:26
IDENT	sum	119:9
:=	:=	119:13
IDENT	sum	119:16
+	+	119:20
IDENT	count	119:22
KW_if	if	120:9
IDENT	count	120:12
>=	>=	120:18
INT	10	120:21
=>	=>	120:24
KW_exit	exit	120:27
KW_if	if	121:9
IDENT	sum	121:12
>	>	121:16
INT	50	121:18
=>	=>	121:21
KW_exit	exit	121:24
KW_end	end	122:5
KW_assert	assert	123:5
IDENT	count	123:12
==	==	123:18
INT	10	123:21
KW_assert	assert	124:5
IDENT	sum	124:12
==	==	124:16
INT	55	124:19
}	}	125:1
EOF		126:1
KW_test	test	4:1
STRING	Empty array creation	4:6
{	{	4:29
KW_var	var	5:5
IDENT	arr	5:9
:=	:=	5:13
[	[	5:16
]	]	5:17
KW_assert	assert	6:5
IDENT	arr	6:12
KW_is	is	6:16
[	[	6:19
]	]	6:20
}	}	8:1
KW_test	test	10:1
STRING	Array with single element	10:6
{	{	10:34
KW_var	var	11:5
IDENT	arr	11:9
:=	:=	11:13
[	[	11:16
INT	42	11:17
]	]	11:19
KW_assert	assert	12:5
IDENT	arr	12:12
[	[	12:15
INT	1	12:16
]	]	12:17
==	==	12:19
INT	42	12:22
KW_assert	assert	13:5
IDENT	arr	13:12
[	[	13:15
INT	1	13:16
]	]	13:17
KW_is	is	13:19
KW_int	int	13:22
}	}	14:1
KW_test	test	16:1
STRING	Array with multiple elements	16:6
{	{	16:37
KW_var	var	17:5
IDENT	arr	17:9
:=	:=	17:13
[	[	17:16
INT	1	17:17
,	,	17:18
INT	2	17:20
,	,	17:21
INT	3	17:23
,	,	17:24
INT	4	17:26
,	,	17:27
INT	5	17:29
]	]	17:30
KW_assert	assert	18:5
IDENT	arr	18:12
[	[	18:15
INT	1	18:16
]	]	18:17
==	==	18:19
INT	1	18:22
KW_assert	assert	19:5
IDENT	arr	19:12
[	[	19:15
INT	2	19:16
]	]	19:17
==	==	19:19
INT	2	19:22
KW_assert	assert	20:5
IDENT	arr	20:12
[	[	20:15
INT	3	20:16
]	]	20:17
==	==	20:19
INT	3	20:22
KW_assert	assert	21:5
IDENT	arr	21:12
[	[	21:15
INT	4	21:16
]	]	21:17
==	==	21:19
INT	4	21:22
KW_assert	assert	22:5
IDENT	arr	22:12
[	[	22:15
INT	5	22:16
]	]	22:17
==	==	22:19
INT	5	22:22
}	}	23:1
KW_test	test	25:1
STRING	Array with mixed types	25:6
{	{	25:31
KW_var	var	26:5
IDENT	arr	26:9
:=	:=	26:13
[	[	26:16
INT	1	26:17
,	,	26:18
REAL	2.5	26:20
,	,	26:23
STRING	hello	26:25
,	,	26:32
KW_true	true	26:34
,	,	26:38
KW_none	none	26:40
]	]	26:44
KW_assert	assert	27:5
IDENT	arr	27:12
[	[	27:15
INT	1	27:16
]	]	27:17
==	==	27:19
INT	1	27:22
KW_assert	assert	28:5
IDENT	arr	28:12
[	[	28:15
INT	2	28:16
]	]	28:17
==	==	28:19
REAL	2.5	28:22
KW_assert	assert	29:5
IDENT	arr	29:12
[	[	29:15
INT	3	29:16
]	]	29:17
==	==	29:19
STRING	hello	29:22
KW_assert	assert	30:5
IDENT	arr	30:12
[	[	30:15
INT	4	30:16
]	]	30:17
==	==	30:19
KW_true	true	30:22
KW_assert	assert	31:5
IDENT	arr	31:12
[	[	31:15
INT	5	31:16
]	]	31:17
KW_is	is	31:19
KW_none	none	31:22
}	}	32:1
KW_test	test	34:1
STRING	Array element assignment	34:6
{	{	34:33
KW_var	var	35:5
IDENT	arr	35:9
:=	:=	35:13
[	[	35:16
INT	0	35:17
,	,	35:18
INT	0	35:20
,	,	35:21
INT	0	35:23
]	]	35:24
IDENT	arr	36:5
[	[	36:8
INT	1	36:9
]	]	36:10
:=	:=	36:12
INT	10	36:15
IDENT	arr	37:5
[	[	37:8
INT	2	37:9
]	]	37:10
:=	:=	37:12
INT	20	37:15
IDENT	arr	38:5
[	[	38:8
INT	3	38:9
]	]	38:10
:=	:=	38:12
INT	30	38:15
KW_assert	assert	39:5
IDENT	arr	39:12
[	[	39:15
INT	1	39:16
]	]	39:17
==	==	39:19
INT	10	39:22
KW_assert	assert	40:5
IDENT	arr	40:12
[	[	40:15
INT	2	40:16
]	]	40:17
==	==	40:19
INT	20	40:22
KW_assert	assert	41:5
IDENT	arr	41:12
[	[	41:15
INT	3	41:16
]	]	41:17
==	==	41:19
INT	30	41:22
}	}	42:1
KW_test	test	44:1
STRING	Array with non-consecutive indices	44:6
{	{	44:43
KW_var	var	45:5
IDENT	arr	45:9
:=	:=	45:13
[	[	45:16
]	]	45:17
IDENT	arr	46:5
[	[	46:8
INT	10	46:9
]	]	46:11
:=	:=	46:13
INT	100	46:16
IDENT	arr	47:5
[	[	47:8
INT	50	47:9
]	]	47:11
:=	:=	47:13
INT	500	47:16
IDENT	arr	48:5
[	[	48:8
INT	1000	48:9
]	]	48:13
:=	:=	48:15
INT	10000	48:18
KW_assert	assert	49:5
IDENT	arr	49:12
[	[	49:15
INT	10	49:16
]	]	49:18
==	==	49:20
INT	100	49:23
KW_assert	assert	50:5
IDENT	arr	50:12
[	[	50:15
INT	50	50:16
]	]	50:18
==	==	50:20
INT	500	50:23
KW_assert	assert	51:5
IDENT	arr	51:12
[	[	51:15
INT	1000	51:16
]	]	51:20
==	==	51:22
INT	10000	51:25
}	}	52:1
KW_test	test	54:1
STRING	Array element reassignment	54:6
{	{	54:35
KW_var	var	55:5
IDENT	arr	55:9
:=	:=	55:13
[	[	55:16
INT	1	55:17
,	,	55:18
INT	2	55:20
,	,	55:21
INT	3	55:23
]	]	55:24
IDENT	arr	56:5
[	[	56:8
INT	2	56:9
]	]	56:10
:=	:=	56:12
STRING	changed	56:15
KW_assert	assert	57:5
IDENT	arr	57:12
[	[	57:15
INT	2	57:16
]	]	57:17
==	==	57:19
STRING	changed	57:22
KW_assert	assert	58:5
IDENT	arr	58:12
[	[	58:15
INT	2	58:16
]	]	58:17
KW_is	is	58:19
KW_string	string	58:22
IDENT	arr	59:5
[	[	59:8
INT	2	59:9
]	]	59:10
:=	:=	59:12
REAL	42.5	59:15
KW_assert	assert	60:5
IDENT	arr	60:12
[	[	60:15
INT	2	60:16
]	]	60:17
==	==	60:19
REAL	42.5	60:22
KW_assert	assert	61:5
IDENT	arr	61:12
[	[	61:15
INT	2	61:16
]	]	61:17
KW_is	is	61:19
KW_real	real	61:22
}	}	62:1
KW_test	test	64:1
STRING	Array concatenation	64:6
{	{	64:28
KW_var	var	65:5
IDENT	arr1	65:9
:=	:=	65:14
[	[	65:17
INT	1	65:18
,	,	65:19
INT	2	65:21
,	,	65:22
INT	3	65:24
]	]	65:25
KW_var	var	66:5
IDENT	arr2	66:9
:=	:=	66:14
[	[	66:17
INT	4	66:18
,	,	66:19
INT	5	66:21
,	,	66:22
INT	6	66:24
]	]	66:25
KW_var	var	67:5
IDENT	result	67:9
:=	:=	67:16
IDENT	arr1	67:19
+	+	67:24
IDENT	arr2	67:26
KW_assert	assert	68:5
IDENT	result	68:12
[	[	68:18
INT	1	68:19
]	]	68:20
==	==	68:22
INT	1	68:25
KW_assert	assert	69:5
IDENT	result	69:12
[	[	69:18
INT	2	69:19
]	]	69:20
==	==	69:22
INT	2	69:25
KW_assert	assert	70:5
IDENT	result	70:12
[	[	70:18
INT	3	70:19
]	]	70:20
==	==	70:22
INT	3	70:25
KW_assert	assert	71:5
IDENT	result	71:12
[	[	71:18
INT	4	71:19
]	]	71:20
==	==	71:22
INT	4	71:25
KW_assert	assert	72:5
IDENT	result	72:12
[	[	72:18
INT	5	72:19
]	]	72:20
==	==	72:22
INT	5	72:25
KW_assert	assert	73:5
IDENT	result	73:12
[	[	73:18
INT	6	73:19
]	]	73:20
==	==	73:22
INT	6	73:25
}	}	74:1
KW_test	test	76:1
STRING	Array concatenation with mixed types	76:6
{	{	76:45
KW_var	var	77:5
IDENT	arr1	77:9
:=	:=	77:14
[	[	77:17
INT	1	77:18
,	,	77:19
STRING	hello	77:21
]	]	77:28
KW_var	var	78:5
IDENT	arr2	78:9
:=	:=	78:14
[	[	78:17
KW_true	true	78:18
,	,	78:22
REAL	3.14	78:24
]	]	78:28
KW_var	var	79:5
IDENT	result	79:9
:=	:=	79:16
IDENT	arr1	79:19
+	+	79:24
IDENT	arr2	79:26
KW_assert	assert	80:5
IDENT	result	80:12
[	[	80:18
INT	1	80:19
]	]	80:20
==	==	80:22
INT	1	80:25
KW_assert	assert	81:5
IDENT	result	81:12
[	[	81:18
INT	2	81:19
]	]	81:20
==	==	81:22
STRING	hello	81:25
KW_assert	assert	82:5
IDENT	result	82:12
[	[	82:18
INT	3	82:19
]	]	82:20
==	==	82:22
KW_true	true	82:25
KW_assert	assert	83:5
IDENT	result	83:12
[	[	83:18
INT	4	83:19
]	]	83:20
==	==	83:22
REAL	3.14	83:25
}	}	84:1
KW_test	test	86:1
STRING	Array concatenation with empty arrays	86:6
{	{	86:46
KW_var	var	87:5
IDENT	arr1	87:9
:=	:=	87:14
[	[	87:17
INT	1	87:18
,	,	87:19
INT	2	87:21
]	]	87:22
KW_var	var	88:5
IDENT	empty	88:9
:=	:=	88:15
[	[	88:18
]	]	88:19
KW_var	var	89:5
IDENT	result1	89:9
:=	:=	89:17
IDENT	arr1	89:20
+	+	89:25
IDENT	empty	89:27
KW_var	var	90:5
IDENT	result2	90:9
:=	:=	90:17
IDENT	empty	90:20
+	+	90:26
IDENT	arr1	90:28
KW_assert	assert	91:5
IDENT	result1	91:12
[	[	91:19
INT	1	91:20
]	]	91:21
==	==	91:23
INT	1	91:26
KW_assert	assert	92:5
IDENT	result1	92:12
[	[	92:19
INT	2	92:20
]	]	92:21
==	==	92:23
INT	2	92:26
KW_assert	assert	93:5
IDENT	result2	93:12
[	[	93:19
INT	1	93:20
]	]	93:21
==	==	93:23
INT	1	93:26
KW_assert	assert	94:5
IDENT	result2	94:12
[	[	94:19
INT	2	94:20
]	]	94:21
==	==	94:23
INT	2	94:26
}	}	95:1
KW_test	test	97:1
STRING	Array in expressions	97:6
{	{	97:29
KW_var	var	98:5
IDENT	arr	98:9
:=	:=	98:13
[	[	98:16
INT	10	98:17
,	,	98:19
INT	20	98:21
,	,	98:23
INT	30	98:25
]	]	98:27
KW_var	var	99:5
IDENT	result	99:9
:=	:=	99:16
IDENT	arr	99:19
[	[	99:22
INT	1	99:23
]	]	99:24
+	+	99:26
IDENT	arr	99:28
[	[	99:31
INT	2	99:32
]	]	99:33
+	+	99:35
IDENT	arr	99:37
[	[	99:40
INT	3	99:41
]	]	99:42
KW_assert	assert	100:5
IDENT	result	100:12
==	==	100:19
INT	60	100:22
}	}	101:1
KW_test	test	103:1
STRING	Nested array access	103:6
{	{	103:28
KW_var	var	104:5
IDENT	matrix	104:9
:=	:=	104:16
[	[	104:19
[	[	104:20
INT	1	104:21
,	,	104:22
INT	2	104:24
]	]	104:25
,	,	104:26
[	[	104:28
INT	3	104:29
,	,	104:30
INT	4	104:32
]	]	104:33
,	,	104:34
[	[	104:36
INT	5	104:37
,	,	104:38
INT	6	104:40
]	]	104:41
]	]	104:42
KW_assert	assert	105:5
IDENT	matrix	105:12
[	[	105:18
INT	1	105:19
]	]	105:20
[	[	105:21
INT	1	105:22
]	]	105:23
==	==	105:25
INT	1	105:28
KW_assert	assert	106:5
IDENT	matrix	106:12
[	[	106:18
INT	1	106:19
]	]	106:20
[	[	106:21
INT	2	106:22
]	]	106:23
==	==	106:25
INT	2	106:28
KW_assert	assert	107:5
IDENT	matrix	107:12
[	[	107:18
INT	2	107:19
]	]	107:20
[	[	107:21
INT	1	107:22
]	]	107:23
==	==	107:25
INT	3	107:28
KW_assert	assert	108:5
IDENT	matrix	108:12
[	[	108:18
INT	2	108:19
]	]	108:20
[	[	108:21
INT	2	108:22
]	]	108:23
==	==	108:25
INT	4	108:28
KW_assert	assert	109:5
IDENT	matrix	109:12
[	[	109:18
INT	3	109:19
]	]	109:20
[	[	109:21
INT	1	109:22
]	]	109:23
==	==	109:25
INT	5	109:28
KW_assert	assert	110:5
IDENT	matrix	110:12
[	[	110:18
INT	3	110:19
]	]	110:20
[	[	110:21
INT	2	110:22
]	]	110:23
==	==	110:25
INT	6	110:28
}	}	111:1
KW_test	test	113:1
STRING	Array modification in loop	113:6
{	{	113:35
KW_var	var	114:5
IDENT	arr	114:9
:=	:=	114:13
[	[	114:16
INT	0	114:17
,	,	114:18
INT	0	114:20
,	,	114:21
INT	0	114:23
,	,	114:24
INT	0	114:26
,	,	114:27
INT	0	114:29
]	]	114:30
KW_for	for	115:5
IDENT	i	115:9
KW_in	in	115:11
INT	1	115:14
.	.	115:15
.	.	115:16
INT	5	115:17
KW_loop	loop	115:19
IDENT	arr	116:9
[	[	116:12
IDENT	i	116:13
]	]	116:14
:=	:=	116:16
IDENT	i	116:19
*	*	116:21
INT	10	116:23
KW_end	end	117:5
KW_assert	assert	118:5
IDENT	arr	118:12
[	[	118:15
INT	1	118:16
]	]	118:17
==	==	118:19
INT	10	118:22
KW_assert	assert	119:5
IDENT	arr	119:12
[	[	119:15
INT	2	119:16
]	]	119:17
==	==	119:19
INT	20	119:22
KW_assert	assert	120:5
IDENT	arr	120:12
[	[	120:15
INT	3	120:16
]	]	120:17
==	==	120:19
INT	30	120:22
KW_assert	assert	121:5
IDENT	arr	121:12
[	[	121:15
INT	4	121:16
]	]	121:17
==	==	121:19
INT	40	121:22
KW_assert	assert	122:5
IDENT	arr	122:12
[	[	122:15
INT	5	122:16
]	]	122:17
==	==	122:19
INT	50	122:22
}	}	123:1
EOF		124:1
KW_test	test	4:1
STRING	Simple tuple creation	4:6
{	{	4:30
KW_var	var	5:5
IDENT	person	5:9
:=	:=	5:16
{	{	5:19
IDENT	name	5:20
:=	:=	5:25
STRING	John	5:28
,	,	5:34
IDENT	age	5:36
:=	:=	5:40
INT	25	5:43
}	}	5:45
KW_assert	assert	6:5
IDENT	person	6:12
.	.	6:18
IDENT	name	6:19
==	==	6:24
STRING	John	6:27
KW_assert	assert	7:5
IDENT	person	7:12
.	.	7:18
IDENT	age	7:19
==	==	7:23
INT	25	7:26
}	}	8:1
KW_test	test	10:1
STRING	Tuple with mixed types	10:6
{	{	10:31
KW_var	var	11:5
IDENT	data	11:9
:=	:=	11:14
{	{	11:17
IDENT	id	11:18
:=	:=	11:21
INT	1	11:24
,	,	11:25
IDENT	value	11:27
:=	:=	11:33
REAL	3.14	11:36
,	,	11:40
IDENT	active	11:42
:=	:=	11:49
KW_true	true	11:52
,	,	11:56
IDENT	desc	11:58
:=	:=	11:63
STRING	test	11:66
}	}	11:72
KW_assert	assert	12:5
IDENT	data	12:12
.	.	12:16
IDENT	id	12:17
==	==	12:20
INT	1	12:23
KW_assert	assert	13:5
IDENT	data	13:12
.	.	13:16
IDENT	value	13:17
==	==	13:23
REAL	3.14	13:26
KW_assert	assert	14:5
IDENT	data	14:12
.	.	14:16
IDENT	active	14:17
==	==	14:24
KW_true	true	14:27
KW_assert	assert	15:5
IDENT	data	15:12
.	.	15:16
IDENT	desc	15:17
==	==	15:22
STRING	test	15:25
}	}	16:1
KW_test	test	18:1
STRING	Tuple with unnamed elements	18:6
{	{	18:36
KW_var	var	19:5
IDENT	point	19:9
:=	:=	19:15
{	{	19:18
INT	10	19:19
,	,	19:21
INT	20	19:23
,	,	19:25
INT	30	19:27
}	}	19:29
KW_assert	assert	20:5
IDENT	point	20:12
.	.	20:17
INT	1	20:18
==	==	20:20
INT	10	20:23
KW_assert	assert	21:5
IDENT	point	21:12
.	.	21:17
INT	2	21:18
==	==	21:20
INT	20	21:23
KW_assert	assert	22:5
IDENT	point	22:12
.	.	22:17
INT	3	22:18
==	==	22:20
INT	30	22:23
}	}	23:1
KW_test	test	25:1
STRING	Mixed named and unnamed tuple elements	25:6
{	{	25:47
KW_var	var	26:5
IDENT	mixed	26:9
:=	:=	26:15
{	{	26:18
IDENT	x	26:19
:=	:=	26:21
INT	100	26:24
,	,	26:27
INT	200	26:29
,	,	26:32
IDENT	z	26:34
:=	:=	26:36
INT	300	26:39
,	,	26:42
INT	400	26:44
}	}	26:47
KW_assert	assert	27:5
IDENT	mixed	27:12
.	.	27:17
IDENT	x	27:18
==	==	27:20
INT	100	27:23
KW_assert	assert	28:5
IDENT	mixed	28:12
.	.	28:17
INT	1	28:18
==	==	28:20
INT	100	28:23
KW_assert	assert	29:5
IDENT	mixed	29:12
.	.	29:17
INT	2	29:18
==	==	29:20
INT	200	29:23
KW_assert	assert	30:5
IDENT	mixed	30:12
.	.	30:17
IDENT	z	30:18
==	==	30:20
INT	300	30:23
KW_assert	assert	31:5
IDENT	mixed	31:12
.	.	31:17
INT	3	31:18
==	==	31:20
INT	300	31:23
KW_assert	assert	32:5
IDENT	mixed	32:12
.	.	32:17
INT	4	32:18
==	==	32:20
INT	400	32:23
}	}	33:1
KW_test	test	35:1
STRING	Tuple element modification	35:6
{	{	35:35
KW_var	var	36:5
IDENT	person	36:9
:=	:=	36:16
{	{	36:19
IDENT	name	36:20
:=	:=	36:25
STRING	John	36:28
,	,	36:34
IDENT	age	36:36
:=	:=	36:40
INT	25	36:43
}	}	36:45
IDENT	person	37:5
.	.	37:11
IDENT	name	37:12
:=	:=	37:17
STRING	Jane	37:20
IDENT	person	38:5
.	.	38:11
IDENT	age	38:12
:=	:=	38:16
INT	30	38:19
KW_assert	assert	39:5
IDENT	person	39:12
.	.	39:18
IDENT	name	39:19
==	==	39:24
STRING	Jane	39:27
KW_assert	assert	40:5
IDENT	person	40:12
.	.	40:18
IDENT	age	40:19
==	==	40:23
INT	30	40:26
}	}	41:1
KW_test	test	43:1
STRING	Tuple concatenation	43:6
{	{	43:28
KW_var	var	44:5
IDENT	t1	44:9
:=	:=	44:12
{	{	44:15
IDENT	a	44:16
:=	:=	44:18
INT	1	44:21
,	,	44:22
IDENT	b	44:24
:=	:=	44:26
INT	2	44:29
}	}	44:30
KW_var	var	45:5
IDENT	t2	45:9
:=	:=	45:12
{	{	45:15
IDENT	c	45:16
:=	:=	45:18
INT	3	45:21
,	,	45:22
IDENT	d	45:24
:=	:=	45:26
INT	4	45:29
}	}	45:30
KW_var	var	46:5
IDENT	result	46:9
:=	:=	46:16
IDENT	t1	46:19
+	+	46:22
IDENT	t2	46:24
KW_assert	assert	47:5
IDENT	result	47:12
.	.	47:18
IDENT	a	47:19
==	==	47:21
INT	1	47:24
KW_assert	assert	48:5
IDENT	result	48:12
.	.	48:18
IDENT	b	48:19
==	==	48:21
INT	2	48:24
KW_assert	assert	49:5
IDENT	result	49:12
.	.	49:18
IDENT	c	49:19
==	==	49:21
INT	3	49:24
KW_assert	assert	50:5
IDENT	result	50:12
.	.	50:18
IDENT	d	50:19
==	==	50:21
INT	4	50:24
}	}	51:1
KW_test	test	53:1
STRING	Tuple concatenation with unnamed elements	53:6
{	{	53:50
KW_var	var	54:5
IDENT	t1	54:9
:=	:=	54:12
{	{	54:15
INT	10	54:16
,	,	54:18
INT	20	54:20
}	}	54:22
KW_var	var	55:5
IDENT	t2	55:9
:=	:=	55:12
{	{	55:15
INT	30	55:16
,	,	55:18
INT	40	55:20
}	}	55:22
KW_var	var	56:5
IDENT	result	56:9
:=	:=	56:16
IDENT	t1	56:19
+	+	56:22
IDENT	t2	56:24
KW_assert	assert	57:5
IDENT	result	57:12
.	.	57:18
INT	1	57:19
==	==	57:21
INT	10	57:24
KW_assert	assert	58:5
IDENT	result	58:12
.	.	58:18
INT	2	58:19
==	==	58:21
INT	20	58:24
KW_assert	assert	59:5
IDENT	result	59:12
.	.	59:18
INT	3	59:19
==	==	59:21
INT	30	59:24
KW_assert	assert	60:5
IDENT	result	60:12
.	.	60:18
INT	4	60:19
==	==	60:21
INT	40	60:24
}	}	61:1
KW_test	test	63:1
STRING	Tuple concatenation with mixed types	63:6
{	{	63:45
KW_var	var	64:5
IDENT	t1	64:9
:=	:=	64:12
{	{	64:15
IDENT	name	64:16
:=	:=	64:21
STRING	John	64:24
,	,	64:30
IDENT	score	64:32
:=	:=	64:38
INT	85	64:41
}	}	64:43
KW_var	var	65:5
IDENT	t2	65:9
:=	:=	65:12
{	{	65:15
REAL	85.5	65:16
,	,	65:20
IDENT	completed	65:22
:=	:=	65:32
KW_true	true	65:35
}	}	65:39
KW_var	var	66:5
IDENT	result	66:9
:=	:=	66:16
IDENT	t1	66:19
+	+	66:22
IDENT	t2	66:24
KW_assert	assert	67:5
IDENT	result	67:12
.	.	67:18
IDENT	name	67:19
==	==	67:24
STRING	John	67:27
KW_assert	assert	68:5
IDENT	result	68:12
.	.	68:18
IDENT	score	68:19
==	==	68:25
INT	85	68:28
KW_assert	assert	69:5
IDENT	result	69:12
.	.	69:18
INT	1	69:19
==	==	69:21
REAL	85.5	69:24
KW_assert	assert	70:5
IDENT	result	70:12
.	.	70:18
IDENT	completed	70:19
==	==	70:29
KW_true	true	70:32
}	}	71:1
KW_test	test	73:1
STRING	Nested tuple access	73:6
{	{	73:28
KW_var	var	74:5
IDENT	company	74:9
:=	:=	74:17
{	{	74:20
IDENT	name	75:9
:=	:=	75:14
STRING	TechCorp	75:17
,	,	75:27
IDENT	employees	76:9
:=	:=	76:19
{	{	76:22
IDENT	count	77:13
:=	:=	77:19
INT	50	77:22
,	,	77:24
IDENT	departments	78:13
:=	:=	78:25
{	{	78:28
STRING	Engineering	78:29
,	,	78:42
STRING	Sales	78:44
,	,	78:51
STRING	HR	78:53
}	}	78:57
}	}	79:9
}	}	80:5
KW_assert	assert	81:5
IDENT	company	81:12
.	.	81:19
IDENT	name	81:20
==	==	81:25
STRING	TechCorp	81:28
KW_assert	assert	82:5
IDENT	company	82:12
.	.	82:19
IDENT	employees	82:20
.	.	82:29
IDENT	count	82:30
==	==	82:36
INT	50	82:39
KW_assert	assert	83:5
IDENT	company	83:12
.	.	83:19
IDENT	employees	83:20
.	.	83:29
IDENT	departments	83:30
.	.	83:41
INT	1	83:42
==	==	83:44
STRING	Engineering	83:47
KW_assert	assert	84:5
IDENT	company	84:12
.	.	84:19
IDENT	employees	84:20
.	.	84:29
IDENT	departments	84:30
.	.	84:41
INT	2	84:42
==	==	84:44
STRING	Sales	84:47
KW_assert	assert	85:5
IDENT	company	85:12
.	.	85:19
IDENT	employees	85:20
.	.	85:29
IDENT	departments	85:30
.	.	85:41
INT	3	85:42
==	==	85:44
STRING	HR	85:47
}	}	86:1
KW_test	test	88:1
STRING	Tuple in array	88:6
{	{	88:23
KW_var	var	89:5
IDENT	people	89:9
:=	:=	89:16
[	[	89:19
{	{	90:9
IDENT	name	90:10
:=	:=	90:15
STRING	Alice	90:18
,	,	90:25
IDENT	age	90:27
:=	:=	90:31
INT	25	90:34
}	}	90:36
,	,	90:37
{	{	91:9
IDENT	name	91:10
:=	:=	91:15
STRING	Bob	91:18
,	,	91:23
IDENT	age	91:25
:=	:=	91:29
INT	30	91:32
}	}	91:34
,	,	91:35
{	{	92:9
IDENT	name	92:10
:=	:=	92:15
STRING	Charlie	92:18
,	,	92:27
IDENT	age	92:29
:=	:=	92:33
INT	35	92:36
}	}	92:38
]	]	93:5
KW_assert	assert	94:5
IDENT	people	94:12
[	[	94:18
INT	1	94:19
]	]	94:20
.	.	94:21
IDENT	name	94:22
==	==	94:27
STRING	Alice	94:30
KW_assert	assert	95:5
IDENT	people	95:12
[	[	95:18
INT	1	95:19
]	]	95:20
.	.	95:21
IDENT	age	95:22
==	==	95:26
INT	25	95:29
KW_assert	assert	96:5
IDENT	people	96:12
[	[	96:18
INT	2	96:19
]	]	96:20
.	.	96:21
IDENT	name	96:22
==	==	96:27
STRING	Bob	96:30
KW_assert	assert	97:5
IDENT	people	97:12
[	[	97:18
INT	2	97:19
]	]	97:20
.	.	97:21
IDENT	age	97:22
==	==	97:26
INT	30	97:29
KW_assert	assert	98:5
IDENT	people	98:12
[	[	98:18
INT	3	98:19
]	]	98:20
.	.	98:21
IDENT	name	98:22
==	==	98:27
STRING	Charlie	98:30
KW_assert	assert	99:5
IDENT	people	99:12
[	[	99:18
INT	3	99:19
]	]	99:20
.	.	99:21
IDENT	age	99:22
==	==	99:26
INT	35	99:29
}	}	100:1
KW_test	test	102:1
STRING	Array in tuple	102:6
{	{	102:23
KW_var	var	103:5
IDENT	data	103:9
:=	:=	103:14
{	{	103:17
IDENT	name	104:9
:=	:=	104:14
STRING	Report	104:17
,	,	104:25
IDENT	values	105:9
:=	:=	105:16
[	[	105:19
INT	10	105:20
,	,	105:22
INT	20	105:24
,	,	105:26
INT	30	105:28
,	,	105:30
INT	40	105:32
,	,	105:34
INT	50	105:36
]	]	105:38
}	}	106:5
KW_assert	assert	107:5
IDENT	data	107:12
.	.	107:16
IDENT	name	107:17
==	==	107:22
STRING	Report	107:25
KW_assert	assert	108:5
IDENT	data	108:12
.	.	108:16
IDENT	values	108:17
[	[	108:23
INT	1	108:24
]	]	108:25
==	==	108:27
INT	10	108:30
KW_assert	assert	109:5
IDENT	data	109:12
.	.	109:16
IDENT	values	109:17
[	[	109:23
INT	3	109:24
]	]	109:25
==	==	109:27
INT	30	109:30
KW_assert	assert	110:5
IDENT	data	110:12
.	.	110:16
IDENT	values	110:17
[	[	110:23
INT	5	110:24
]	]	110:25
==	==	110:27
INT	50	110:30
}	}	111:1
KW_test	test	113:1
STRING	Tuple field reassignment with different types	113:6
{	{	113:54
KW_var	var	114:5
IDENT	item	114:9
:=	:=	114:14
{	{	114:17
IDENT	value	114:18
:=	:=	114:24
INT	100	114:27
}	}	114:30
IDENT	item	115:5
.	.	115:9
IDENT	value	115:10
:=	:=	115:16
REAL	200.5	115:19
KW_assert	assert	116:5
IDENT	item	116:12
.	.	116:16
IDENT	value	116:17
==	==	116:23
REAL	200.5	116:26
KW_assert	assert	117:5
IDENT	item	117:12
.	.	117:16
IDENT	value	117:17
KW_is	is	117:23
KW_real	real	117:26
IDENT	item	119:5
.	.	119:9
IDENT	value	119:10
:=	:=	119:16
STRING	changed	119:19
KW_assert	assert	120:5
IDENT	item	120:12
.	.	120:16
IDENT	value	120:17
==	==	120:23
STRING	changed	120:26
KW_assert	assert	121:5
IDENT	item	121:12
.	.	121:16
IDENT	value	121:17
KW_is	is	121:23
KW_string	string	121:26
}	}	122:1
KW_test	test	124:1
STRING	Complex tuple operations	124:6
{	{	124:33
KW_var	var	125:5
IDENT	result	125:9
:=	:=	125:16
{	{	125:19
IDENT	sum	126:9
:=	:=	126:13
INT	0	126:16
,	,	126:17
IDENT	count	127:9
:=	:=	127:15
INT	0	127:18
,	,	127:19
IDENT	data	128:9
:=	:=	128:14
[	[	128:17
]	]	128:18
}	}	129:5
KW_for	for	131:5
IDENT	i	131:9
KW_in	in	131:11
INT	1	131:14
.	.	131:15
.	.	131:16
INT	5	131:17
KW_loop	loop	131:19
IDENT	result	132:9
.	.	132:15
IDENT	data	132:16
:=	:=	132:21
IDENT	result	132:24
.	.	132:30
IDENT	data	132:31
+	+	132:36
[	[	132:38
IDENT	i	132:39
*	*	132:41
INT	10	132:43
]	]	132:45
IDENT	result	133:9
.	.	133:15
IDENT	sum	133:16
:=	:=	133:20
IDENT	result	133:23
.	.	133:29
IDENT	sum	133:30
+	+	133:34
(	(	133:36
IDENT	i	133:37
*	*	133:39
INT	10	133:41
)	)	133:43
IDENT	result	134:9
.	.	134:15
IDENT	count	134:16
:=	:=	134:22
IDENT	result	134:25
.	.	134:31
IDENT	count	134:32
+	+	134:38
INT	1	134:40
KW_end	end	135:5
KW_assert	assert	137:5
IDENT	result	137:12
.	.	137:18
IDENT	count	137:19
==	==	137:25
INT	5	137:28
KW_assert	assert	138:5
IDENT	result	138:12
.	.	138:18
IDENT	sum	138:19
==	==	138:23
INT	150	138:26
KW_assert	assert	139:5
IDENT	result	139:12
.	.	139:18
IDENT	data	139:19
[	[	139:23
INT	1	139:24
]	]	139:25
==	==	139:27
INT	10	139:30
KW_assert	assert	140:5
IDENT	result	140:12
.	.	140:18
IDENT	data	140:19
[	[	140:23
INT	5	140:24
]	]	140:25
==	==	140:27
INT	50	140:30
}	}	141:1
EOF		142:1
KW_test	test	4:1
STRING	Integer addition	4:6
{	{	4:25
KW_var	var	5:5
IDENT	result	5:9
:=	:=	5:16
INT	5	5:19
+	+	5:21
INT	3	5:23
KW_assert	assert	6:5
IDENT	result	6:12
==	==	6:19
INT	8	6:22
KW_assert	assert	7:5
IDENT	result	7:12
KW_is	is	7:19
KW_int	int	7:22
}	}	8:1
KW_test	test	10:1
STRING	Integer subtraction	10:6
{	{	10:28
KW_var	var	11:5
IDENT	result	11:9
:=	:=	11:16
INT	10	11:19
-	-	11:22
INT	4	11:24
KW_assert	assert	12:5
IDENT	result	12:12
==	==	12:19
INT	6	12:22
KW_assert	assert	13:5
IDENT	result	13:12
KW_is	is	13:19
KW_int	int	13:22
}	}	14:1
KW_test	test	16:1
STRING	Integer multiplication	16:6
{	{	16:31
KW_var	var	17:5
IDENT	result	17:9
:=	:=	17:16
INT	6	17:19
*	*	17:21
INT	7	17:23
KW_assert	assert	18:5
IDENT	result	18:12
==	==	18:19
INT	42	18:22
KW_assert	assert	19:5
IDENT	result	19:12
KW_is	is	19:19
KW_int	int	19:22
}	}	20:1
KW_test	test	22:1
STRING	Integer division	22:6
{	{	22:25
KW_var	var	23:5
IDENT	result	23:9
:=	:=	23:16
INT	15	23:19
/	/	23:22
INT	3	23:24
KW_assert	assert	24:5
IDENT	result	24:12
==	==	24:19
INT	5	24:22
KW_assert	assert	25:5
IDENT	result	25:12
KW_is	is	25:19
KW_int	int	25:22
}	}	26:1
KW_test	test	28:1
STRING	Integer division with rounding down	28:6
{	{	28:44
KW_var	var	29:5
IDENT	result	29:9
:=	:=	29:16
INT	17	29:19
/	/	29:22
INT	4	29:24
KW_assert	assert	30:5
IDENT	result	30:12
==	==	30:19
INT	4	30:22
KW_assert	assert	31:5
IDENT	result	31:12
KW_is	is	31:19
KW_int	int	31:22
}	}	32:1
KW_test	test	34:1
STRING	Mixed integer and real arithmetic	34:6
{	{	34:42
KW_var	var	35:5
IDENT	result1	35:9
:=	:=	35:17
INT	5	35:20
+	+	35:22
REAL	2.5	35:24
KW_var	var	36:5
IDENT	result2	36:9
:=	:=	36:17
REAL	10.0	36:20
-	-	36:25
INT	3	36:27
KW_var	var	37:5
IDENT	result3	37:9
:=	:=	37:17
INT	4	37:20
*	*	37:22
REAL	2.5	37:24
KW_var	var	38:5
IDENT	result4	38:9
:=	:=	38:17
REAL	15.0	38:20
/	/	38:25
INT	2	38:27
KW_assert	assert	40:5
IDENT	result1	40:12
==	==	40:20
REAL	7.5	40:23
KW_assert	assert	41:5
IDENT	result2	41:12
==	==	41:20
REAL	7.0	41:23
KW_assert	assert	42:5
IDENT	result3	42:12
==	==	42:20
REAL	10.0	42:23
KW_assert	assert	43:5
IDENT	result4	43:12
==	==	43:20
REAL	7.5	43:23
KW_assert	assert	45:5
IDENT	result1	45:12
KW_is	is	45:20
KW_real	real	45:23
KW_assert	assert	46:5
IDENT	result2	46:12
KW_is	is	46:20
KW_real	real	46:23
KW_assert	assert	47:5
IDENT	result3	47:12
KW_is	is	47:20
KW_real	real	47:23
KW_assert	assert	48:5
IDENT	result4	48:12
KW_is	is	48:20
KW_real	real	48:23
}	}	49:1
KW_test	test	51:1
STRING	Real arithmetic	51:6
{	{	51:24
KW_var	var	52:5
IDENT	result1	52:9
:=	:=	52:17
REAL	3.14	52:20
+	+	52:25
REAL	2.86	52:27
KW_var	var	53:5
IDENT	result2	53:9
:=	:=	53:17
REAL	5.5	53:20
-	-	53:24
REAL	2.2	53:26
KW_var	var	54:5
IDENT	result3	54:9
:=	:=	54:17
REAL	3.0	54:20
*	*	54:24
REAL	4.0	54:26
KW_var	var	55:5
IDENT	result4	55:9
:=	:=	55:17
REAL	10.0	55:20
/	/	55:25
REAL	2.5	55:27
KW_assert	assert	57:5
IDENT	result1	57:12
==	==	57:20
REAL	6.0	57:23
KW_assert	assert	58:5
IDENT	result2	58:12
==	==	58:20
REAL	3.3	58:23
KW_assert	assert	59:5
IDENT	result3	59:12
==	==	59:20
REAL	12.0	59:23
KW_assert	assert	60:5
IDENT	result4	60:12
==	==	60:20
REAL	4.0	60:23
KW_assert	assert	62:5
IDENT	result1	62:12
KW_is	is	62:20
KW_real	real	62:23
KW_assert	assert	63:5
IDENT	result2	63:12
KW_is	is	63:20
KW_real	real	63:23
KW_assert	assert	64:5
IDENT	result3	64:12
KW_is	is	64:20
KW_real	real	64:23
KW_assert	assert	65:5
IDENT	result4	65:12
KW_is	is	65:20
KW_real	real	65:23
}	}	66:1
KW_test	test	68:1
STRING	Unary plus and minus	68:6
{	{	68:29
KW_var	var	69:5
IDENT	x	69:9
:=	:=	69:11
INT	5	69:14
KW_var	var	70:5
IDENT	result1	70:9
:=	:=	70:17
+	+	70:20
IDENT	x	70:21
KW_var	var	71:5
IDENT	result2	71:9
:=	:=	71:17
-	-	71:20
IDENT	x	71:21
KW_var	var	72:5
IDENT	y	72:9
:=	:=	72:11
REAL	3.14	72:14
KW_var	var	73:5
IDENT	result3	73:9
:=	:=	73:17
+	+	73:20
IDENT	y	73:21
KW_var	var	74:5
IDENT	result4	74:9
:=	:=	74:17
-	-	74:20
IDENT	y	74:21
KW_assert	assert	76:5
IDENT	result1	76:12
==	==	76:20
INT	5	76:23
KW_assert	assert	77:5
IDENT	result2	77:12
==	==	77:20
-	-	77:23
INT	5	77:24
KW_assert	assert	78:5
IDENT	result3	78:12
==	==	78:20
REAL	3.14	78:23
KW_assert	assert	79:5
IDENT	result4	79:12
==	==	79:20
-	-	79:23
REAL	3.14	79:24
KW_assert	assert	81:5
IDENT	result1	81:12
KW_is	is	81:20
KW_int	int	81:23
KW_assert	assert	82:5
IDENT	result2	82:12
KW_is	is	82:20
KW_int	int	82:23
KW_assert	assert	83:5
IDENT	result3	83:12
KW_is	is	83:20
KW_real	real	83:23
KW_assert	assert	84:5
IDENT	result4	84:12
KW_is	is	84:20
KW_real	real	84:23
}	}	85:1
KW_test	test	87:1
STRING	Complex arithmetic expressions	87:6
{	{	87:39
KW_var	var	88:5
IDENT	result	88:9
:=	:=	88:16
(	(	88:19
INT	5	88:20
+	+	88:22
INT	3	88:24
)	)	88:25
*	*	88:27
INT	2	88:29
-	-	88:31
INT	8	88:33
/	/	88:35
INT	2	88:37
KW_assert	assert	89:5
IDENT	result	89:12
==	==	89:19
INT	12	89:22
KW_assert	assert	90:5
IDENT	result	90:12
KW_is	is	90:19
KW_int	int	90:22
}	}	91:1
KW_test	test	93:1
STRING	String concatenation	93:6
{	{	93:29
KW_var	var	94:5
IDENT	result1	94:9
:=	:=	94:17
STRING	hello	94:20
+	+	94:28
STRING	 	94:30
+	+	94:34
STRING	world	94:36
KW_var	var	95:5
IDENT	result2	95:9
:=	:=	95:17
STRING	test	95:20
+	+	95:27
STRING	123	95:29
KW_var	var	96:5
IDENT	result3	96:9
:=	:=	96:17
STRING		96:20
+	+	96:23
STRING	empty	96:25
KW_assert	assert	98:5
IDENT	result1	98:12
==	==	98:20
STRING	hello world	98:23
KW_assert	assert	99:5
IDENT	result2	99:12
==	==	99:20
STRING	test123	99:23
KW_assert	assert	100:5
IDENT	result3	100:12
==	==	100:20
STRING	empty	100:23
KW_assert	assert	102:5
IDENT	result1	102:12
KW_is	is	102:20
KW_string	string	102:23
KW_assert	assert	103:5
IDENT	result2	103:12
KW_is	is	103:20
KW_string	string	103:23
KW_assert	assert	104:5
IDENT	result3	104:12
KW_is	is	104:20
KW_string	string	104:23
}	}	105:1
EOF		106:1
KW_test	test	4:1
STRING	Integer comparisons	4:6
{	{	4:28
KW_assert	assert	5:5
INT	5	5:12
<	<	5:14
INT	10	5:16
==	==	5:19
KW_true	true	5:22
KW_assert	assert	6:5
INT	10	6:12
>	>	6:15
INT	5	6:17
==	==	6:19
KW_true	true	6:22
KW_assert	assert	7:5
INT	5	7:12
<=	<=	7:14
INT	5	7:17
==	==	7:19
KW_true	true	7:22
KW_assert	assert	8:5
INT	5	8:12
>=	>=	8:14
INT	5	8:17
==	==	8:19
KW_true	true	8:22
KW_assert	assert	9:5
INT	5	9:12
=	=	9:14
INT	5	9:16
==	==	9:18
KW_true	true	9:21
KW_assert	assert	10:5
INT	5	10:12
/=	/=	10:14
INT	6	10:17
==	==	10:19
KW_true	true	10:22
}	}	11:1
KW_test	test	13:1
STRING	Real comparisons	13:6
{	{	13:25
KW_assert	assert	14:5
REAL	3.14	14:12
<	<	14:17
REAL	6.28	14:19
==	==	14:24
KW_true	true	14:27
KW_assert	assert	15:5
REAL	6.28	15:12
>	>	15:17
REAL	3.14	15:19
==	==	15:24
KW_true	true	15:27
KW_assert	assert	16:5
REAL	3.14	16:12
<=	<=	16:17
REAL	3.14	16:20
==	==	16:25
KW_true	true	16:28
KW_assert	assert	17:5
REAL	3.14	17:12
>=	>=	17:17
REAL	3.14	17:20
==	==	17:25
KW_true	true	17:28
KW_assert	assert	18:5
REAL	3.14	18:12
=	=	18:17
REAL	3.14	18:19
==	==	18:24
KW_true	true	18:27
KW_assert	assert	19:5
REAL	3.14	19:12
/=	/=	19:17
REAL	6.28	19:20
==	==	19:25
KW_true	true	19:28
}	}	20:1
KW_test	test	22:1
STRING	Mixed integer and real comparisons	22:6
{	{	22:43
KW_assert	assert	23:5
INT	5	23:12
<	<	23:14
REAL	5.5	23:16
==	==	23:20
KW_true	true	23:23
KW_assert	assert	24:5
REAL	5.5	24:12
>	>	24:16
INT	5	24:18
==	==	24:20
KW_true	true	24:23
KW_assert	assert	25:5
INT	5	25:12
<=	<=	25:14
REAL	5.0	25:17
==	==	25:21
KW_true	true	25:24
KW_assert	assert	26:5
REAL	5.0	26:12
>=	>=	26:16
INT	5	26:19
==	==	26:21
KW_true	true	26:24
KW_assert	assert	27:5
INT	5	27:12
=	=	27:14
REAL	5.0	27:16
==	==	27:20
KW_true	true	27:23
KW_assert	assert	28:5
INT	5	28:12
/=	/=	28:14
REAL	5.5	28:17
==	==	28:21
KW_true	true	28:24
}	}	29:1
KW_test	test	31:1
STRING	Boolean comparisons	31:6
{	{	31:28
KW_assert	assert	32:5
KW_true	true	32:12
=	=	32:17
KW_true	true	32:19
==	==	32:24
KW_true	true	32:27
KW_assert	assert	33:5
KW_false	false	33:12
=	=	33:18
KW_false	false	33:20
==	==	33:26
KW_true	true	33:29
KW_assert	assert	34:5
KW_true	true	34:12
/=	/=	34:17
KW_false	false	34:20
==	==	34:26
KW_true	true	34:29
KW_assert	assert	35:5
KW_false	false	35:12
/=	/=	35:18
KW_true	true	35:21
==	==	35:26
KW_true	true	35:29
}	}	36:1
KW_test	test	38:1
STRING	String comparisons	38:6
{	{	38:27
KW_assert	assert	39:5
STRING	apple	39:12
<	<	39:20
STRING	banana	39:22
==	==	39:31
KW_true	true	39:34
KW_assert	assert	40:5
STRING	banana	40:12
>	>	40:21
STRING	apple	40:23
==	==	40:31
KW_true	true	40:34
KW_assert	assert	41:5
STRING	hello	41:12
=	=	41:20
STRING	hello	41:22
==	==	41:30
KW_true	true	41:33
KW_assert	assert	42:5
STRING	hello	42:12
/=	/=	42:20
STRING	world	42:23
==	==	42:31
KW_true	true	42:34
}	}	43:1
KW_test	test	45:1
STRING	Comparison in expressions	45:6
{	{	45:34
KW_var	var	46:5
IDENT	x	46:9
:=	:=	46:11
INT	10	46:14
,	,	46:16
IDENT	y	46:18
:=	:=	46:20
INT	20	46:23
KW_var	var	47:5
IDENT	result	47:9
:=	:=	47:16
IDENT	x	47:19
<	<	47:21
IDENT	y	47:23
KW_and	and	47:25
IDENT	y	47:29
>	>	47:31
IDENT	x	47:33
KW_assert	assert	48:5
IDENT	result	48:12
==	==	48:19
KW_true	true	48:22
KW_assert	assert	49:5
IDENT	result	49:12
KW_is	is	49:19
KW_bool	bool	49:22
}	}	50:1
KW_test	test	52:1
STRING	Complex comparison expressions	52:6
{	{	52:39
KW_var	var	53:5
IDENT	a	53:9
:=	:=	53:11
INT	5	53:14
,	,	53:15
IDENT	b	53:17
:=	:=	53:19
INT	10	53:22
,	,	53:24
IDENT	c	53:26
:=	:=	53:28
INT	15	53:31
KW_var	var	54:5
IDENT	result1	54:9
:=	:=	54:17
IDENT	a	54:20
<	<	54:22
IDENT	b	54:24
KW_and	and	54:26
IDENT	b	54:30
<	<	54:32
IDENT	c	54:34
KW_var	var	55:5
IDENT	result2	55:9
:=	:=	55:17
IDENT	a	55:20
<=	<=	55:22
IDENT	b	55:25
KW_or	or	55:27
IDENT	b	55:30
>	>	55:32
IDENT	c	55:34
KW_var	var	56:5
IDENT	result3	56:9
:=	:=	56:17
KW_not	not	56:20
(	(	56:24
IDENT	a	56:25
=	=	56:27
IDENT	b	56:29
)	)	56:30
KW_assert	assert	58:5
IDENT	result1	58:12
==	==	58:20
KW_true	true	58:23
KW_assert	assert	59:5
IDENT	result2	59:12
==	==	59:20
KW_true	true	59:23
KW_assert	assert	60:5
IDENT	result3	60:12
==	==	60:20
KW_true	true	60:23
}	}	61:1
KW_test	test	63:1
STRING	Comparison with zero and negative numbers	63:6
{	{	63:50
KW_assert	assert	64:5
INT	0	64:12
<	<	64:14
INT	1	64:16
==	==	64:18
KW_true	true	64:21
KW_assert	assert	65:5
-	-	65:12
INT	1	65:13
<	<	65:15
INT	0	65:17
==	==	65:19
KW_true	true	65:22
KW_assert	assert	66:5
-	-	66:12
INT	5	66:13
>	>	66:15
-	-	66:17
INT	10	66:18
==	==	66:21
KW_true	true	66:24
KW_assert	assert	67:5
REAL	0.0	67:12
=	=	67:16
INT	0	67:18
==	==	67:20
KW_true	true	67:23
KW_assert	assert	68:5
-	-	68:12
REAL	3.14	68:13
<	<	68:18
REAL	0.0	68:20
==	==	68:24
KW_true	true	68:27
}	}	69:1
EOF		70:1
KW_test	test	4:1
STRING	Logical AND operation	4:6
{	{	4:30
KW_assert	assert	5:5
(	(	5:12
KW_true	true	5:13
KW_and	and	5:18
KW_true	true	5:22
)	)	5:26
==	==	5:28
KW_true	true	5:31
KW_assert	assert	6:5
(	(	6:12
KW_true	true	6:13
KW_and	and	6:18
KW_false	false	6:22
)	)	6:27
==	==	6:29
KW_false	false	6:32
KW_assert	assert	7:5
(	(	7:12
KW_false	false	7:13
KW_and	and	7:19
KW_true	true	7:23
)	)	7:27
==	==	7:29
KW_false	false	7:32
KW_assert	assert	8:5
(	(	8:12
KW_false	false	8:13
KW_and	and	8:19
KW_false	false	8:23
)	)	8:28
==	==	8:30
KW_false	false	8:33
}	}	9:1
KW_test	test	11:1
STRING	Logical OR operation	11:6
{	{	11:29
KW_assert	assert	12:5
(	(	12:12
KW_true	true	12:13
KW_or	or	12:18
KW_true	true	12:21
)	)	12:25
==	==	12:27
KW_true	true	12:30
KW_assert	assert	13:5
(	(	13:12
KW_true	true	13:13
KW_or	or	13:18
KW_false	false	13:21
)	)	13:26
==	==	13:28
KW_true	true	13:31
KW_assert	assert	14:5
(	(	14:12
KW_false	false	14:13
KW_or	or	14:19
KW_true	true	14:22
)	)	14:26
==	==	14:28
KW_true	true	14:31
KW_assert	assert	15:5
(	(	15:12
KW_false	false	15:13
KW_or	or	15:19
KW_false	false	15:22
)	)	15:27
==	==	15:29
KW_false	false	15:32
}	}	16:1
KW_test	test	18:1
STRING	Logical XOR operation	18:6
{	{	18:30
KW_assert	assert	19:5
(	(	19:12
KW_true	true	19:13
KW_xor	xor	19:18
KW_true	true	19:22
)	)	19:26
==	==	19:28
KW_false	false	19:31
KW_assert	assert	20:5
(	(	20:12
KW_true	true	20:13
KW_xor	xor	20:18
KW_false	false	20:22
)	)	20:27
==	==	20:29
KW_true	true	20:32
KW_assert	assert	21:5
(	(	21:12
KW_false	false	21:13
KW_xor	xor	21:19
KW_true	true	21:23
)	)	21:27
==	==	21:29
KW_true	true	21:32
KW_assert	assert	22:5
(	(	22:12
KW_false	false	22:13
KW_xor	xor	22:19
KW_false	false	22:23
)	)	22:28
==	==	22:30
KW_false	false	22:33
}	}	23:1
KW_test	test	25:1
STRING	Logical NOT operation	25:6
{	{	25:30
KW_assert	assert	26:5
(	(	26:12
KW_not	not	26:13
KW_true	true	26:17
)	)	26:21
==	==	26:23
KW_false	false	26:26
KW_assert	assert	27:5
(	(	27:12
KW_not	not	27:13
KW_false	false	27:17
)	)	27:22
==	==	27:24
KW_true	true	27:27
}	}	28:1
KW_test	test	30:1
STRING	Complex logical expressions	30:6
{	{	30:36
KW_var	var	31:5
IDENT	a	31:9
:=	:=	31:11
KW_true	true	31:14
,	,	31:18
IDENT	b	31:20
:=	:=	31:22
KW_false	false	31:25
,	,	31:30
IDENT	c	31:32
:=	:=	31:34
KW_true	true	31:37
KW_var	var	32:5
IDENT	result1	32:9
:=	:=	32:17
IDENT	a	32:20
KW_and	and	32:22
IDENT	b	32:26
KW_or	or	32:28
IDENT	c	32:31
KW_var	var	33:5
IDENT	result2	33:9
:=	:=	33:17
IDENT	a	33:20
KW_or	or	33:22
IDENT	b	33:25
KW_and	and	33:27
IDENT	c	33:31
KW_var	var	34:5
IDENT	result3	34:9
:=	:=	34:17
KW_not	not	34:20
(	(	34:24
IDENT	a	34:25
KW_and	and	34:27
IDENT	b	34:31
)	)	34:32
KW_var	var	35:5
IDENT	result4	35:9
:=	:=	35:17
IDENT	a	35:20
KW_xor	xor	35:22
(	(	35:26
IDENT	b	35:27
KW_or	or	35:29
IDENT	c	35:32
)	)	35:33
KW_assert	assert	37:5
IDENT	result1	37:12
==	==	37:20
KW_true	true	37:23
KW_assert	assert	38:5
IDENT	result2	38:12
==	==	38:20
KW_true	true	38:23
KW_assert	assert	39:5
IDENT	result3	39:12
==	==	39:20
KW_true	true	39:23
KW_assert	assert	40:5
IDENT	result4	40:12
==	==	40:20
KW_false	false	40:23
}	}	41:1
KW_test	test	43:1
STRING	Logical operations with comparison results	43:6
{	{	43:51
KW_var	var	44:5
IDENT	x	44:9
:=	:=	44:11
INT	5	44:14
,	,	44:15
IDENT	y	44:17
:=	:=	44:19
INT	10	44:22
,	,	44:24
IDENT	z	44:26
:=	:=	44:28
INT	15	44:31
KW_var	var	45:5
IDENT	result1	45:9
:=	:=	45:17
IDENT	x	45:20
<	<	45:22
IDENT	y	45:24
KW_and	and	45:26
IDENT	y	45:30
<	<	45:32
IDENT	z	45:34
KW_var	var	46:5
IDENT	result2	46:9
:=	:=	46:17
IDENT	x	46:20
>	>	46:22
IDENT	y	46:24
KW_or	or	46:26
IDENT	z	46:29
>	>	46:31
IDENT	y	46:33
KW_var	var	47:5
IDENT	result3	47:9
:=	:=	47:17
KW_not	not	47:20
(	(	47:24
IDENT	x	47:25
=	=	47:27
IDENT	y	47:29
)	)	47:30
KW_assert	assert	49:5
IDENT	result1	49:12
==	==	49:20
KW_true	true	49:23
KW_assert	assert	50:5
IDENT	result2	50:12
==	==	50:20
KW_true	true	50:23
KW_assert	assert	51:5
IDENT	result3	51:12
==	==	51:20
KW_true	true	51:23
}	}	52:1
KW_test	test	54:1
STRING	Short-circuit evaluation	54:6
{	{	54:33
KW_var	var	55:5
IDENT	called	55:9
:=	:=	55:16
KW_false	false	55:19
KW_var	var	56:5
IDENT	result1	56:9
:=	:=	56:17
KW_false	false	56:20
KW_and	and	56:26
(	(	56:30
IDENT	called	56:31
:=	:=	56:38
KW_true	true	56:41
)	)	56:45
KW_assert	assert	57:5
IDENT	called	57:12
==	==	57:19
KW_false	false	57:22
IDENT	called	59:5
:=	:=	59:12
KW_false	false	59:15
KW_var	var	60:5
IDENT	result2	60:9
:=	:=	60:17
KW_true	true	60:20
KW_or	or	60:25
(	(	60:28
IDENT	called	60:29
:=	:=	60:36
KW_true	true	60:39
)	)	60:43
KW_assert	assert	61:5
IDENT	called	61:12
==	==	61:19
KW_false	false	61:22
}	}	62:1
KW_test	test	64:1
STRING	Logical operations precedence	64:6
{	{	64:38
KW_var	var	66:5
IDENT	result1	66:9
:=	:=	66:17
KW_not	not	66:20
KW_false	false	66:24
KW_and	and	66:30
KW_true	true	66:34
KW_var	var	67:5
IDENT	result2	67:9
:=	:=	67:17
KW_true	true	67:20
KW_or	or	67:25
KW_false	false	67:28
KW_and	and	67:34
KW_false	false	67:38
KW_var	var	68:5
IDENT	result3	68:9
:=	:=	68:17
KW_true	true	68:20
KW_xor	xor	68:25
KW_true	true	68:29
KW_and	and	68:34
KW_false	false	68:38
KW_assert	assert	70:5
IDENT	result1	70:12
==	==	70:20
KW_true	true	70:23
KW_assert	assert	71:5
IDENT	result2	71:12
==	==	71:20
KW_true	true	71:23
KW_assert	assert	72:5
IDENT	result3	72:12
==	==	72:20
KW_true	true	72:23
}	}	73:1
EOF		74:1
KW_test	test	4:1
STRING	Simple function without parameters	4:6
{	{	4:43
KW_var	var	5:5
IDENT	greet	5:9
:=	:=	5:15
KW_func	func	5:18
(	(	5:22
)	)	5:23
KW_is	is	5:25
KW_return	return	6:9
STRING	Hello, World!	6:16
KW_end	end	7:5
KW_var	var	9:5
IDENT	result	9:9
:=	:=	9:16
IDENT	greet	9:19
(	(	9:24
)	)	9:25
KW_assert	assert	10:5
IDENT	result	10:12
==	==	10:19
STRING	Hello, World!	10:22
}	}	11:1
KW_test	test	13:1
STRING	Function with single parameter	13:6
{	{	13:39
KW_var	var	14:5
IDENT	square	14:9
:=	:=	14:16
KW_func	func	14:19
(	(	14:23
IDENT	x	14:24
)	)	14:25
KW_is	is	14:27
KW_return	return	15:9
IDENT	x	15:16
*	*	15:18
IDENT	x	15:20
KW_end	end	16:5
KW_var	var	18:5
IDENT	result1	18:9
:=	:=	18:17
IDENT	square	18:20
(	(	18:26
INT	5	18:27
)	)	18:28
KW_var	var	19:5
IDENT	result2	19:9
:=	:=	19:17
IDENT	square	19:20
(	(	19:26
REAL	3.5	19:27
)	)	19:30
KW_assert	assert	20:5
IDENT	result1	20:12
==	==	20:20
INT	25	20:23
KW_assert	assert	21:5
IDENT	result2	21:12
==	==	21:20
REAL	12.25	21:23
}	}	22:1
KW_test	test	24:1
STRING	Function with multiple parameters	24:6
{	{	24:42
KW_var	var	25:5
IDENT	add	25:9
:=	:=	25:13
KW_func	func	25:16
(	(	25:20
IDENT	a	25:21
,	,	25:22
IDENT	b	25:24
)	)	25:25
KW_is	is	25:27
KW_return	return	26:9
IDENT	a	26:16
+	+	26:18
IDENT	b	26:20
KW_end	end	27:5
KW_var	var	29:5
IDENT	result1	29:9
:=	:=	29:17
IDENT	add	29:20
(	(	29:23
INT	5	29:24
,	,	29:25
INT	3	29:27
)	)	29:28
KW_var	var	30:5
IDENT	result2	30:9
:=	:=	30:17
IDENT	add	30:20
(	(	30:23
REAL	2.5	30:24
,	,	30:27
REAL	1.5	30:29
)	)	30:32
KW_var	var	31:5
IDENT	result3	31:9
:=	:=	31:17
IDENT	add	31:20
(	(	31:23
STRING	hello	31:24
,	,	31:31
STRING	 world	31:33
)	)	31:41
KW_assert	assert	32:5
IDENT	result1	32:12
==	==	32:20
INT	8	32:23
KW_assert	assert	33:5
IDENT	result2	33:12
==	==	33:20
REAL	4.0	33:23
KW_assert	assert	34:5
IDENT	result3	34:12
==	==	34:20
STRING	hello world	34:23
}	}	35:1
KW_test	test	37:1
STRING	Function with return statement in middle	37:6
{	{	37:49
KW_var	var	38:5
IDENT	check_positive	38:9
:=	:=	38:24
KW_func	func	38:27
(	(	38:31
IDENT	x	38:32
)	)	38:33
KW_is	is	38:35
KW_if	if	39:9
IDENT	x	39:12
>	>	39:14
INT	0	39:16
KW_then	then	39:18
KW_return	return	40:13
KW_true	true	40:20
KW_else	else	41:9
KW_return	return	42:13
KW_false	false	42:20
KW_end	end	43:9
KW_end	end	44:5
KW_assert	assert	46:5
IDENT	check_positive	46:12
(	(	46:26
INT	5	46:27
)	)	46:28
==	==	46:30
KW_true	true	46:33
KW_assert	assert	47:5
IDENT	check_positive	47:12
(	(	47:26
-	-	47:27
INT	3	47:28
)	)	47:29
==	==	47:31
KW_false	false	47:34
KW_assert	assert	48:5
IDENT	check_positive	48:12
(	(	48:26
INT	0	48:27
)	)	48:28
==	==	48:30
KW_false	false	48:33
}	}	49:1
KW_test	test	51:1
STRING	Function without explicit return	51:6
{	{	51:41
KW_var	var	52:5
IDENT	print_message	52:9
:=	:=	52:23
KW_func	func	52:26
(	(	52:30
IDENT	msg	52:31
)	)	52:34
KW_is	is	52:36
KW_print	print	53:9
IDENT	msg	53:15
KW_end	end	54:5
IDENT	print_message	56:5
(	(	56:18
STRING	test	56:19
)	)	56:25
}	}	58:1
KW_test	test	60:1
STRING	Nested function calls	60:6
{	{	60:30
KW_var	var	61:5
IDENT	double	61:9
:=	:=	61:16
KW_func	func	61:19
(	(	61:23
IDENT	x	61:24
)	)	61:25
KW_is	is	61:27
KW_return	return	61:30
IDENT	x	61:37
*	*	61:39
INT	2	61:41
KW_end	end	61:43
KW_var	var	62:5
IDENT	add_one	62:9
:=	:=	62:17
KW_func	func	62:20
(	(	62:24
IDENT	x	62:25
)	)	62:26
KW_is	is	62:28
KW_return	return	62:31
IDENT	x	62:38
+	+	62:40
INT	1	62:42
KW_end	end	62:44
KW_var	var	64:5
IDENT	result	64:9
:=	:=	64:16
IDENT	double	64:19
(	(	64:25
IDENT	add_one	64:26
(	(	64:33
INT	5	64:34
)	)	64:35
)	)	64:36
KW_assert	assert	65:5
IDENT	result	65:12
==	==	65:19
INT	12	65:22
}	}	66:1
KW_test	test	68:1
STRING	Recursive function	68:6
{	{	68:27
KW_var	var	69:5
IDENT	factorial	69:9
:=	:=	69:19
KW_func	func	69:22
(	(	69:26
IDENT	n	69:27
)	)	69:28
KW_is	is	69:30
KW_if	if	70:9
IDENT	n	70:12
<=	<=	70:14
INT	1	70:17
KW_then	then	70:19
KW_return	return	71:13
INT	1	71:20
KW_else	else	72:9
KW_return	return	73:13
IDENT	n	73:20
*	*	73:22
IDENT	factorial	73:24
(	(	73:33
IDENT	n	73:34
-	-	73:36
INT	1	73:38
)	)	73:39
KW_end	end	74:9
KW_end	end	75:5
KW_assert	assert	77:5
IDENT	factorial	77:12
(	(	77:21
INT	5	77:22
)	)	77:23
==	==	77:25
INT	120	77:28
KW_assert	assert	78:5
IDENT	factorial	78:12
(	(	78:21
INT	3	78:22
)	)	78:23
==	==	78:25
INT	6	78:28
KW_assert	assert	79:5
IDENT	factorial	79:12
(	(	79:21
INT	1	79:22
)	)	79:23
==	==	79:25
INT	1	79:28
}	}	80:1
KW_test	test	82:1
STRING	Function stored in array	82:6
{	{	82:33
KW_var	var	83:5
IDENT	functions	83:9
:=	:=	83:19
[	[	83:22
KW_func	func	84:9
(	(	84:13
IDENT	x	84:14
)	)	84:15
KW_is	is	84:17
KW_return	return	84:20
IDENT	x	84:27
+	+	84:29
INT	1	84:31
KW_end	end	84:33
,	,	84:36
KW_func	func	85:9
(	(	85:13
IDENT	x	85:14
)	)	85:15
KW_is	is	85:17
KW_return	return	85:20
IDENT	x	85:27
*	*	85:29
INT	2	85:31
KW_end	end	85:33
,	,	85:36
KW_func	func	86:9
(	(	86:13
IDENT	x	86:14
)	)	86:15
KW_is	is	86:17
KW_return	return	86:20
IDENT	x	86:27
*	*	86:29
IDENT	x	86:31
KW_end	end	86:33
]	]	87:5
KW_var	var	89:5
IDENT	result1	89:9
:=	:=	89:17
IDENT	functions	89:20
[	[	89:29
INT	1	89:30
]	]	89:31
(	(	89:32
INT	5	89:33
)	)	89:34
KW_var	var	90:5
IDENT	result2	90:9
:=	:=	90:17
IDENT	functions	90:20
[	[	90:29
INT	2	90:30
]	]	90:31
(	(	90:32
INT	5	90:33
)	)	90:34
KW_var	var	91:5
IDENT	result3	91:9
:=	:=	91:17
IDENT	functions	91:20
[	[	91:29
INT	3	91:30
]	]	91:31
(	(	91:32
INT	5	91:33
)	)	91:34
KW_assert	assert	93:5
IDENT	result1	93:12
==	==	93:20
INT	6	93:23
KW_assert	assert	94:5
IDENT	result2	94:12
==	==	94:20
INT	10	94:23
KW_assert	assert	95:5
IDENT	result3	95:12
==	==	95:20
INT	25	95:23
}	}	96:1
KW_test	test	98:1
STRING	Function stored in tuple	98:6
{	{	98:33
KW_var	var	99:5
IDENT	calculator	99:9
:=	:=	99:20
{	{	99:23
IDENT	add	100:9
:=	:=	100:13
KW_func	func	100:16
(	(	100:20
IDENT	a	100:21
,	,	100:22
IDENT	b	100:24
)	)	100:25
KW_is	is	100:27
KW_return	return	100:30
IDENT	a	100:37
+	+	100:39
IDENT	b	100:41
KW_end	end	100:43
,	,	100:46
IDENT	multiply	101:9
:=	:=	101:18
KW_func	func	101:21
(	(	101:25
IDENT	a	101:26
,	,	101:27
IDENT	b	101:29
)	)	101:30
KW_is	is	101:32
KW_return	return	101:35
IDENT	a	101:42
*	*	101:44
IDENT	b	101:46
KW_end	end	101:48
}	}	102:5
KW_var	var	104:5
IDENT	sum	104:9
:=	:=	104:13
IDENT	calculator	104:16
.	.	104:26
IDENT	add	104:27
(	(	104:30
INT	10	104:31
,	,	104:33
INT	5	104:35
)	)	104:36
KW_var	var	105:5
IDENT	product	105:9
:=	:=	105:17
IDENT	calculator	105:20
.	.	105:30
IDENT	multiply	105:31
(	(	105:39
INT	10	105:40
,	,	105:42
INT	5	105:44
)	)	105:45
KW_assert	assert	107:5
IDENT	sum	107:12
==	==	107:16
INT	15	107:19
KW_assert	assert	108:5
IDENT	product	108:12
==	==	108:20
INT	50	108:23
}	}	109:1
KW_test	test	111:1
STRING	Function as parameter	111:6
{	{	111:30
KW_var	var	112:5
IDENT	apply_operation	112:9
:=	:=	112:25
KW_func	func	112:28
(	(	112:32
IDENT	f	112:33
,	,	112:34
IDENT	x	112:36
,	,	112:37
IDENT	y	112:39
)	)	112:40
KW_is	is	112:42
KW_return	return	113:9
IDENT	f	113:16
(	(	113:17
IDENT	x	113:18
,	,	113:19
IDENT	y	113:21
)	)	113:22
KW_end	end	114:5
KW_var	var	116:5
IDENT	add	116:9
:=	:=	116:13
KW_func	func	116:16
(	(	116:20
IDENT	a	116:21
,	,	116:22
IDENT	b	116:24
)	)	116:25
KW_is	is	116:27
KW_return	return	116:30
IDENT	a	116:37
+	+	116:39
IDENT	b	116:41
KW_end	end	116:43
KW_var	var	117:5
IDENT	multiply	117:9
:=	:=	117:18
KW_func	func	117:21
(	(	117:25
IDENT	a	117:26
,	,	117:27
IDENT	b	117:29
)	)	117:30
KW_is	is	117:32
KW_return	return	117:35
IDENT	a	117:42
*	*	117:44
IDENT	b	117:46
KW_end	end	117:48
KW_var	var	119:5
IDENT	result1	119:9
:=	:=	119:17
IDENT	apply_operation	119:20
(	(	119:35
IDENT	add	119:36
,	,	119:39
INT	5	119:41
,	,	119:42
INT	3	119:44
)	)	119:45
KW_var	var	120:5
IDENT	result2	120:9
:=	:=	120:17
IDENT	apply_operation	120:20
(	(	120:35
IDENT	multiply	120:36
,	,	120:44
INT	5	120:46
,	,	120:47
INT	3	120:49
)	)	120:50
KW_assert	assert	122:5
IDENT	result1	122:12
==	==	122:20
INT	8	122:23
KW_assert	assert	123:5
IDENT	result2	123:12
==	==	123:20
INT	15	123:23
}	}	124:1
KW_test	test	126:1
STRING	Anonymous function in expression	126:6
{	{	126:41
KW_var	var	127:5
IDENT	result	127:9
:=	:=	127:16
(	(	127:19
KW_func	func	127:20
(	(	127:24
IDENT	x	127:25
)	)	127:26
KW_is	is	127:28
KW_return	return	127:31
IDENT	x	127:38
*	*	127:40
INT	2	127:42
KW_end	end	127:44
)	)	127:47
(	(	127:48
INT	10	127:49
)	)	127:51
KW_assert	assert	128:5
IDENT	result	128:12
==	==	128:19
INT	20	128:22
}	}	129:1
KW_test	test	131:1
STRING	Function with local variables	131:6
{	{	131:38
KW_var	var	132:5
IDENT	complex_calc	132:9
:=	:=	132:22
KW_func	func	132:25
(	(	132:29
IDENT	a	132:30
,	,	132:31
IDENT	b	132:33
,	,	132:34
IDENT	c	132:36
)	)	132:37
KW_is	is	132:39
KW_var	var	133:9
IDENT	temp1	133:13
:=	:=	133:19
IDENT	a	133:22
+	+	133:24
IDENT	b	133:26
KW_var	var	134:9
IDENT	temp2	134:13
:=	:=	134:19
IDENT	temp1	134:22
*	*	134:28
IDENT	c	134:30
KW_return	return	135:9
IDENT	temp2	135:16
-	-	135:22
IDENT	a	135:24
KW_end	end	136:5
KW_var	var	138:5
IDENT	result	138:9
:=	:=	138:16
IDENT	complex_calc	138:19
(	(	138:31
INT	2	138:32
,	,	138:33
INT	3	138:35
,	,	138:36
INT	4	138:38
)	)	138:39
KW_assert	assert	139:5
IDENT	result	139:12
==	==	139:19
INT	19	139:22
KW_assert	assert	141:5
IDENT	result	141:12
==	==	141:19
INT	18	141:22
}	}	142:1
EOF		143:1
KW_test	test	4:1
STRING	Arrow function syntax (=>)	4:6
{	{	4:35
KW_var	var	5:5
IDENT	square	5:9
:=	:=	5:16
KW_func	func	5:19
(	(	5:23
IDENT	x	5:24
)	)	5:25
=>	=>	5:27
IDENT	x	5:30
*	*	5:32
IDENT	x	5:34
KW_var	var	6:5
IDENT	result	6:9
:=	:=	6:16
IDENT	square	6:19
(	(	6:25
INT	6	6:26
)	)	6:27
KW_assert	assert	7:5
IDENT	result	7:12
==	==	7:19
INT	36	7:22
}	}	8:1
KW_test	test	10:1
STRING	Arrow function with multiple statements	10:6
{	{	10:48
KW_var	var	11:5
IDENT	process	11:9
:=	:=	11:17
KW_func	func	11:20
(	(	11:24
IDENT	x	11:25
)	)	11:26
=>	=>	11:28
KW_var	var	12:9
IDENT	doubled	12:13
:=	:=	12:21
IDENT	x	12:24
*	*	12:26
INT	2	12:28
KW_return	return	13:9
IDENT	doubled	13:16
+	+	13:24
INT	1	13:26
KW_var	var	15:5
IDENT	result	15:9
:=	:=	15:16
IDENT	process	15:19
(	(	15:26
INT	5	15:27
)	)	15:28
KW_assert	assert	16:5
IDENT	result	16:12
==	==	16:19
INT	11	16:22
}	}	17:1
KW_test	test	19:1
STRING	Function literal in assignment	19:6
{	{	19:39
KW_var	var	20:5
IDENT	f	20:9
IDENT	f	21:5
:=	:=	21:7
KW_func	func	21:10
(	(	21:14
IDENT	x	21:15
)	)	21:16
=>	=>	21:18
IDENT	x	21:21
+	+	21:23
INT	10	21:25
KW_var	var	22:5
IDENT	result	22:9
:=	:=	22:16
IDENT	f	22:19
(	(	22:20
INT	5	22:21
)	)	22:22
KW_assert	assert	23:5
IDENT	result	23:12
==	==	23:19
INT	15	23:22
}	}	24:1
KW_test	test	26:1
STRING	Function literal as array element	26:6
{	{	26:42
KW_var	var	27:5
IDENT	operations	27:9
:=	:=	27:20
[	[	27:23
KW_func	func	28:9
(	(	28:13
IDENT	x	28:14
)	)	28:15
=>	=>	28:17
IDENT	x	28:20
+	+	28:22
INT	1	28:24
,	,	28:25
KW_func	func	29:9
(	(	29:13
IDENT	x	29:14
)	)	29:15
=>	=>	29:17
IDENT	x	29:20
-	-	29:22
INT	1	29:24
,	,	29:25
KW_func	func	30:9
(	(	30:13
IDENT	x	30:14
)	)	30:15
=>	=>	30:17
IDENT	x	30:20
*	*	30:22
INT	2	30:24
]	]	31:5
KW_assert	assert	33:5
IDENT	operations	33:12
[	[	33:22
INT	1	33:23
]	]	33:24
(	(	33:25
INT	10	33:26
)	)	33:28
==	==	33:30
INT	11	33:33
KW_assert	assert	34:5
IDENT	operations	34:12
[	[	34:22
INT	2	34:23
]	]	34:24
(	(	34:25
INT	10	34:26
)	)	34:28
==	==	34:30
INT	9	34:33
KW_assert	assert	35:5
IDENT	operations	35:12
[	[	35:22
INT	3	35:23
]	]	35:24
(	(	35:25
INT	10	35:26
)	)	35:28
==	==	35:30
INT	20	35:33
}	}	36:1
KW_test	test	38:1
STRING	Function literal in tuple	38:6
{	{	38:34
KW_var	var	39:5
IDENT	math_ops	39:9
:=	:=	39:18
{	{	39:21
IDENT	increment	40:9
:=	:=	40:19
KW_func	func	40:22
(	(	40:26
IDENT	x	40:27
)	)	40:28
=>	=>	40:30
IDENT	x	40:33
+	+	40:35
INT	1	40:37
,	,	40:38
IDENT	decrement	41:9
:=	:=	41:19
KW_func	func	41:22
(	(	41:26
IDENT	x	41:27
)	)	41:28
=>	=>	41:30
IDENT	x	41:33
-	-	41:35
INT	1	41:37
,	,	41:38
IDENT	double	42:9
:=	:=	42:16
KW_func	func	42:19
(	(	42:23
IDENT	x	42:24
)	)	42:25
=>	=>	42:27
IDENT	x	42:30
*	*	42:32
INT	2	42:34
}	}	43:5
KW_assert	assert	45:5
IDENT	math_ops	45:12
.	.	45:20
IDENT	increment	45:21
(	(	45:30
INT	5	45:31
)	)	45:32
==	==	45:34
INT	6	45:37
KW_assert	assert	46:5
IDENT	math_ops	46:12
.	.	46:20
IDENT	decrement	46:21
(	(	46:30
INT	5	46:31
)	)	46:32
==	==	46:34
INT	4	46:37
KW_assert	assert	47:5
IDENT	math_ops	47:12
.	.	47:20
IDENT	double	47:21
(	(	47:27
INT	5	47:28
)	)	47:29
==	==	47:31
INT	10	47:34
}	}	48:1
KW_test	test	50:1
STRING	Function literal with no parameters	50:6
{	{	50:44
KW_var	var	51:5
IDENT	get_message	51:9
:=	:=	51:21
KW_func	func	51:24
(	(	51:28
)	)	51:29
=>	=>	51:31
STRING	Hello from function!	51:34
KW_var	var	52:5
IDENT	message	52:9
:=	:=	52:17
IDENT	get_message	52:20
(	(	52:31
)	)	52:32
KW_assert	assert	53:5
IDENT	message	53:12
==	==	53:20
STRING	Hello from function!	53:23
}	}	54:1
KW_test	test	56:1
STRING	Complex arrow function	56:6
{	{	56:31
KW_var	var	57:5
IDENT	calculate	57:9
:=	:=	57:19
KW_func	func	57:22
(	(	57:26
IDENT	a	57:27
,	,	57:28
IDENT	b	57:30
,	,	57:31
IDENT	c	57:33
)	)	57:34
=>	=>	57:36
KW_if	if	58:9
IDENT	a	58:12
>	>	58:14
IDENT	b	58:16
KW_then	then	58:18
KW_return	return	59:13
IDENT	a	59:20
+	+	59:22
IDENT	c	59:24
KW_else	else	60:9
KW_return	return	61:13
IDENT	b	61:20
+	+	61:22
IDENT	c	61:24
KW_end	end	62:9
KW_var	var	64:5
IDENT	result1	64:9
:=	:=	64:17
IDENT	calculate	64:20
(	(	64:29
INT	10	64:30
,	,	64:32
INT	5	64:34
,	,	64:35
INT	3	64:37
)	)	64:38
KW_var	var	65:5
IDENT	result2	65:9
:=	:=	65:17
IDENT	calculate	65:20
(	(	65:29
INT	3	65:30
,	,	65:31
INT	8	65:33
,	,	65:34
INT	2	65:36
)	)	65:37
KW_assert	assert	67:5
IDENT	result1	67:12
==	==	67:20
INT	13	67:23
KW_assert	assert	68:5
IDENT	result2	68:12
==	==	68:20
INT	10	68:23
}	}	69:1
KW_test	test	71:1
STRING	Function literal with array operations	71:6
{	{	71:47
KW_var	var	72:5
IDENT	sum_array	72:9
:=	:=	72:19
KW_func	func	72:22
(	(	72:26
IDENT	arr	72:27
)	)	72:30
=>	=>	72:32
KW_var	var	73:9
IDENT	total	73:13
:=	:=	73:19
INT	0	73:22
KW_for	for	74:9
IDENT	value	74:13
KW_in	in	74:19
IDENT	arr	74:22
KW_loop	loop	74:26
IDENT	total	75:13
:=	:=	75:19
IDENT	total	75:22
+	+	75:28
IDENT	value	75:30
KW_end	end	76:9
KW_return	return	77:9
IDENT	total	77:16
KW_var	var	79:5
IDENT	numbers	79:9
:=	:=	79:17
[	[	79:20
INT	1	79:21
,	,	79:22
INT	2	79:24
,	,	79:25
INT	3	79:27
,	,	79:28
INT	4	79:30
,	,	79:31
INT	5	79:33
]	]	79:34
KW_var	var	80:5
IDENT	result	80:9
:=	:=	80:16
IDENT	sum_array	80:19
(	(	80:28
IDENT	numbers	80:29
)	)	80:36
KW_assert	assert	81:5
IDENT	result	81:12
==	==	81:19
INT	15	81:22
}	}	82:1
KW_test	test	84:1
STRING	Higher-order function with arrow syntax	84:6
{	{	84:48
KW_var	var	85:5
IDENT	apply_twice	85:9
:=	:=	85:21
KW_func	func	85:24
(	(	85:28
IDENT	f	85:29
,	,	85:30
IDENT	x	85:32
)	)	85:33
=>	=>	85:35
KW_return	return	86:9
IDENT	f	86:16
(	(	86:17
IDENT	f	86:18
(	(	86:19
IDENT	x	86:20
)	)	86:21
)	)	86:22
KW_var	var	88:5
IDENT	add_five	88:9
:=	:=	88:18
KW_func	func	88:21
(	(	88:25
IDENT	x	88:26
)	)	88:27
=>	=>	88:29
IDENT	x	88:32
+	+	88:34
INT	5	88:36
KW_var	var	89:5
IDENT	result	89:9
:=	:=	89:16
IDENT	apply_twice	89:19
(	(	89:30
IDENT	add_five	89:31
,	,	89:39
INT	10	89:41
)	)	89:43
KW_assert	assert	90:5
IDENT	result	90:12
==	==	90:19
INT	20	90:22
}	}	91:1
KW_test	test	93:1
STRING	Function literal returning function	93:6
{	{	93:44
KW_var	var	94:5
IDENT	make_multiplier	94:9
:=	:=	94:25
KW_func	func	94:28
(	(	94:32
IDENT	factor	94:33
)	)	94:39
=>	=>	94:41
KW_return	return	95:9
KW_func	func	95:16
(	(	95:20
IDENT	x	95:21
)	)	95:22
=>	=>	95:24
IDENT	x	95:27
*	*	95:29
IDENT	factor	95:31
KW_var	var	97:5
IDENT	double	97:9
:=	:=	97:16
IDENT	make_multiplier	97:19
(	(	97:34
INT	2	97:35
)	)	97:36
KW_var	var	98:5
IDENT	triple	98:9
:=	:=	98:16
IDENT	make_multiplier	98:19
(	(	98:34
INT	3	98:35
)	)	98:36
KW_assert	assert	100:5
IDENT	double	100:12
(	(	100:18
INT	5	100:19
)	)	100:20
==	==	100:22
INT	10	100:25
KW_assert	assert	101:5
IDENT	triple	101:12
(	(	101:18
INT	5	101:19
)	)	101:20
==	==	101:22
INT	15	101:25
}	}	102:1
KW_test	test	104:1
STRING	Recursive arrow function	104:6
{	{	104:33
KW_var	var	105:5
IDENT	fib	105:9
:=	:=	105:13
KW_func	func	105:16
(	(	105:20
IDENT	n	105:21
)	)	105:22
=>	=>	105:24
KW_if	if	106:9
IDENT	n	106:12
<=	<=	106:14
INT	1	106:17
KW_then	then	106:19
KW_return	return	107:13
IDENT	n	107:20
KW_else	else	108:9
KW_return	return	109:13
IDENT	fib	109:20
(	(	109:23
IDENT	n	109:24
-	-	109:26
INT	1	109:28
)	)	109:29
+	+	109:31
IDENT	fib	109:33
(	(	109:36
IDENT	n	109:37
-	-	109:39
INT	2	109:41
)	)	109:42
KW_end	end	110:9
KW_assert	assert	112:5
IDENT	fib	112:12
(	(	112:15
INT	6	112:16
)	)	112:17
==	==	112:19
INT	8	112:22
KW_assert	assert	113:5
IDENT	fib	113:12
(	(	113:15
INT	4	113:16
)	)	113:17
==	==	113:19
INT	3	113:22
}	}	114:1
EOF		115:1
KW_test	test	4:1
STRING	Integer to real conversion in arithmetic	4:6
{	{	4:49
KW_var	var	5:5
IDENT	i	5:9
:=	:=	5:11
INT	5	5:14
KW_var	var	6:5
IDENT	r	6:9
:=	:=	6:11
REAL	2.5	6:14
KW_var	var	7:5
IDENT	result1	7:9
:=	:=	7:17
IDENT	i	7:20
+	+	7:22
IDENT	r	7:24
KW_var	var	8:5
IDENT	result2	8:9
:=	:=	8:17
IDENT	r	8:20
+	+	8:22
IDENT	i	8:24
KW_assert	assert	10:5
IDENT	result1	10:12
==	==	10:20
REAL	7.5	10:23
KW_assert	assert	11:5
IDENT	result2	11:12
==	==	11:20
REAL	7.5	11:23
KW_assert	assert	12:5
(	(	12:12
IDENT	result1	12:13
KW_is	is	12:21
KW_real	real	12:24
)	)	12:28
==	==	12:30
KW_true	true	12:33
KW_assert	assert	13:5
(	(	13:12
IDENT	result2	13:13
KW_is	is	13:21
KW_real	real	13:24
)	)	13:28
==	==	13:30
KW_true	true	13:33
}	}	14:1
KW_test	test	16:1
STRING	Integer division results	16:6
{	{	16:33
KW_var	var	17:5
IDENT	result1	17:9
:=	:=	17:17
INT	10	17:20
/	/	17:23
INT	3	17:25
KW_var	var	18:5
IDENT	result2	18:9
:=	:=	18:17
REAL	10.0	18:20
/	/	18:25
INT	3	18:27
KW_var	var	19:5
IDENT	result3	19:9
:=	:=	19:17
INT	10	19:20
/	/	19:23
REAL	3.0	19:25
KW_assert	assert	21:5
IDENT	result1	21:12
==	==	21:20
INT	3	21:23
KW_assert	assert	22:5
IDENT	result2	22:12
==	==	22:20
REAL	3.3333333333333335	22:23
KW_assert	assert	23:5
IDENT	result3	23:12
==	==	23:20
REAL	3.3333333333333335	23:23
KW_assert	assert	25:5
(	(	25:12
IDENT	result1	25:13
KW_is	is	25:21
KW_int	int	25:24
)	)	25:27
==	==	25:29
KW_true	true	25:32
KW_assert	assert	26:5
(	(	26:12
IDENT	result2	26:13
KW_is	is	26:21
KW_real	real	26:24
)	)	26:28
==	==	26:30
KW_true	true	26:33
KW_assert	assert	27:5
(	(	27:12
IDENT	result3	27:13
KW_is	is	27:21
KW_real	real	27:24
)	)	27:28
==	==	27:30
KW_true	true	27:33
}	}	28:1
KW_test	test	30:1
STRING	String concatenation with different types	30:6
{	{	30:50
KW_var	var	31:5
IDENT	s	31:9
:=	:=	31:11
STRING	value: 	31:14
KW_var	var	32:5
IDENT	i	32:9
:=	:=	32:11
INT	42	32:14
KW_var	var	33:5
IDENT	r	33:9
:=	:=	33:11
REAL	3.14	33:14
KW_var	var	34:5
IDENT	b	34:9
:=	:=	34:11
KW_true	true	34:14
KW_var	var	36:5
IDENT	result1	36:9
:=	:=	36:17
IDENT	s	36:20
+	+	36:22
IDENT	i	36:24
KW_var	var	37:5
IDENT	result2	37:9
:=	:=	37:17
IDENT	s	37:20
+	+	37:22
IDENT	r	37:24
KW_var	var	38:5
IDENT	result3	38:9
:=	:=	38:17
IDENT	s	38:20
+	+	38:22
IDENT	b	38:24
KW_assert	assert	40:5
IDENT	result1	40:12
==	==	40:20
STRING	value: 42	40:23
KW_assert	assert	41:5
IDENT	result2	41:12
==	==	41:20
STRING	value: 3.14	41:23
KW_assert	assert	42:5
IDENT	result3	42:12
==	==	42:20
STRING	value: true	42:23
KW_assert	assert	44:5
(	(	44:12
IDENT	result1	44:13
KW_is	is	44:21
KW_string	string	44:24
)	)	44:30
==	==	44:32
KW_true	true	44:35
KW_assert	assert	45:5
(	(	45:12
IDENT	result2	45:13
KW_is	is	45:21
KW_string	string	45:24
)	)	45:30
==	==	45:32
KW_true	true	45:35
KW_assert	assert	46:5
(	(	46:12
IDENT	result3	46:13
KW_is	is	46:21
KW_string	string	46:24
)	)	46:30
==	==	46:32
KW_true	true	46:35
}	}	47:1
KW_test	test	49:1
STRING	Array concatenation preserves types	49:6
{	{	49:44
KW_var	var	50:5
IDENT	arr1	50:9
:=	:=	50:14
[	[	50:17
INT	1	50:18
,	,	50:19
INT	2	50:21
,	,	50:22
INT	3	50:24
]	]	50:25
KW_var	var	51:5
IDENT	arr2	51:9
:=	:=	51:14
[	[	51:17
REAL	4.0	51:18
,	,	51:21
REAL	5.0	51:23
]	]	51:26
KW_var	var	52:5
IDENT	result	52:9
:=	:=	52:16
IDENT	arr1	52:19
+	+	52:24
IDENT	arr2	52:26
KW_assert	assert	54:5
IDENT	result	54:12
[	[	54:18
INT	1	54:19
]	]	54:20
==	==	54:22
INT	1	54:25
KW_assert	assert	55:5
IDENT	result	55:12
[	[	55:18
INT	2	55:19
]	]	55:20
==	==	55:22
INT	2	55:25
KW_assert	assert	56:5
IDENT	result	56:12
[	[	56:18
INT	3	56:19
]	]	56:20
==	==	56:22
INT	3	56:25
KW_assert	assert	57:5
IDENT	result	57:12
[	[	57:18
INT	4	57:19
]	]	57:20
==	==	57:22
REAL	4.0	57:25
KW_assert	assert	58:5
IDENT	result	58:12
[	[	58:18
INT	5	58:19
]	]	58:20
==	==	58:22
REAL	5.0	58:25
KW_assert	assert	60:5
(	(	60:12
IDENT	result	60:13
[	[	60:19
INT	1	60:20
]	]	60:21
KW_is	is	60:23
KW_int	int	60:26
)	)	60:29
==	==	60:31
KW_true	true	60:34
KW_assert	assert	61:5
(	(	61:12
IDENT	result	61:13
[	[	61:19
INT	4	61:20
]	]	61:21
KW_is	is	61:23
KW_real	real	61:26
)	)	61:30
==	==	61:32
KW_true	true	61:35
}	}	62:1
KW_test	test	64:1
STRING	Tuple concatenation preserves types	64:6
{	{	64:44
KW_var	var	65:5
IDENT	t1	65:9
:=	:=	65:12
{	{	65:15
IDENT	a	65:16
:=	:=	65:18
INT	1	65:21
,	,	65:22
IDENT	b	65:24
:=	:=	65:26
INT	2	65:29
}	}	65:30
KW_var	var	66:5
IDENT	t2	66:9
:=	:=	66:12
{	{	66:15
IDENT	c	66:16
:=	:=	66:18
REAL	3.14	66:21
,	,	66:25
IDENT	d	66:27
:=	:=	66:29
STRING	test	66:32
}	}	66:38
KW_var	var	67:5
IDENT	result	67:9
:=	:=	67:16
IDENT	t1	67:19
+	+	67:22
IDENT	t2	67:24
KW_assert	assert	69:5
IDENT	result	69:12
.	.	69:18
IDENT	a	69:19
==	==	69:21
INT	1	69:24
KW_assert	assert	70:5
IDENT	result	70:12
.	.	70:18
IDENT	b	70:19
==	==	70:21
INT	2	70:24
KW_assert	assert	71:5
IDENT	result	71:12
.	.	71:18
IDENT	c	71:19
==	==	71:21
REAL	3.14	71:24
KW_assert	assert	72:5
IDENT	result	72:12
.	.	72:18
IDENT	d	72:19
==	==	72:21
STRING	test	72:24
KW_assert	assert	74:5
(	(	74:12
IDENT	result	74:13
.	.	74:19
IDENT	a	74:20
KW_is	is	74:22
KW_int	int	74:25
)	)	74:28
==	==	74:30
KW_true	true	74:33
KW_assert	assert	75:5
(	(	75:12
IDENT	result	75:13
.	.	75:19
IDENT	c	75:20
KW_is	is	75:22
KW_real	real	75:25
)	)	75:29
==	==	75:31
KW_true	true	75:34
KW_assert	assert	76:5
(	(	76:12
IDENT	result	76:13
.	.	76:19
IDENT	d	76:20
KW_is	is	76:22
KW_string	string	76:25
)	)	76:31
==	==	76:33
KW_true	true	76:36
}	}	77:1
KW_test	test	79:1
STRING	Comparison operations with mixed types	79:6
{	{	79:47
KW_assert	assert	81:5
(	(	81:12
INT	5	81:13
<	<	81:15
REAL	5.5	81:17
)	)	81:20
==	==	81:22
KW_true	true	81:25
KW_assert	assert	82:5
(	(	82:12
REAL	5.5	82:13
>	>	82:17
INT	5	82:19
)	)	82:20
==	==	82:22
KW_true	true	82:25
KW_assert	assert	83:5
(	(	83:12
INT	5	83:13
=	=	83:15
REAL	5.0	83:17
)	)	83:20
==	==	83:22
KW_true	true	83:25
KW_var	var	87:5
IDENT	result	87:9
:=	:=	87:16
INT	5	87:19
<	<	87:21
REAL	5.5	87:23
KW_and	and	87:27
REAL	5.5	87:31
>	>	87:35
INT	5	87:37
KW_assert	assert	88:5
IDENT	result	88:12
==	==	88:19
KW_true	true	88:22
}	}	89:1
KW_test	test	91:1
STRING	Function calls with type conversion	91:6
{	{	91:44
KW_var	var	92:5
IDENT	identity	92:9
:=	:=	92:18
KW_func	func	92:21
(	(	92:25
IDENT	x	92:26
)	)	92:27
=>	=>	92:29
IDENT	x	92:32
KW_var	var	94:5
IDENT	result1	94:9
:=	:=	94:17
IDENT	identity	94:20
(	(	94:28
INT	42	94:29
)	)	94:31
KW_var	var	95:5
IDENT	result2	95:9
:=	:=	95:17
IDENT	identity	95:20
(	(	95:28
REAL	3.14	95:29
)	)	95:33
KW_var	var	96:5
IDENT	result3	96:9
:=	:=	96:17
IDENT	identity	96:20
(	(	96:28
STRING	test	96:29
)	)	96:35
KW_assert	assert	98:5
IDENT	result1	98:12
==	==	98:20
INT	42	98:23
KW_assert	assert	99:5
IDENT	result2	99:12
==	==	99:20
REAL	3.14	99:23
KW_assert	assert	100:5
IDENT	result3	100:12
==	==	100:20
STRING	test	100:23
KW_assert	assert	102:5
(	(	102:12
IDENT	result1	102:13
KW_is	is	102:21
KW_int	int	102:24
)	)	102:27
==	==	102:29
KW_true	true	102:32
KW_assert	assert	103:5
(	(	103:12
IDENT	result2	103:13
KW_is	is	103:21
KW_real	real	103:24
)	)	103:28
==	==	103:30
KW_true	true	103:33
KW_assert	assert	104:5
(	(	104:12
IDENT	result3	104:13
KW_is	is	104:21
KW_string	string	104:24
)	)	104:30
==	==	104:32
KW_true	true	104:35
}	}	105:1
KW_test	test	107:1
STRING	Arithmetic operations preserve precision	107:6
{	{	107:49
KW_var	var	108:5
IDENT	result1	108:9
:=	:=	108:17
INT	5	108:20
+	+	108:22
INT	0	108:24
KW_var	var	109:5
IDENT	result2	109:9
:=	:=	109:17
INT	5	109:20
+	+	109:22
REAL	0.0	109:24
KW_var	var	110:5
IDENT	result3	110:9
:=	:=	110:17
REAL	5.0	110:20
+	+	110:24
INT	0	110:26
KW_var	var	111:5
IDENT	result4	111:9
:=	:=	111:17
REAL	5.0	111:20
+	+	111:24
REAL	0.0	111:26
KW_assert	assert	113:5
IDENT	result1	113:12
==	==	113:20
INT	5	113:23
KW_assert	assert	114:5
IDENT	result2	114:12
==	==	114:20
REAL	5.0	114:23
KW_assert	assert	115:5
IDENT	result3	115:12
==	==	115:20
REAL	5.0	115:23
KW_assert	assert	116:5
IDENT	result4	116:12
==	==	116:20
REAL	5.0	116:23
KW_assert	assert	118:5
(	(	118:12
IDENT	result1	118:13
KW_is	is	118:21
KW_int	int	118:24
)	)	118:27
==	==	118:29
KW_true	true	118:32
KW_assert	assert	119:5
(	(	119:12
IDENT	result2	119:13
KW_is	is	119:21
KW_real	real	119:24
)	)	119:28
==	==	119:30
KW_true	true	119:33
KW_assert	assert	120:5
(	(	120:12
IDENT	result3	120:13
KW_is	is	120:21
KW_real	real	120:24
)	)	120:28
==	==	120:30
KW_true	true	120:33
KW_assert	assert	121:5
(	(	121:12
IDENT	result4	121:13
KW_is	is	121:21
KW_real	real	121:24
)	)	121:28
==	==	121:30
KW_true	true	121:33
}	}	122:1
KW_test	test	124:1
STRING	Complex expressions with conversions	124:6
{	{	124:45
KW_var	var	125:5
IDENT	x	125:9
:=	:=	125:11
INT	5	125:14
KW_var	var	126:5
IDENT	y	126:9
:=	:=	126:11
REAL	2.0	126:14
KW_var	var	127:5
IDENT	result	127:9
:=	:=	127:16
(	(	127:19
IDENT	x	127:20
+	+	127:22
IDENT	y	127:24
)	)	127:25
*	*	127:27
INT	2	127:29
/	/	127:31
INT	3	127:33
KW_assert	assert	130:5
(	(	130:12
IDENT	result	130:13
KW_is	is	130:20
KW_real	real	130:23
)	)	130:27
==	==	130:29
KW_true	true	130:32
}	}	131:1
KW_test	test	133:1
STRING	Type conversion in assignments	133:6
{	{	133:39
KW_var	var	134:5
IDENT	value	134:9
IDENT	value	135:5
:=	:=	135:11
INT	42	135:14
KW_assert	assert	136:5
(	(	136:12
IDENT	value	136:13
KW_is	is	136:19
KW_int	int	136:22
)	)	136:25
==	==	136:27
KW_true	true	136:30
IDENT	value	138:5
:=	:=	138:11
REAL	3.14	138:14
KW_assert	assert	139:5
(	(	139:12
IDENT	value	139:13
KW_is	is	139:19
KW_real	real	139:22
)	)	139:26
==	==	139:28
KW_true	true	139:31
IDENT	value	141:5
:=	:=	141:11
STRING	test	141:14
KW_assert	assert	142:5
(	(	142:12
IDENT	value	142:13
KW_is	is	142:19
KW_string	string	142:22
)	)	142:28
==	==	142:30
KW_true	true	142:33
}	}	143:1
KW_test	test	145:1
STRING	Conversion in function return values	145:6
{	{	145:45
KW_var	var	146:5
IDENT	make_real	146:9
:=	:=	146:19
KW_func	func	146:22
(	(	146:26
IDENT	x	146:27
)	)	146:28
=>	=>	146:30
IDENT	x	146:33
+	+	146:35
REAL	0.0	146:37
KW_var	var	147:5
IDENT	make_int	147:9
:=	:=	147:18
KW_func	func	147:21
(	(	147:25
IDENT	x	147:26
)	)	147:27
=>	=>	147:29
IDENT	x	147:32
/	/	147:34
INT	1	147:36
KW_var	var	149:5
IDENT	result1	149:9
:=	:=	149:17
IDENT	make_real	149:20
(	(	149:29
INT	5	149:30
)	)	149:31
KW_var	var	150:5
IDENT	result2	150:9
:=	:=	150:17
IDENT	make_int	150:20
(	(	150:28
INT	10	150:29
)	)	150:31
KW_assert	assert	152:5
IDENT	result1	152:12
==	==	152:20
REAL	5.0	152:23
KW_assert	assert	153:5
IDENT	result2	153:12
==	==	153:20
INT	10	153:23
KW_assert	assert	155:5
(	(	155:12
IDENT	result1	155:13
KW_is	is	155:21
KW_real	real	155:24
)	)	155:28
==	==	155:30
KW_true	true	155:33
KW_assert	assert	156:5
(	(	156:12
IDENT	result2	156:13
KW_is	is	156:21
KW_int	int	156:24
)	)	156:27
==	==	156:29
KW_true	true	156:32
}	}	157:1
EOF		158:1
KW_test	test	4:1
STRING	Type checking for basic types	4:6
{	{	4:38
KW_var	var	5:5
IDENT	i	5:9
:=	:=	5:11
INT	42	5:14
KW_var	var	6:5
IDENT	r	6:9
:=	:=	6:11
REAL	3.14	6:14
KW_var	var	7:5
IDENT	s	7:9
:=	:=	7:11
STRING	hello	7:14
KW_var	var	8:5
IDENT	b	8:9
:=	:=	8:11
KW_true	true	8:14
KW_var	var	9:5
IDENT	n	9:9
:=	:=	9:11
KW_none	none	9:14
KW_assert	assert	11:5
(	(	11:12
IDENT	i	11:13
KW_is	is	11:15
KW_int	int	11:18
)	)	11:21
==	==	11:23
KW_true	true	11:26
KW_assert	assert	12:5
(	(	12:12
IDENT	r	12:13
KW_is	is	12:15
KW_real	real	12:18
)	)	12:22
==	==	12:24
KW_true	true	12:27
KW_assert	assert	13:5
(	(	13:12
IDENT	s	13:13
KW_is	is	13:15
KW_string	string	13:18
)	)	13:24
==	==	13:26
KW_true	true	13:29
KW_assert	assert	14:5
(	(	14:12
IDENT	b	14:13
KW_is	is	14:15
KW_bool	bool	14:18
)	)	14:22
==	==	14:24
KW_true	true	14:27
KW_assert	assert	15:5
(	(	15:12
IDENT	n	15:13
KW_is	is	15:15
KW_none	none	15:18
)	)	15:22
==	==	15:24
KW_true	true	15:27
KW_assert	assert	18:5
(	(	18:12
IDENT	i	18:13
KW_is	is	18:15
KW_real	real	18:18
)	)	18:22
==	==	18:24
KW_false	false	18:27
KW_assert	assert	19:5
(	(	19:12
IDENT	r	19:13
KW_is	is	19:15
KW_int	int	19:18
)	)	19:21
==	==	19:23
KW_false	false	19:26
KW_assert	assert	20:5
(	(	20:12
IDENT	s	20:13
KW_is	is	20:15
KW_bool	bool	20:18
)	)	20:22
==	==	20:24
KW_false	false	20:27
KW_assert	assert	21:5
(	(	21:12
IDENT	b	21:13
KW_is	is	21:15
KW_string	string	21:18
)	)	21:24
==	==	21:26
KW_false	false	21:29
KW_assert	assert	22:5
(	(	22:12
IDENT	n	22:13
KW_is	is	22:15
KW_int	int	22:18
)	)	22:21
==	==	22:23
KW_false	false	22:26
}	}	23:1
KW_test	test	25:1
STRING	Type checking for arrays	25:6
{	{	25:33
KW_var	var	26:5
IDENT	empty_arr	26:9
:=	:=	26:19
[	[	26:22
]	]	26:23
KW_var	var	27:5
IDENT	int_arr	27:9
:=	:=	27:17
[	[	27:20
INT	1	27:21
,	,	27:22
INT	2	27:24
,	,	27:25
INT	3	27:27
]	]	27:28
KW_var	var	28:5
IDENT	mixed_arr	28:9
:=	:=	28:19
[	[	28:22
INT	1	28:23
,	,	28:24
STRING	hello	28:26
,	,	28:33
KW_true	true	28:35
]	]	28:39
KW_assert	assert	30:5
(	(	30:12
IDENT	empty_arr	30:13
KW_is	is	30:23
[	[	30:26
]	]	30:27
)	)	30:28
==	==	30:30
KW_true	true	30:33
KW_assert	assert	31:5
(	(	31:12
IDENT	int_arr	31:13
KW_is	is	31:21
[	[	31:24
]	]	31:25
)	)	31:26
==	==	31:28
KW_true	true	31:31
KW_assert	assert	32:5
(	(	32:12
IDENT	mixed_arr	32:13
KW_is	is	32:23
[	[	32:26
]	]	32:27
)	)	32:28
==	==	32:30
KW_true	true	32:33
KW_assert	assert	35:5
(	(	35:12
IDENT	empty_arr	35:13
KW_is	is	35:23
KW_int	int	35:26
)	)	35:29
==	==	35:31
KW_false	false	35:34
KW_assert	assert	36:5
(	(	36:12
IDENT	int_arr	36:13
KW_is	is	36:21
KW_string	string	36:24
)	)	36:30
==	==	36:32
KW_false	false	36:35
}	}	37:1
KW_test	test	39:1
STRING	Type checking for tuples	39:6
{	{	39:33
KW_var	var	40:5
IDENT	simple_tuple	40:9
:=	:=	40:22
{	{	40:25
IDENT	a	40:26
:=	:=	40:28
INT	1	40:31
,	,	40:32
IDENT	b	40:34
:=	:=	40:36
INT	2	40:39
}	}	40:40
KW_var	var	41:5
IDENT	unnamed_tuple	41:9
:=	:=	41:23
{	{	41:26
INT	10	41:27
,	,	41:29
INT	20	41:31
,	,	41:33
INT	30	41:35
}	}	41:37
KW_assert	assert	43:5
(	(	43:12
IDENT	simple_tuple	43:13
KW_is	is	43:26
{	{	43:29
}	}	43:30
)	)	43:31
==	==	43:33
KW_true	true	43:36
KW_assert	assert	44:5
(	(	44:12
IDENT	unnamed_tuple	44:13
KW_is	is	44:27
{	{	44:30
}	}	44:31
)	)	44:32
==	==	44:34
KW_true	true	44:37
KW_assert	assert	47:5
(	(	47:12
IDENT	simple_tuple	47:13
KW_is	is	47:26
[	[	47:29
]	]	47:30
)	)	47:31
==	==	47:33
KW_false	false	47:36
KW_assert	assert	48:5
(	(	48:12
IDENT	unnamed_tuple	48:13
KW_is	is	48:27
KW_int	int	48:30
)	)	48:33
==	==	48:35
KW_false	false	48:38
}	}	49:1
KW_test	test	51:1
STRING	Type checking for functions	51:6
{	{	51:36
KW_var	var	52:5
IDENT	simple_func	52:9
:=	:=	52:21
KW_func	func	52:24
(	(	52:28
IDENT	x	52:29
)	)	52:30
=>	=>	52:32
IDENT	x	52:35
+	+	52:37
INT	1	52:39
KW_var	var	53:5
IDENT	complex_func	53:9
:=	:=	53:22
KW_func	func	53:25
(	(	53:29
IDENT	a	53:30
,	,	53:31
IDENT	b	53:33
)	)	53:34
KW_is	is	53:36
KW_return	return	53:39
IDENT	a	53:46
*	*	53:48
IDENT	b	53:50
KW_end	end	53:52
KW_assert	assert	55:5
(	(	55:12
IDENT	simple_func	55:13
KW_is	is	55:25
KW_func	func	55:28
)	)	55:32
==	==	55:34
KW_true	true	55:37
KW_assert	assert	56:5
(	(	56:12
IDENT	complex_func	56:13
KW_is	is	56:26
KW_func	func	56:29
)	)	56:33
==	==	56:35
KW_true	true	56:38
KW_assert	assert	59:5
(	(	59:12
IDENT	simple_func	59:13
KW_is	is	59:25
KW_int	int	59:28
)	)	59:31
==	==	59:33
KW_false	false	59:36
KW_assert	assert	60:5
(	(	60:12
IDENT	complex_func	60:13
KW_is	is	60:26
[	[	60:29
]	]	60:30
)	)	60:31
==	==	60:33
KW_false	false	60:36
}	}	61:1
KW_test	test	63:1
STRING	Type checking in expressions	63:6
{	{	63:37
KW_var	var	64:5
IDENT	x	64:9
:=	:=	64:11
INT	5	64:14
KW_var	var	65:5
IDENT	result	65:9
:=	:=	65:16
IDENT	x	65:19
KW_is	is	65:21
KW_int	int	65:24
KW_and	and	65:28
IDENT	x	65:32
>	>	65:34
INT	0	65:36
KW_assert	assert	66:5
IDENT	result	66:12
==	==	66:19
KW_true	true	66:22
KW_var	var	68:5
IDENT	y	68:9
:=	:=	68:11
STRING	test	68:14
IDENT	result	69:5
:=	:=	69:12
IDENT	y	69:15
KW_is	is	69:17
KW_string	string	69:20
KW_or	or	69:27
IDENT	y	69:30
KW_is	is	69:32
KW_int	int	69:35
KW_assert	assert	70:5
IDENT	result	70:12
==	==	70:19
KW_true	true	70:22
}	}	71:1
KW_test	test	73:1
STRING	Type checking with none values	73:6
{	{	73:39
KW_var	var	74:5
IDENT	uninitialized	74:9
KW_assert	assert	75:5
(	(	75:12
IDENT	uninitialized	75:13
KW_is	is	75:27
KW_none	none	75:30
)	)	75:34
==	==	75:36
KW_true	true	75:39
KW_var	var	78:5
IDENT	x	78:9
:=	:=	78:11
KW_none	none	78:14
KW_assert	assert	79:5
(	(	79:12
IDENT	x	79:13
KW_is	is	79:15
KW_none	none	79:18
)	)	79:22
==	==	79:24
KW_true	true	79:27
}	}	80:1
KW_test	test	82:1
STRING	Type checking after reassignment	82:6
{	{	82:41
KW_var	var	83:5
IDENT	value	83:9
:=	:=	83:15
INT	42	83:18
KW_assert	assert	84:5
(	(	84:12
IDENT	value	84:13
KW_is	is	84:19
KW_int	int	84:22
)	)	84:25
==	==	84:27
KW_true	true	84:30
IDENT	value	86:5
:=	:=	86:11
REAL	3.14	86:14
KW_assert	assert	87:5
(	(	87:12
IDENT	value	87:13
KW_is	is	87:19
KW_real	real	87:22
)	)	87:26
==	==	87:28
KW_true	true	87:31
KW_assert	assert	88:5
(	(	88:12
IDENT	value	88:13
KW_is	is	88:19
KW_int	int	88:22
)	)	88:25
==	==	88:27
KW_false	false	88:30
IDENT	value	90:5
:=	:=	90:11
STRING	changed	90:14
KW_assert	assert	91:5
(	(	91:12
IDENT	value	91:13
KW_is	is	91:19
KW_string	string	91:22
)	)	91:28
==	==	91:30
KW_true	true	91:33
KW_assert	assert	92:5
(	(	92:12
IDENT	value	92:13
KW_is	is	92:19
KW_real	real	92:22
)	)	92:26
==	==	92:28
KW_false	false	92:31
}	}	93:1
KW_test	test	95:1
STRING	Type checking in function parameters	95:6
{	{	95:45
KW_var	var	96:5
IDENT	check_type	96:9
:=	:=	96:20
KW_func	func	96:23
(	(	96:27
IDENT	val	96:28
)	)	96:31
=>	=>	96:33
KW_if	if	97:9
IDENT	val	97:12
KW_is	is	97:16
KW_int	int	97:19
KW_then	then	97:23
KW_return	return	98:13
STRING	integer	98:20
KW_else	else	99:9
KW_if	if	99:14
IDENT	val	99:17
KW_is	is	99:21
KW_real	real	99:24
KW_then	then	99:29
KW_return	return	100:13
STRING	real	100:20
KW_else	else	101:9
KW_if	if	101:14
IDENT	val	101:17
KW_is	is	101:21
KW_string	string	101:24
KW_then	then	101:31
KW_return	return	102:13
STRING	string	102:20
KW_else	else	103:9
KW_return	return	104:13
STRING	other	104:20
KW_end	end	105:9
KW_assert	assert	107:5
IDENT	check_type	107:12
(	(	107:22
INT	42	107:23
)	)	107:25
==	==	107:27
STRING	integer	107:30
KW_assert	assert	108:5
IDENT	check_type	108:12
(	(	108:22
REAL	3.14	108:23
)	)	108:27
==	==	108:29
STRING	real	108:32
KW_assert	assert	109:5
IDENT	check_type	109:12
(	(	109:22
STRING	hello	109:23
)	)	109:30
==	==	109:32
STRING	string	109:35
KW_assert	assert	110:5
IDENT	check_type	110:12
(	(	110:22
KW_true	true	110:23
)	)	110:27
==	==	110:29
STRING	other	110:32
}	}	111:1
KW_test	test	113:1
STRING	Type checking complex expressions	113:6
{	{	113:42
KW_var	var	114:5
IDENT	data	114:9
:=	:=	114:14
[	[	114:17
INT	1	114:18
,	,	114:19
REAL	2.5	114:21
,	,	114:24
STRING	test	114:26
,	,	114:32
KW_true	true	114:34
]	]	114:38
KW_var	var	115:5
IDENT	result	115:9
:=	:=	115:16
IDENT	data	115:19
[	[	115:23
INT	1	115:24
]	]	115:25
KW_is	is	115:27
KW_int	int	115:30
KW_and	and	115:34
IDENT	data	115:38
[	[	115:42
INT	2	115:43
]	]	115:44
KW_is	is	115:46
KW_real	real	115:49
KW_and	and	115:54
IDENT	data	115:58
[	[	115:62
INT	3	115:63
]	]	115:64
KW_is	is	115:66
KW_string	string	115:69
KW_assert	assert	116:5
IDENT	result	116:12
==	==	116:19
KW_true	true	116:22
}	}	117:1
KW_test	test	119:1
STRING	Type checking nested structures	119:6
{	{	119:40
KW_var	var	120:5
IDENT	nested	120:9
:=	:=	120:16
{	{	120:19
IDENT	numbers	121:9
:=	:=	121:17
[	[	121:20
INT	1	121:21
,	,	121:22
INT	2	121:24
,	,	121:25
INT	3	121:27
]	]	121:28
,	,	121:29
IDENT	info	122:9
:=	:=	122:14
{	{	122:17
IDENT	name	122:18
:=	:=	122:23
STRING	test	122:26
,	,	122:32
IDENT	active	122:34
:=	:=	122:41
KW_true	true	122:44
}	}	122:48
}	}	123:5
KW_assert	assert	125:5
(	(	125:12
IDENT	nested	125:13
KW_is	is	125:20
{	{	125:23
}	}	125:24
)	)	125:25
==	==	125:27
KW_true	true	125:30
KW_assert	assert	126:5
(	(	126:12
IDENT	nested	126:13
.	.	126:19
IDENT	numbers	126:20
KW_is	is	126:28
[	[	126:31
]	]	126:32
)	)	126:33
==	==	126:35
KW_true	true	126:38
KW_assert	assert	127:5
(	(	127:12
IDENT	nested	127:13
.	.	127:19
IDENT	info	127:20
KW_is	is	127:25
{	{	127:28
}	}	127:29
)	)	127:30
==	==	127:32
KW_true	true	127:35
KW_assert	assert	128:5
(	(	128:12
IDENT	nested	128:13
.	.	128:19
IDENT	numbers	128:20
[	[	128:27
INT	1	128:28
]	]	128:29
KW_is	is	128:31
KW_int	int	128:34
)	)	128:37
==	==	128:39
KW_true	true	128:42
KW_assert	assert	129:5
(	(	129:12
IDENT	nested	129:13
.	.	129:19
IDENT	info	129:20
.	.	129:24
IDENT	name	129:25
KW_is	is	129:30
KW_string	string	129:33
)	)	129:39
==	==	129:41
KW_true	true	129:44
KW_assert	assert	130:5
(	(	130:12
IDENT	nested	130:13
.	.	130:19
IDENT	info	130:20
.	.	130:24
IDENT	active	130:25
KW_is	is	130:32
KW_bool	bool	130:35
)	)	130:39
==	==	130:41
KW_true	true	130:44
}	}	131:1
EOF		132:1
